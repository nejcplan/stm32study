
discovery_board_blink1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000456c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080046fc  080046fc  000056fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004790  08004790  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004790  08004790  00005790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004798  08004798  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004798  08004798  00005798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800479c  0800479c  0000579c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080047a0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000584  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ec  200005ec  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001146c  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023af  00000000  00000000  00017504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  000198b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b16  00000000  00000000  0001a700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef00  00000000  00000000  0001b216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e15  00000000  00000000  0003a116  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b597f  00000000  00000000  0004cf2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001028aa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004384  00000000  00000000  001028f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000074  00000000  00000000  00106c74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080046e4 	.word	0x080046e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080046e4 	.word	0x080046e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_write>:
/* USER CODE BEGIN 0 */

/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d002      	beq.n	8000288 <_write+0x18>
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2b02      	cmp	r3, #2
 8000286:	d111      	bne.n	80002ac <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	b29a      	uxth	r2, r3
 800028c:	f04f 33ff 	mov.w	r3, #4294967295
 8000290:	68b9      	ldr	r1, [r7, #8]
 8000292:	4809      	ldr	r0, [pc, #36]	@ (80002b8 <_write+0x48>)
 8000294:	f002 fde9 	bl	8002e6a <HAL_UART_Transmit>
 8000298:	4603      	mov	r3, r0
 800029a:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800029c:	7dfb      	ldrb	r3, [r7, #23]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d101      	bne.n	80002a6 <_write+0x36>
      return len;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	e004      	b.n	80002b0 <_write+0x40>
    else
      return -1;
 80002a6:	f04f 33ff 	mov.w	r3, #4294967295
 80002aa:	e001      	b.n	80002b0 <_write+0x40>
  }
  return -1;
 80002ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3718      	adds	r7, #24
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	2000013c 	.word	0x2000013c

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 fc19 	bl	8000af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f83b 	bl	8000340 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f000 f96d 	bl	80005a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80002ce:	f000 f89b 	bl	8000408 <MX_I2C1_Init>
  MX_SPI1_Init();
 80002d2:	f000 f8d9 	bl	8000488 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002d6:	f000 f945 	bl	8000564 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80002da:	f000 f913 	bl	8000504 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Blink1 starting\n");
 80002de:	4814      	ldr	r0, [pc, #80]	@ (8000330 <main+0x74>)
 80002e0:	f003 fb9e 	bl	8003a20 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_blink = 0, last_tick = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	607b      	str	r3, [r7, #4]
 80002e8:	2300      	movs	r3, #0
 80002ea:	60fb      	str	r3, [r7, #12]
 80002ec:	2300      	movs	r3, #0
 80002ee:	60bb      	str	r3, [r7, #8]

  while (1)
  {

	  now = HAL_GetTick();
 80002f0:	f000 fc5c 	bl	8000bac <HAL_GetTick>
 80002f4:	6078      	str	r0, [r7, #4]

	  if ( now - last_blink >= 500) {
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	1ad3      	subs	r3, r2, r3
 80002fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000300:	d309      	bcc.n	8000316 <main+0x5a>

		  printf("Toggle GPIO\n");
 8000302:	480c      	ldr	r0, [pc, #48]	@ (8000334 <main+0x78>)
 8000304:	f003 fb8c 	bl	8003a20 <puts>

		  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_11);
 8000308:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800030c:	480a      	ldr	r0, [pc, #40]	@ (8000338 <main+0x7c>)
 800030e:	f000 fed1 	bl	80010b4 <HAL_GPIO_TogglePin>

		  last_blink = now;
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	60fb      	str	r3, [r7, #12]
	  }

	 if (now - last_tick >= 1000) {
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	1ad3      	subs	r3, r2, r3
 800031c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000320:	d3e6      	bcc.n	80002f0 <main+0x34>
		 printf("Tick %lu\n", now );
 8000322:	6879      	ldr	r1, [r7, #4]
 8000324:	4805      	ldr	r0, [pc, #20]	@ (800033c <main+0x80>)
 8000326:	f003 fb13 	bl	8003950 <iprintf>

		 last_tick = now;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	60bb      	str	r3, [r7, #8]
	  now = HAL_GetTick();
 800032e:	e7df      	b.n	80002f0 <main+0x34>
 8000330:	080046fc 	.word	0x080046fc
 8000334:	0800470c 	.word	0x0800470c
 8000338:	48001000 	.word	0x48001000
 800033c:	08004718 	.word	0x08004718

08000340 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b09e      	sub	sp, #120	@ 0x78
 8000344:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000346:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800034a:	2228      	movs	r2, #40	@ 0x28
 800034c:	2100      	movs	r1, #0
 800034e:	4618      	mov	r0, r3
 8000350:	f003 fc46 	bl	8003be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000354:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
 8000362:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000364:	463b      	mov	r3, r7
 8000366:	223c      	movs	r2, #60	@ 0x3c
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f003 fc38 	bl	8003be0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000370:	2303      	movs	r3, #3
 8000372:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000374:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000378:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800037a:	2300      	movs	r3, #0
 800037c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037e:	2301      	movs	r3, #1
 8000380:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000382:	2310      	movs	r3, #16
 8000384:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000386:	2302      	movs	r3, #2
 8000388:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800038a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800038e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000390:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000394:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000396:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800039a:	4618      	mov	r0, r3
 800039c:	f001 f89e 	bl	80014dc <HAL_RCC_OscConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003a6:	f000 f97d 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003aa:	230f      	movs	r3, #15
 80003ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003ae:	2302      	movs	r3, #2
 80003b0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003bc:	2300      	movs	r3, #0
 80003be:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003c4:	2101      	movs	r1, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f002 f896 	bl	80024f8 <HAL_RCC_ClockConfig>
 80003cc:	4603      	mov	r3, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d001      	beq.n	80003d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003d2:	f000 f967 	bl	80006a4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <SystemClock_Config+0xc4>)
 80003d8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003da:	2300      	movs	r3, #0
 80003dc:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003de:	2300      	movs	r3, #0
 80003e0:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003e2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80003e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e8:	463b      	mov	r3, r7
 80003ea:	4618      	mov	r0, r3
 80003ec:	f002 fa96 	bl	800291c <HAL_RCCEx_PeriphCLKConfig>
 80003f0:	4603      	mov	r3, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d001      	beq.n	80003fa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003f6:	f000 f955 	bl	80006a4 <Error_Handler>
  }
}
 80003fa:	bf00      	nop
 80003fc:	3778      	adds	r7, #120	@ 0x78
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	00020021 	.word	0x00020021

08000408 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800040c:	4b1b      	ldr	r3, [pc, #108]	@ (800047c <MX_I2C1_Init+0x74>)
 800040e:	4a1c      	ldr	r2, [pc, #112]	@ (8000480 <MX_I2C1_Init+0x78>)
 8000410:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 8000412:	4b1a      	ldr	r3, [pc, #104]	@ (800047c <MX_I2C1_Init+0x74>)
 8000414:	4a1b      	ldr	r2, [pc, #108]	@ (8000484 <MX_I2C1_Init+0x7c>)
 8000416:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000418:	4b18      	ldr	r3, [pc, #96]	@ (800047c <MX_I2C1_Init+0x74>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800041e:	4b17      	ldr	r3, [pc, #92]	@ (800047c <MX_I2C1_Init+0x74>)
 8000420:	2201      	movs	r2, #1
 8000422:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000424:	4b15      	ldr	r3, [pc, #84]	@ (800047c <MX_I2C1_Init+0x74>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800042a:	4b14      	ldr	r3, [pc, #80]	@ (800047c <MX_I2C1_Init+0x74>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000430:	4b12      	ldr	r3, [pc, #72]	@ (800047c <MX_I2C1_Init+0x74>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000436:	4b11      	ldr	r3, [pc, #68]	@ (800047c <MX_I2C1_Init+0x74>)
 8000438:	2200      	movs	r2, #0
 800043a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800043c:	4b0f      	ldr	r3, [pc, #60]	@ (800047c <MX_I2C1_Init+0x74>)
 800043e:	2200      	movs	r2, #0
 8000440:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000442:	480e      	ldr	r0, [pc, #56]	@ (800047c <MX_I2C1_Init+0x74>)
 8000444:	f000 fe50 	bl	80010e8 <HAL_I2C_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800044e:	f000 f929 	bl	80006a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000452:	2100      	movs	r1, #0
 8000454:	4809      	ldr	r0, [pc, #36]	@ (800047c <MX_I2C1_Init+0x74>)
 8000456:	f000 fee2 	bl	800121e <HAL_I2CEx_ConfigAnalogFilter>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000460:	f000 f920 	bl	80006a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000464:	2100      	movs	r1, #0
 8000466:	4805      	ldr	r0, [pc, #20]	@ (800047c <MX_I2C1_Init+0x74>)
 8000468:	f000 ff24 	bl	80012b4 <HAL_I2CEx_ConfigDigitalFilter>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000472:	f000 f917 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000084 	.word	0x20000084
 8000480:	40005400 	.word	0x40005400
 8000484:	00201d2b 	.word	0x00201d2b

08000488 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800048c:	4b1b      	ldr	r3, [pc, #108]	@ (80004fc <MX_SPI1_Init+0x74>)
 800048e:	4a1c      	ldr	r2, [pc, #112]	@ (8000500 <MX_SPI1_Init+0x78>)
 8000490:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000492:	4b1a      	ldr	r3, [pc, #104]	@ (80004fc <MX_SPI1_Init+0x74>)
 8000494:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000498:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800049a:	4b18      	ldr	r3, [pc, #96]	@ (80004fc <MX_SPI1_Init+0x74>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80004a0:	4b16      	ldr	r3, [pc, #88]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004a2:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80004a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004a8:	4b14      	ldr	r3, [pc, #80]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004ae:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004b4:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80004ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80004bc:	4b0f      	ldr	r3, [pc, #60]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004be:	2208      	movs	r2, #8
 80004c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004c2:	4b0e      	ldr	r3, [pc, #56]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004c8:	4b0c      	ldr	r3, [pc, #48]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004ce:	4b0b      	ldr	r3, [pc, #44]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004d4:	4b09      	ldr	r3, [pc, #36]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004d6:	2207      	movs	r2, #7
 80004d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004da:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004dc:	2200      	movs	r2, #0
 80004de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004e0:	4b06      	ldr	r3, [pc, #24]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004e6:	4805      	ldr	r0, [pc, #20]	@ (80004fc <MX_SPI1_Init+0x74>)
 80004e8:	f002 fbc6 	bl	8002c78 <HAL_SPI_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004f2:	f000 f8d7 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004f6:	bf00      	nop
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	200000d8 	.word	0x200000d8
 8000500:	40013000 	.word	0x40013000

08000504 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000508:	4b14      	ldr	r3, [pc, #80]	@ (800055c <MX_USART1_UART_Init+0x58>)
 800050a:	4a15      	ldr	r2, [pc, #84]	@ (8000560 <MX_USART1_UART_Init+0x5c>)
 800050c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 800050e:	4b13      	ldr	r3, [pc, #76]	@ (800055c <MX_USART1_UART_Init+0x58>)
 8000510:	f44f 2261 	mov.w	r2, #921600	@ 0xe1000
 8000514:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000516:	4b11      	ldr	r3, [pc, #68]	@ (800055c <MX_USART1_UART_Init+0x58>)
 8000518:	2200      	movs	r2, #0
 800051a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <MX_USART1_UART_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000522:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <MX_USART1_UART_Init+0x58>)
 8000524:	2200      	movs	r2, #0
 8000526:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000528:	4b0c      	ldr	r3, [pc, #48]	@ (800055c <MX_USART1_UART_Init+0x58>)
 800052a:	220c      	movs	r2, #12
 800052c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800052e:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <MX_USART1_UART_Init+0x58>)
 8000530:	2200      	movs	r2, #0
 8000532:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000534:	4b09      	ldr	r3, [pc, #36]	@ (800055c <MX_USART1_UART_Init+0x58>)
 8000536:	2200      	movs	r2, #0
 8000538:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053a:	4b08      	ldr	r3, [pc, #32]	@ (800055c <MX_USART1_UART_Init+0x58>)
 800053c:	2200      	movs	r2, #0
 800053e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000540:	4b06      	ldr	r3, [pc, #24]	@ (800055c <MX_USART1_UART_Init+0x58>)
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000546:	4805      	ldr	r0, [pc, #20]	@ (800055c <MX_USART1_UART_Init+0x58>)
 8000548:	f002 fc41 	bl	8002dce <HAL_UART_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000552:	f000 f8a7 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	2000013c 	.word	0x2000013c
 8000560:	40013800 	.word	0x40013800

08000564 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000568:	4b0d      	ldr	r3, [pc, #52]	@ (80005a0 <MX_USB_PCD_Init+0x3c>)
 800056a:	4a0e      	ldr	r2, [pc, #56]	@ (80005a4 <MX_USB_PCD_Init+0x40>)
 800056c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800056e:	4b0c      	ldr	r3, [pc, #48]	@ (80005a0 <MX_USB_PCD_Init+0x3c>)
 8000570:	2208      	movs	r2, #8
 8000572:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000574:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <MX_USB_PCD_Init+0x3c>)
 8000576:	2202      	movs	r2, #2
 8000578:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800057a:	4b09      	ldr	r3, [pc, #36]	@ (80005a0 <MX_USB_PCD_Init+0x3c>)
 800057c:	2202      	movs	r2, #2
 800057e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000580:	4b07      	ldr	r3, [pc, #28]	@ (80005a0 <MX_USB_PCD_Init+0x3c>)
 8000582:	2200      	movs	r2, #0
 8000584:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000586:	4b06      	ldr	r3, [pc, #24]	@ (80005a0 <MX_USB_PCD_Init+0x3c>)
 8000588:	2200      	movs	r2, #0
 800058a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800058c:	4804      	ldr	r0, [pc, #16]	@ (80005a0 <MX_USB_PCD_Init+0x3c>)
 800058e:	f000 fedd 	bl	800134c <HAL_PCD_Init>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 8000598:	f000 f884 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	200001c4 	.word	0x200001c4
 80005a4:	40005c00 	.word	0x40005c00

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005be:	4b37      	ldr	r3, [pc, #220]	@ (800069c <MX_GPIO_Init+0xf4>)
 80005c0:	695b      	ldr	r3, [r3, #20]
 80005c2:	4a36      	ldr	r2, [pc, #216]	@ (800069c <MX_GPIO_Init+0xf4>)
 80005c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005c8:	6153      	str	r3, [r2, #20]
 80005ca:	4b34      	ldr	r3, [pc, #208]	@ (800069c <MX_GPIO_Init+0xf4>)
 80005cc:	695b      	ldr	r3, [r3, #20]
 80005ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d6:	4b31      	ldr	r3, [pc, #196]	@ (800069c <MX_GPIO_Init+0xf4>)
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	4a30      	ldr	r2, [pc, #192]	@ (800069c <MX_GPIO_Init+0xf4>)
 80005dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005e0:	6153      	str	r3, [r2, #20]
 80005e2:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <MX_GPIO_Init+0xf4>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <MX_GPIO_Init+0xf4>)
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	4a2a      	ldr	r2, [pc, #168]	@ (800069c <MX_GPIO_Init+0xf4>)
 80005f4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005f8:	6153      	str	r3, [r2, #20]
 80005fa:	4b28      	ldr	r3, [pc, #160]	@ (800069c <MX_GPIO_Init+0xf4>)
 80005fc:	695b      	ldr	r3, [r3, #20]
 80005fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000602:	60bb      	str	r3, [r7, #8]
 8000604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000606:	4b25      	ldr	r3, [pc, #148]	@ (800069c <MX_GPIO_Init+0xf4>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a24      	ldr	r2, [pc, #144]	@ (800069c <MX_GPIO_Init+0xf4>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000610:	6153      	str	r3, [r2, #20]
 8000612:	4b22      	ldr	r3, [pc, #136]	@ (800069c <MX_GPIO_Init+0xf4>)
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_GPIO_Init+0xf4>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a1e      	ldr	r2, [pc, #120]	@ (800069c <MX_GPIO_Init+0xf4>)
 8000624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_GPIO_Init+0xf4>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000636:	2200      	movs	r2, #0
 8000638:	f64f 7108 	movw	r1, #65288	@ 0xff08
 800063c:	4818      	ldr	r0, [pc, #96]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 800063e:	f000 fd21 	bl	8001084 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000642:	2337      	movs	r3, #55	@ 0x37
 8000644:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000646:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800064a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	4619      	mov	r1, r3
 8000656:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 8000658:	f000 fb9a 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800065c:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000660:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000662:	2301      	movs	r3, #1
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066a:	2300      	movs	r3, #0
 800066c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	480a      	ldr	r0, [pc, #40]	@ (80006a0 <MX_GPIO_Init+0xf8>)
 8000676:	f000 fb8b 	bl	8000d90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067a:	2301      	movs	r3, #1
 800067c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800067e:	2300      	movs	r3, #0
 8000680:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000690:	f000 fb7e 	bl	8000d90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	@ 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40021000 	.word	0x40021000
 80006a0:	48001000 	.word	0x48001000

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <Error_Handler+0x8>

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b082      	sub	sp, #8
 80006b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <HAL_MspInit+0x44>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	4a0e      	ldr	r2, [pc, #56]	@ (80006f4 <HAL_MspInit+0x44>)
 80006bc:	f043 0301 	orr.w	r3, r3, #1
 80006c0:	6193      	str	r3, [r2, #24]
 80006c2:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <HAL_MspInit+0x44>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 0301 	and.w	r3, r3, #1
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ce:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <HAL_MspInit+0x44>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a08      	ldr	r2, [pc, #32]	@ (80006f4 <HAL_MspInit+0x44>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	61d3      	str	r3, [r2, #28]
 80006da:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <HAL_MspInit+0x44>)
 80006dc:	69db      	ldr	r3, [r3, #28]
 80006de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006e6:	2007      	movs	r0, #7
 80006e8:	f000 fb1e 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40021000 	.word	0x40021000

080006f8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	@ 0x28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	f107 0314 	add.w	r3, r7, #20
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a17      	ldr	r2, [pc, #92]	@ (8000774 <HAL_I2C_MspInit+0x7c>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d127      	bne.n	800076a <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <HAL_I2C_MspInit+0x80>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a16      	ldr	r2, [pc, #88]	@ (8000778 <HAL_I2C_MspInit+0x80>)
 8000720:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b14      	ldr	r3, [pc, #80]	@ (8000778 <HAL_I2C_MspInit+0x80>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800072e:	613b      	str	r3, [r7, #16]
 8000730:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000732:	23c0      	movs	r3, #192	@ 0xc0
 8000734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000736:	2312      	movs	r3, #18
 8000738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800073a:	2301      	movs	r3, #1
 800073c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073e:	2303      	movs	r3, #3
 8000740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000742:	2304      	movs	r3, #4
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	480b      	ldr	r0, [pc, #44]	@ (800077c <HAL_I2C_MspInit+0x84>)
 800074e:	f000 fb1f 	bl	8000d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <HAL_I2C_MspInit+0x80>)
 8000754:	69db      	ldr	r3, [r3, #28]
 8000756:	4a08      	ldr	r2, [pc, #32]	@ (8000778 <HAL_I2C_MspInit+0x80>)
 8000758:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800075c:	61d3      	str	r3, [r2, #28]
 800075e:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <HAL_I2C_MspInit+0x80>)
 8000760:	69db      	ldr	r3, [r3, #28]
 8000762:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800076a:	bf00      	nop
 800076c:	3728      	adds	r7, #40	@ 0x28
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40005400 	.word	0x40005400
 8000778:	40021000 	.word	0x40021000
 800077c:	48000400 	.word	0x48000400

08000780 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0314 	add.w	r3, r7, #20
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a17      	ldr	r2, [pc, #92]	@ (80007fc <HAL_SPI_MspInit+0x7c>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d128      	bne.n	80007f4 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007a2:	4b17      	ldr	r3, [pc, #92]	@ (8000800 <HAL_SPI_MspInit+0x80>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	4a16      	ldr	r2, [pc, #88]	@ (8000800 <HAL_SPI_MspInit+0x80>)
 80007a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007ac:	6193      	str	r3, [r2, #24]
 80007ae:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <HAL_SPI_MspInit+0x80>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <HAL_SPI_MspInit+0x80>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	4a10      	ldr	r2, [pc, #64]	@ (8000800 <HAL_SPI_MspInit+0x80>)
 80007c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007c4:	6153      	str	r3, [r2, #20]
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <HAL_SPI_MspInit+0x80>)
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007d2:	23e0      	movs	r3, #224	@ 0xe0
 80007d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d6:	2302      	movs	r3, #2
 80007d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007de:	2303      	movs	r3, #3
 80007e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007e2:	2305      	movs	r3, #5
 80007e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007f0:	f000 face 	bl	8000d90 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007f4:	bf00      	nop
 80007f6:	3728      	adds	r7, #40	@ 0x28
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40013000 	.word	0x40013000
 8000800:	40021000 	.word	0x40021000

08000804 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b08a      	sub	sp, #40	@ 0x28
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a17      	ldr	r2, [pc, #92]	@ (8000880 <HAL_UART_MspInit+0x7c>)
 8000822:	4293      	cmp	r3, r2
 8000824:	d127      	bne.n	8000876 <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000826:	4b17      	ldr	r3, [pc, #92]	@ (8000884 <HAL_UART_MspInit+0x80>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a16      	ldr	r2, [pc, #88]	@ (8000884 <HAL_UART_MspInit+0x80>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	4b14      	ldr	r3, [pc, #80]	@ (8000884 <HAL_UART_MspInit+0x80>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800083e:	4b11      	ldr	r3, [pc, #68]	@ (8000884 <HAL_UART_MspInit+0x80>)
 8000840:	695b      	ldr	r3, [r3, #20]
 8000842:	4a10      	ldr	r2, [pc, #64]	@ (8000884 <HAL_UART_MspInit+0x80>)
 8000844:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000848:	6153      	str	r3, [r2, #20]
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <HAL_UART_MspInit+0x80>)
 800084c:	695b      	ldr	r3, [r3, #20]
 800084e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000856:	2330      	movs	r3, #48	@ 0x30
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085a:	2302      	movs	r3, #2
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000862:	2303      	movs	r3, #3
 8000864:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000866:	2307      	movs	r3, #7
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	@ (8000888 <HAL_UART_MspInit+0x84>)
 8000872:	f000 fa8d 	bl	8000d90 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	@ 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40013800 	.word	0x40013800
 8000884:	40021000 	.word	0x40021000
 8000888:	48000800 	.word	0x48000800

0800088c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	@ 0x28
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	605a      	str	r2, [r3, #4]
 800089e:	609a      	str	r2, [r3, #8]
 80008a0:	60da      	str	r2, [r3, #12]
 80008a2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a18      	ldr	r2, [pc, #96]	@ (800090c <HAL_PCD_MspInit+0x80>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d129      	bne.n	8000902 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ae:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <HAL_PCD_MspInit+0x84>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	4a17      	ldr	r2, [pc, #92]	@ (8000910 <HAL_PCD_MspInit+0x84>)
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b8:	6153      	str	r3, [r2, #20]
 80008ba:	4b15      	ldr	r3, [pc, #84]	@ (8000910 <HAL_PCD_MspInit+0x84>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80008c6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80008ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80008d8:	230e      	movs	r3, #14
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008e6:	f000 fa53 	bl	8000d90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008ea:	4b09      	ldr	r3, [pc, #36]	@ (8000910 <HAL_PCD_MspInit+0x84>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	4a08      	ldr	r2, [pc, #32]	@ (8000910 <HAL_PCD_MspInit+0x84>)
 80008f0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008f4:	61d3      	str	r3, [r2, #28]
 80008f6:	4b06      	ldr	r3, [pc, #24]	@ (8000910 <HAL_PCD_MspInit+0x84>)
 80008f8:	69db      	ldr	r3, [r3, #28]
 80008fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	@ 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40005c00 	.word	0x40005c00
 8000910:	40021000 	.word	0x40021000

08000914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <NMI_Handler+0x4>

0800091c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000920:	bf00      	nop
 8000922:	e7fd      	b.n	8000920 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <MemManage_Handler+0x4>

0800092c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000930:	bf00      	nop
 8000932:	e7fd      	b.n	8000930 <BusFault_Handler+0x4>

08000934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000938:	bf00      	nop
 800093a:	e7fd      	b.n	8000938 <UsageFault_Handler+0x4>

0800093c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000966:	b580      	push	{r7, lr}
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800096a:	f000 f90b 	bl	8000b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}

08000972 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000972:	b580      	push	{r7, lr}
 8000974:	b086      	sub	sp, #24
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e00a      	b.n	800099a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000984:	f3af 8000 	nop.w
 8000988:	4601      	mov	r1, r0
 800098a:	68bb      	ldr	r3, [r7, #8]
 800098c:	1c5a      	adds	r2, r3, #1
 800098e:	60ba      	str	r2, [r7, #8]
 8000990:	b2ca      	uxtb	r2, r1
 8000992:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	3301      	adds	r3, #1
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	429a      	cmp	r2, r3
 80009a0:	dbf0      	blt.n	8000984 <_read+0x12>
  }

  return len;
 80009a2:	687b      	ldr	r3, [r7, #4]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_close>:
  }
  return len;
}

int _close(int file)
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009d4:	605a      	str	r2, [r3, #4]
  return 0;
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <_isatty>:

int _isatty(int file)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009ec:	2301      	movs	r3, #1
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009fa:	b480      	push	{r7}
 80009fc:	b085      	sub	sp, #20
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	60f8      	str	r0, [r7, #12]
 8000a02:	60b9      	str	r1, [r7, #8]
 8000a04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a06:	2300      	movs	r3, #0
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3714      	adds	r7, #20
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr

08000a14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b086      	sub	sp, #24
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a1c:	4a14      	ldr	r2, [pc, #80]	@ (8000a70 <_sbrk+0x5c>)
 8000a1e:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <_sbrk+0x60>)
 8000a20:	1ad3      	subs	r3, r2, r3
 8000a22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d102      	bne.n	8000a36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a30:	4b11      	ldr	r3, [pc, #68]	@ (8000a78 <_sbrk+0x64>)
 8000a32:	4a12      	ldr	r2, [pc, #72]	@ (8000a7c <_sbrk+0x68>)
 8000a34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <_sbrk+0x64>)
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d207      	bcs.n	8000a54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a44:	f003 f91a 	bl	8003c7c <__errno>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a52:	e009      	b.n	8000a68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a54:	4b08      	ldr	r3, [pc, #32]	@ (8000a78 <_sbrk+0x64>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a5a:	4b07      	ldr	r3, [pc, #28]	@ (8000a78 <_sbrk+0x64>)
 8000a5c:	681a      	ldr	r2, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4413      	add	r3, r2
 8000a62:	4a05      	ldr	r2, [pc, #20]	@ (8000a78 <_sbrk+0x64>)
 8000a64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3718      	adds	r7, #24
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	2000a000 	.word	0x2000a000
 8000a74:	00000400 	.word	0x00000400
 8000a78:	20000498 	.word	0x20000498
 8000a7c:	200005f0 	.word	0x200005f0

08000a80 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	@ (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	@ (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000adc <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	@ (8000ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	@ (8000ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ae8 <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	@ (8000af0 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f003 f8d9 	bl	8003c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad6:	f7ff fbf1 	bl	80002bc <main>

08000ada <LoopForever>:

LoopForever:
    b LoopForever
 8000ada:	e7fe      	b.n	8000ada <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000adc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ae8:	080047a0 	.word	0x080047a0
  ldr r2, =_sbss
 8000aec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000af0:	200005ec 	.word	0x200005ec

08000af4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_2_IRQHandler>
	...

08000af8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	@ (8000b20 <HAL_Init+0x28>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <HAL_Init+0x28>)
 8000b02:	f043 0310 	orr.w	r3, r3, #16
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f90d 	bl	8000d28 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f7ff fdcc 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40022000 	.word	0x40022000

08000b24 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f917 	bl	8000d76 <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f000 f8ed 	bl	8000d3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	@ (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000000 	.word	0x20000000
 8000b7c:	20000008 	.word	0x20000008
 8000b80:	20000004 	.word	0x20000004

08000b84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	@ (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	2000049c 	.word	0x2000049c

08000bac <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bb0:	4b03      	ldr	r3, [pc, #12]	@ (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000049c 	.word	0x2000049c

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	@ (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	6039      	str	r1, [r7, #0]
 8000c32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	db0a      	blt.n	8000c52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	490c      	ldr	r1, [pc, #48]	@ (8000c74 <__NVIC_SetPriority+0x4c>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	0112      	lsls	r2, r2, #4
 8000c48:	b2d2      	uxtb	r2, r2
 8000c4a:	440b      	add	r3, r1
 8000c4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c50:	e00a      	b.n	8000c68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4908      	ldr	r1, [pc, #32]	@ (8000c78 <__NVIC_SetPriority+0x50>)
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	f003 030f 	and.w	r3, r3, #15
 8000c5e:	3b04      	subs	r3, #4
 8000c60:	0112      	lsls	r2, r2, #4
 8000c62:	b2d2      	uxtb	r2, r2
 8000c64:	440b      	add	r3, r1
 8000c66:	761a      	strb	r2, [r3, #24]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000e100 	.word	0xe000e100
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b089      	sub	sp, #36	@ 0x24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c90:	69fb      	ldr	r3, [r7, #28]
 8000c92:	f1c3 0307 	rsb	r3, r3, #7
 8000c96:	2b04      	cmp	r3, #4
 8000c98:	bf28      	it	cs
 8000c9a:	2304      	movcs	r3, #4
 8000c9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	3304      	adds	r3, #4
 8000ca2:	2b06      	cmp	r3, #6
 8000ca4:	d902      	bls.n	8000cac <NVIC_EncodePriority+0x30>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	3b03      	subs	r3, #3
 8000caa:	e000      	b.n	8000cae <NVIC_EncodePriority+0x32>
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb4:	69bb      	ldr	r3, [r7, #24]
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	43da      	mvns	r2, r3
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	43d9      	mvns	r1, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	4313      	orrs	r3, r2
         );
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3724      	adds	r7, #36	@ 0x24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cf4:	d301      	bcc.n	8000cfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e00f      	b.n	8000d1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000d24 <SysTick_Config+0x40>)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3b01      	subs	r3, #1
 8000d00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d02:	210f      	movs	r1, #15
 8000d04:	f04f 30ff 	mov.w	r0, #4294967295
 8000d08:	f7ff ff8e 	bl	8000c28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <SysTick_Config+0x40>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d12:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <SysTick_Config+0x40>)
 8000d14:	2207      	movs	r2, #7
 8000d16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d18:	2300      	movs	r3, #0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	e000e010 	.word	0xe000e010

08000d28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff ff47 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b086      	sub	sp, #24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	4603      	mov	r3, r0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d50:	f7ff ff5c 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	68b9      	ldr	r1, [r7, #8]
 8000d5a:	6978      	ldr	r0, [r7, #20]
 8000d5c:	f7ff ff8e 	bl	8000c7c <NVIC_EncodePriority>
 8000d60:	4602      	mov	r2, r0
 8000d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d66:	4611      	mov	r1, r2
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff ff5d 	bl	8000c28 <__NVIC_SetPriority>
}
 8000d6e:	bf00      	nop
 8000d70:	3718      	adds	r7, #24
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b082      	sub	sp, #8
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7e:	6878      	ldr	r0, [r7, #4]
 8000d80:	f7ff ffb0 	bl	8000ce4 <SysTick_Config>
 8000d84:	4603      	mov	r3, r0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
	...

08000d90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d9e:	e154      	b.n	800104a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dac:	4013      	ands	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 8146 	beq.w	8001044 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d005      	beq.n	8000dd0 <HAL_GPIO_Init+0x40>
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 0303 	and.w	r3, r3, #3
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d130      	bne.n	8000e32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	68da      	ldr	r2, [r3, #12]
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	693a      	ldr	r2, [r7, #16]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	693a      	ldr	r2, [r7, #16]
 8000dfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e06:	2201      	movs	r2, #1
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	091b      	lsrs	r3, r3, #4
 8000e1c:	f003 0201 	and.w	r2, r3, #1
 8000e20:	697b      	ldr	r3, [r7, #20]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	d017      	beq.n	8000e6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	2203      	movs	r2, #3
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43db      	mvns	r3, r3
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4013      	ands	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	689a      	ldr	r2, [r3, #8]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f003 0303 	and.w	r3, r3, #3
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d123      	bne.n	8000ec2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	08da      	lsrs	r2, r3, #3
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3208      	adds	r2, #8
 8000e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	220f      	movs	r2, #15
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	691a      	ldr	r2, [r3, #16]
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	6939      	ldr	r1, [r7, #16]
 8000ebe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	2203      	movs	r2, #3
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	693a      	ldr	r2, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0203 	and.w	r2, r3, #3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	f000 80a0 	beq.w	8001044 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f04:	4b58      	ldr	r3, [pc, #352]	@ (8001068 <HAL_GPIO_Init+0x2d8>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	4a57      	ldr	r2, [pc, #348]	@ (8001068 <HAL_GPIO_Init+0x2d8>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	6193      	str	r3, [r2, #24]
 8000f10:	4b55      	ldr	r3, [pc, #340]	@ (8001068 <HAL_GPIO_Init+0x2d8>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	60bb      	str	r3, [r7, #8]
 8000f1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f1c:	4a53      	ldr	r2, [pc, #332]	@ (800106c <HAL_GPIO_Init+0x2dc>)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	089b      	lsrs	r3, r3, #2
 8000f22:	3302      	adds	r3, #2
 8000f24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	220f      	movs	r2, #15
 8000f34:	fa02 f303 	lsl.w	r3, r2, r3
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f46:	d019      	beq.n	8000f7c <HAL_GPIO_Init+0x1ec>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	4a49      	ldr	r2, [pc, #292]	@ (8001070 <HAL_GPIO_Init+0x2e0>)
 8000f4c:	4293      	cmp	r3, r2
 8000f4e:	d013      	beq.n	8000f78 <HAL_GPIO_Init+0x1e8>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a48      	ldr	r2, [pc, #288]	@ (8001074 <HAL_GPIO_Init+0x2e4>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d00d      	beq.n	8000f74 <HAL_GPIO_Init+0x1e4>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	4a47      	ldr	r2, [pc, #284]	@ (8001078 <HAL_GPIO_Init+0x2e8>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d007      	beq.n	8000f70 <HAL_GPIO_Init+0x1e0>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4a46      	ldr	r2, [pc, #280]	@ (800107c <HAL_GPIO_Init+0x2ec>)
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d101      	bne.n	8000f6c <HAL_GPIO_Init+0x1dc>
 8000f68:	2304      	movs	r3, #4
 8000f6a:	e008      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f6c:	2305      	movs	r3, #5
 8000f6e:	e006      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f70:	2303      	movs	r3, #3
 8000f72:	e004      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f74:	2302      	movs	r3, #2
 8000f76:	e002      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <HAL_GPIO_Init+0x1ee>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	f002 0203 	and.w	r2, r2, #3
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	4093      	lsls	r3, r2
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f8e:	4937      	ldr	r1, [pc, #220]	@ (800106c <HAL_GPIO_Init+0x2dc>)
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	089b      	lsrs	r3, r3, #2
 8000f94:	3302      	adds	r3, #2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f9c:	4b38      	ldr	r3, [pc, #224]	@ (8001080 <HAL_GPIO_Init+0x2f0>)
 8000f9e:	689b      	ldr	r3, [r3, #8]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fc0:	4a2f      	ldr	r2, [pc, #188]	@ (8001080 <HAL_GPIO_Init+0x2f0>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8001080 <HAL_GPIO_Init+0x2f0>)
 8000fc8:	68db      	ldr	r3, [r3, #12]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fea:	4a25      	ldr	r2, [pc, #148]	@ (8001080 <HAL_GPIO_Init+0x2f0>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ff0:	4b23      	ldr	r3, [pc, #140]	@ (8001080 <HAL_GPIO_Init+0x2f0>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001014:	4a1a      	ldr	r2, [pc, #104]	@ (8001080 <HAL_GPIO_Init+0x2f0>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HAL_GPIO_Init+0x2f0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	43db      	mvns	r3, r3
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	4013      	ands	r3, r2
 8001028:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001032:	2b00      	cmp	r3, #0
 8001034:	d003      	beq.n	800103e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	4313      	orrs	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800103e:	4a10      	ldr	r2, [pc, #64]	@ (8001080 <HAL_GPIO_Init+0x2f0>)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	3301      	adds	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	fa22 f303 	lsr.w	r3, r2, r3
 8001054:	2b00      	cmp	r3, #0
 8001056:	f47f aea3 	bne.w	8000da0 <HAL_GPIO_Init+0x10>
  }
}
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	371c      	adds	r7, #28
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	40021000 	.word	0x40021000
 800106c:	40010000 	.word	0x40010000
 8001070:	48000400 	.word	0x48000400
 8001074:	48000800 	.word	0x48000800
 8001078:	48000c00 	.word	0x48000c00
 800107c:	48001000 	.word	0x48001000
 8001080:	40010400 	.word	0x40010400

08001084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
 8001090:	4613      	mov	r3, r2
 8001092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001094:	787b      	ldrb	r3, [r7, #1]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010a2:	887a      	ldrh	r2, [r7, #2]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	695b      	ldr	r3, [r3, #20]
 80010c4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c6:	887a      	ldrh	r2, [r7, #2]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4013      	ands	r3, r2
 80010cc:	041a      	lsls	r2, r3, #16
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	43d9      	mvns	r1, r3
 80010d2:	887b      	ldrh	r3, [r7, #2]
 80010d4:	400b      	ands	r3, r1
 80010d6:	431a      	orrs	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
}
 80010dc:	bf00      	nop
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d101      	bne.n	80010fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e08d      	b.n	8001216 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2200      	movs	r2, #0
 800110a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff faf2 	bl	80006f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2224      	movs	r2, #36	@ 0x24
 8001118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0201 	bic.w	r2, r2, #1
 800112a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001138:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	689a      	ldr	r2, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001148:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b01      	cmp	r3, #1
 8001150:	d107      	bne.n	8001162 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	689a      	ldr	r2, [r3, #8]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	e006      	b.n	8001170 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	689a      	ldr	r2, [r3, #8]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800116e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d108      	bne.n	800118a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001186:	605a      	str	r2, [r3, #4]
 8001188:	e007      	b.n	800119a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001198:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80011ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80011bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	691a      	ldr	r2, [r3, #16]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	695b      	ldr	r3, [r3, #20]
 80011c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	430a      	orrs	r2, r1
 80011d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69d9      	ldr	r1, [r3, #28]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1a      	ldr	r2, [r3, #32]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	430a      	orrs	r2, r1
 80011e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f042 0201 	orr.w	r2, r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2220      	movs	r2, #32
 8001202:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800121e:	b480      	push	{r7}
 8001220:	b083      	sub	sp, #12
 8001222:	af00      	add	r7, sp, #0
 8001224:	6078      	str	r0, [r7, #4]
 8001226:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800122e:	b2db      	uxtb	r3, r3
 8001230:	2b20      	cmp	r3, #32
 8001232:	d138      	bne.n	80012a6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800123e:	2302      	movs	r3, #2
 8001240:	e032      	b.n	80012a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2224      	movs	r2, #36	@ 0x24
 800124e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001270:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6819      	ldr	r1, [r3, #0]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	430a      	orrs	r2, r1
 8001280:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f042 0201 	orr.w	r2, r2, #1
 8001290:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2220      	movs	r2, #32
 8001296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80012a6:	2302      	movs	r3, #2
  }
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b20      	cmp	r3, #32
 80012c8:	d139      	bne.n	800133e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d101      	bne.n	80012d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80012d4:	2302      	movs	r3, #2
 80012d6:	e033      	b.n	8001340 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2201      	movs	r2, #1
 80012dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2224      	movs	r2, #36	@ 0x24
 80012e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 0201 	bic.w	r2, r2, #1
 80012f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001306:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4313      	orrs	r3, r2
 8001310:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	68fa      	ldr	r2, [r7, #12]
 8001318:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f042 0201 	orr.w	r2, r2, #1
 8001328:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2220      	movs	r2, #32
 800132e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800133e:	2302      	movs	r3, #2
  }
}
 8001340:	4618      	mov	r0, r3
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e0b9      	b.n	80014d2 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d106      	bne.n	8001378 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fa8a 	bl	800088c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2203      	movs	r2, #3
 800137c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f002 f9e8 	bl	800375a <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138a:	2300      	movs	r3, #0
 800138c:	73fb      	strb	r3, [r7, #15]
 800138e:	e03e      	b.n	800140e <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	00db      	lsls	r3, r3, #3
 800139c:	440b      	add	r3, r1
 800139e:	3311      	adds	r3, #17
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	4413      	add	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	440b      	add	r3, r1
 80013b2:	3310      	adds	r3, #16
 80013b4:	7bfa      	ldrb	r2, [r7, #15]
 80013b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	4413      	add	r3, r2
 80013c2:	00db      	lsls	r3, r3, #3
 80013c4:	440b      	add	r3, r1
 80013c6:	3313      	adds	r3, #19
 80013c8:	2200      	movs	r2, #0
 80013ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	4613      	mov	r3, r2
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	440b      	add	r3, r1
 80013da:	3320      	adds	r3, #32
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013e0:	7bfa      	ldrb	r2, [r7, #15]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	4613      	mov	r3, r2
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	440b      	add	r3, r1
 80013ee:	3324      	adds	r3, #36	@ 0x24
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013f4:	7bfb      	ldrb	r3, [r7, #15]
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	1c5a      	adds	r2, r3, #1
 80013fa:	4613      	mov	r3, r2
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	440b      	add	r3, r1
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001408:	7bfb      	ldrb	r3, [r7, #15]
 800140a:	3301      	adds	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	791b      	ldrb	r3, [r3, #4]
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	429a      	cmp	r2, r3
 8001416:	d3bb      	bcc.n	8001390 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001418:	2300      	movs	r3, #0
 800141a:	73fb      	strb	r3, [r7, #15]
 800141c:	e044      	b.n	80014a8 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800141e:	7bfa      	ldrb	r2, [r7, #15]
 8001420:	6879      	ldr	r1, [r7, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	440b      	add	r3, r1
 800142c:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001434:	7bfa      	ldrb	r2, [r7, #15]
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	00db      	lsls	r3, r3, #3
 8001440:	440b      	add	r3, r1
 8001442:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	f203 1353 	addw	r3, r3, #339	@ 0x153
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	440b      	add	r3, r1
 800149a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	3301      	adds	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	791b      	ldrb	r3, [r3, #4]
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d3b5      	bcc.n	800141e <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3304      	adds	r3, #4
 80014ba:	e893 0006 	ldmia.w	r3, {r1, r2}
 80014be:	f002 f967 	bl	8003790 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014ec:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f000 bff4 	b.w	80024ea <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001506:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 816d 	beq.w	80017f2 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001518:	4bb4      	ldr	r3, [pc, #720]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f003 030c 	and.w	r3, r3, #12
 8001520:	2b04      	cmp	r3, #4
 8001522:	d00c      	beq.n	800153e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001524:	4bb1      	ldr	r3, [pc, #708]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 030c 	and.w	r3, r3, #12
 800152c:	2b08      	cmp	r3, #8
 800152e:	d157      	bne.n	80015e0 <HAL_RCC_OscConfig+0x104>
 8001530:	4bae      	ldr	r3, [pc, #696]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800153c:	d150      	bne.n	80015e0 <HAL_RCC_OscConfig+0x104>
 800153e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001542:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001552:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001556:	fab3 f383 	clz	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b3f      	cmp	r3, #63	@ 0x3f
 800155e:	d802      	bhi.n	8001566 <HAL_RCC_OscConfig+0x8a>
 8001560:	4ba2      	ldr	r3, [pc, #648]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	e015      	b.n	8001592 <HAL_RCC_OscConfig+0xb6>
 8001566:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800156a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800156e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001572:	fa93 f3a3 	rbit	r3, r3
 8001576:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800157a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800157e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001582:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800158e:	4b97      	ldr	r3, [pc, #604]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001596:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800159a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800159e:	fa92 f2a2 	rbit	r2, r2
 80015a2:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80015a6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80015aa:	fab2 f282 	clz	r2, r2
 80015ae:	b2d2      	uxtb	r2, r2
 80015b0:	f042 0220 	orr.w	r2, r2, #32
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	f002 021f 	and.w	r2, r2, #31
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	4013      	ands	r3, r2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f000 8114 	beq.w	80017f0 <HAL_RCC_OscConfig+0x314>
 80015c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015cc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f040 810b 	bne.w	80017f0 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	f000 bf85 	b.w	80024ea <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f0:	d106      	bne.n	8001600 <HAL_RCC_OscConfig+0x124>
 80015f2:	4b7e      	ldr	r3, [pc, #504]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a7d      	ldr	r2, [pc, #500]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e036      	b.n	800166e <HAL_RCC_OscConfig+0x192>
 8001600:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001604:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10c      	bne.n	800162a <HAL_RCC_OscConfig+0x14e>
 8001610:	4b76      	ldr	r3, [pc, #472]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a75      	ldr	r2, [pc, #468]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b73      	ldr	r3, [pc, #460]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a72      	ldr	r2, [pc, #456]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	e021      	b.n	800166e <HAL_RCC_OscConfig+0x192>
 800162a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800162e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800163a:	d10c      	bne.n	8001656 <HAL_RCC_OscConfig+0x17a>
 800163c:	4b6b      	ldr	r3, [pc, #428]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a6a      	ldr	r2, [pc, #424]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001642:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	4b68      	ldr	r3, [pc, #416]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a67      	ldr	r2, [pc, #412]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 800164e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	e00b      	b.n	800166e <HAL_RCC_OscConfig+0x192>
 8001656:	4b65      	ldr	r3, [pc, #404]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a64      	ldr	r2, [pc, #400]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 800165c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b62      	ldr	r3, [pc, #392]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a61      	ldr	r2, [pc, #388]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001668:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800166c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800166e:	4b5f      	ldr	r3, [pc, #380]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001670:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001672:	f023 020f 	bic.w	r2, r3, #15
 8001676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800167a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	495a      	ldr	r1, [pc, #360]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001684:	4313      	orrs	r3, r2
 8001686:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001688:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800168c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d054      	beq.n	8001742 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001698:	f7ff fa88 	bl	8000bac <HAL_GetTick>
 800169c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016a2:	f7ff fa83 	bl	8000bac <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016ac:	1ad3      	subs	r3, r2, r3
 80016ae:	2b64      	cmp	r3, #100	@ 0x64
 80016b0:	d902      	bls.n	80016b8 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	f000 bf19 	b.w	80024ea <HAL_RCC_OscConfig+0x100e>
 80016b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016bc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016c4:	fa93 f3a3 	rbit	r3, r3
 80016c8:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80016cc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80016d8:	d802      	bhi.n	80016e0 <HAL_RCC_OscConfig+0x204>
 80016da:	4b44      	ldr	r3, [pc, #272]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	e015      	b.n	800170c <HAL_RCC_OscConfig+0x230>
 80016e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016e4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80016ec:	fa93 f3a3 	rbit	r3, r3
 80016f0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80016f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016f8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80016fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001708:	4b38      	ldr	r3, [pc, #224]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 800170a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800170c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001710:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001714:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001718:	fa92 f2a2 	rbit	r2, r2
 800171c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001720:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001724:	fab2 f282 	clz	r2, r2
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	f042 0220 	orr.w	r2, r2, #32
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	f002 021f 	and.w	r2, r2, #31
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d0b0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x1c6>
 8001740:	e057      	b.n	80017f2 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001742:	f7ff fa33 	bl	8000bac <HAL_GetTick>
 8001746:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fa2e 	bl	8000bac <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b64      	cmp	r3, #100	@ 0x64
 800175a:	d902      	bls.n	8001762 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	f000 bec4 	b.w	80024ea <HAL_RCC_OscConfig+0x100e>
 8001762:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001766:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001776:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	fab3 f383 	clz	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b3f      	cmp	r3, #63	@ 0x3f
 8001782:	d802      	bhi.n	800178a <HAL_RCC_OscConfig+0x2ae>
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	e015      	b.n	80017b6 <HAL_RCC_OscConfig+0x2da>
 800178a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800178e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001792:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001796:	fa93 f3a3 	rbit	r3, r3
 800179a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800179e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017a2:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80017a6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80017b2:	4b0e      	ldr	r3, [pc, #56]	@ (80017ec <HAL_RCC_OscConfig+0x310>)
 80017b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017ba:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80017be:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80017c2:	fa92 f2a2 	rbit	r2, r2
 80017c6:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80017ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80017ce:	fab2 f282 	clz	r2, r2
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	f042 0220 	orr.w	r2, r2, #32
 80017d8:	b2d2      	uxtb	r2, r2
 80017da:	f002 021f 	and.w	r2, r2, #31
 80017de:	2101      	movs	r1, #1
 80017e0:	fa01 f202 	lsl.w	r2, r1, r2
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1b0      	bne.n	800174c <HAL_RCC_OscConfig+0x270>
 80017ea:	e002      	b.n	80017f2 <HAL_RCC_OscConfig+0x316>
 80017ec:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80017f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 816c 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001808:	4bcc      	ldr	r3, [pc, #816]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b00      	cmp	r3, #0
 8001812:	d00b      	beq.n	800182c <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001814:	4bc9      	ldr	r3, [pc, #804]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 030c 	and.w	r3, r3, #12
 800181c:	2b08      	cmp	r3, #8
 800181e:	d16d      	bne.n	80018fc <HAL_RCC_OscConfig+0x420>
 8001820:	4bc6      	ldr	r3, [pc, #792]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001828:	2b00      	cmp	r3, #0
 800182a:	d167      	bne.n	80018fc <HAL_RCC_OscConfig+0x420>
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800183e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b3f      	cmp	r3, #63	@ 0x3f
 800184a:	d802      	bhi.n	8001852 <HAL_RCC_OscConfig+0x376>
 800184c:	4bbb      	ldr	r3, [pc, #748]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	e013      	b.n	800187a <HAL_RCC_OscConfig+0x39e>
 8001852:	2302      	movs	r3, #2
 8001854:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001858:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800185c:	fa93 f3a3 	rbit	r3, r3
 8001860:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001864:	2302      	movs	r3, #2
 8001866:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800186a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800186e:	fa93 f3a3 	rbit	r3, r3
 8001872:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001876:	4bb1      	ldr	r3, [pc, #708]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	2202      	movs	r2, #2
 800187c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001880:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001884:	fa92 f2a2 	rbit	r2, r2
 8001888:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800188c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001890:	fab2 f282 	clz	r2, r2
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	f042 0220 	orr.w	r2, r2, #32
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	f002 021f 	and.w	r2, r2, #31
 80018a0:	2101      	movs	r1, #1
 80018a2:	fa01 f202 	lsl.w	r2, r1, r2
 80018a6:	4013      	ands	r3, r2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d00a      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3e6>
 80018ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018b0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d002      	beq.n	80018c2 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	f000 be14 	b.w	80024ea <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b9e      	ldr	r3, [pc, #632]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	21f8      	movs	r1, #248	@ 0xf8
 80018d8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80018e0:	fa91 f1a1 	rbit	r1, r1
 80018e4:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80018e8:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80018ec:	fab1 f181 	clz	r1, r1
 80018f0:	b2c9      	uxtb	r1, r1
 80018f2:	408b      	lsls	r3, r1
 80018f4:	4991      	ldr	r1, [pc, #580]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fa:	e0f1      	b.n	8001ae0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001900:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8083 	beq.w	8001a14 <HAL_RCC_OscConfig+0x538>
 800190e:	2301      	movs	r3, #1
 8001910:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001914:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001918:	fa93 f3a3 	rbit	r3, r3
 800191c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8001920:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001924:	fab3 f383 	clz	r3, r3
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800192e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	461a      	mov	r2, r3
 8001936:	2301      	movs	r3, #1
 8001938:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193a:	f7ff f937 	bl	8000bac <HAL_GetTick>
 800193e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	e00a      	b.n	800195a <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff f932 	bl	8000bac <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d902      	bls.n	800195a <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	f000 bdc8 	b.w	80024ea <HAL_RCC_OscConfig+0x100e>
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001964:	fa93 f3a3 	rbit	r3, r3
 8001968:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800196c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	fab3 f383 	clz	r3, r3
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b3f      	cmp	r3, #63	@ 0x3f
 8001978:	d802      	bhi.n	8001980 <HAL_RCC_OscConfig+0x4a4>
 800197a:	4b70      	ldr	r3, [pc, #448]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	e013      	b.n	80019a8 <HAL_RCC_OscConfig+0x4cc>
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001992:	2302      	movs	r3, #2
 8001994:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001998:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800199c:	fa93 f3a3 	rbit	r3, r3
 80019a0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80019a4:	4b65      	ldr	r3, [pc, #404]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 80019a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019a8:	2202      	movs	r2, #2
 80019aa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80019ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80019b2:	fa92 f2a2 	rbit	r2, r2
 80019b6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80019ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80019be:	fab2 f282 	clz	r2, r2
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	f042 0220 	orr.w	r2, r2, #32
 80019c8:	b2d2      	uxtb	r2, r2
 80019ca:	f002 021f 	and.w	r2, r2, #31
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f202 	lsl.w	r2, r1, r2
 80019d4:	4013      	ands	r3, r2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0b4      	beq.n	8001944 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019da:	4b58      	ldr	r3, [pc, #352]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80019e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	21f8      	movs	r1, #248	@ 0xf8
 80019f0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80019f8:	fa91 f1a1 	rbit	r1, r1
 80019fc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001a00:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001a04:	fab1 f181 	clz	r1, r1
 8001a08:	b2c9      	uxtb	r1, r1
 8001a0a:	408b      	lsls	r3, r1
 8001a0c:	494b      	ldr	r1, [pc, #300]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
 8001a12:	e065      	b.n	8001ae0 <HAL_RCC_OscConfig+0x604>
 8001a14:	2301      	movs	r3, #1
 8001a16:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001a26:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a34:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a40:	f7ff f8b4 	bl	8000bac <HAL_GetTick>
 8001a44:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff f8af 	bl	8000bac <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d902      	bls.n	8001a60 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	f000 bd45 	b.w	80024ea <HAL_RCC_OscConfig+0x100e>
 8001a60:	2302      	movs	r3, #2
 8001a62:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a76:	fab3 f383 	clz	r3, r3
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a7e:	d802      	bhi.n	8001a86 <HAL_RCC_OscConfig+0x5aa>
 8001a80:	4b2e      	ldr	r3, [pc, #184]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e013      	b.n	8001aae <HAL_RCC_OscConfig+0x5d2>
 8001a86:	2302      	movs	r3, #2
 8001a88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a90:	fa93 f3a3 	rbit	r3, r3
 8001a94:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001aaa:	4b24      	ldr	r3, [pc, #144]	@ (8001b3c <HAL_RCC_OscConfig+0x660>)
 8001aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aae:	2202      	movs	r2, #2
 8001ab0:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001ab4:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001ab8:	fa92 f2a2 	rbit	r2, r2
 8001abc:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001ac0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001ac4:	fab2 f282 	clz	r2, r2
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	b2d2      	uxtb	r2, r2
 8001ad0:	f002 021f 	and.w	r2, r2, #31
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1b4      	bne.n	8001a4a <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ae4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	f000 8115 	beq.w	8001d20 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001afa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d07e      	beq.n	8001c04 <HAL_RCC_OscConfig+0x728>
 8001b06:	2301      	movs	r3, #1
 8001b08:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b1c:	fab3 f383 	clz	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_RCC_OscConfig+0x664>)
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2301      	movs	r3, #1
 8001b2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff f83c 	bl	8000bac <HAL_GetTick>
 8001b34:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b38:	e00f      	b.n	8001b5a <HAL_RCC_OscConfig+0x67e>
 8001b3a:	bf00      	nop
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff f832 	bl	8000bac <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d902      	bls.n	8001b5a <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f000 bcc8 	b.w	80024ea <HAL_RCC_OscConfig+0x100e>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b70:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b74:	2202      	movs	r2, #2
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b7c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	fa93 f2a3 	rbit	r2, r3
 8001b86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b98:	2202      	movs	r2, #2
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f2a3 	rbit	r2, r3
 8001baa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bb2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb4:	4bb0      	ldr	r3, [pc, #704]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001bb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bbc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	6019      	str	r1, [r3, #0]
 8001bc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	fa93 f1a3 	rbit	r1, r3
 8001bd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001bda:	6019      	str	r1, [r3, #0]
  return result;
 8001bdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001be0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	fab3 f383 	clz	r3, r3
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0a0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x668>
 8001c02:	e08d      	b.n	8001d20 <HAL_RCC_OscConfig+0x844>
 8001c04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c08:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c14:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	fa93 f2a3 	rbit	r2, r3
 8001c1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c22:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c26:	601a      	str	r2, [r3, #0]
  return result;
 8001c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c30:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b90      	ldr	r3, [pc, #576]	@ (8001e7c <HAL_RCC_OscConfig+0x9a0>)
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	461a      	mov	r2, r3
 8001c42:	2300      	movs	r3, #0
 8001c44:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c46:	f7fe ffb1 	bl	8000bac <HAL_GetTick>
 8001c4a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4e:	e00a      	b.n	8001c66 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c50:	f7fe ffac 	bl	8000bac <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d902      	bls.n	8001c66 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	f000 bc42 	b.w	80024ea <HAL_RCC_OscConfig+0x100e>
 8001c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001c6e:	2202      	movs	r2, #2
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c76:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f2a3 	rbit	r2, r3
 8001c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c84:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c8e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c92:	2202      	movs	r2, #2
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	fa93 f2a3 	rbit	r2, r3
 8001ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cbe:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	fa93 f2a3 	rbit	r2, r3
 8001cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ccc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001cd0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cd2:	4b69      	ldr	r3, [pc, #420]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001cd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cda:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001cde:	2102      	movs	r1, #2
 8001ce0:	6019      	str	r1, [r3, #0]
 8001ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	fa93 f1a3 	rbit	r1, r3
 8001cf0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cf4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001cf8:	6019      	str	r1, [r3, #0]
  return result;
 8001cfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	fab3 f383 	clz	r3, r3
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f003 031f 	and.w	r3, r3, #31
 8001d14:	2101      	movs	r1, #1
 8001d16:	fa01 f303 	lsl.w	r3, r1, r3
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d197      	bne.n	8001c50 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0304 	and.w	r3, r3, #4
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f000 819e 	beq.w	8002072 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d3c:	4b4e      	ldr	r3, [pc, #312]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001d3e:	69db      	ldr	r3, [r3, #28]
 8001d40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d116      	bne.n	8001d76 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d48:	4b4b      	ldr	r3, [pc, #300]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	4a4a      	ldr	r2, [pc, #296]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001d4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d52:	61d3      	str	r3, [r2, #28]
 8001d54:	4b48      	ldr	r3, [pc, #288]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001d56:	69db      	ldr	r3, [r3, #28]
 8001d58:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d60:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d6a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001d6e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	4b42      	ldr	r3, [pc, #264]	@ (8001e80 <HAL_RCC_OscConfig+0x9a4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d11a      	bne.n	8001db8 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d82:	4b3f      	ldr	r3, [pc, #252]	@ (8001e80 <HAL_RCC_OscConfig+0x9a4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a3e      	ldr	r2, [pc, #248]	@ (8001e80 <HAL_RCC_OscConfig+0x9a4>)
 8001d88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d8e:	f7fe ff0d 	bl	8000bac <HAL_GetTick>
 8001d92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	e009      	b.n	8001dac <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d98:	f7fe ff08 	bl	8000bac <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b64      	cmp	r3, #100	@ 0x64
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e39e      	b.n	80024ea <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dac:	4b34      	ldr	r3, [pc, #208]	@ (8001e80 <HAL_RCC_OscConfig+0x9a4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0ef      	beq.n	8001d98 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001db8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d106      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x8fa>
 8001dc8:	4b2b      	ldr	r3, [pc, #172]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a2a      	ldr	r2, [pc, #168]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	6213      	str	r3, [r2, #32]
 8001dd4:	e035      	b.n	8001e42 <HAL_RCC_OscConfig+0x966>
 8001dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dda:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x924>
 8001de6:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a23      	ldr	r2, [pc, #140]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a20      	ldr	r2, [pc, #128]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001df8:	f023 0304 	bic.w	r3, r3, #4
 8001dfc:	6213      	str	r3, [r2, #32]
 8001dfe:	e020      	b.n	8001e42 <HAL_RCC_OscConfig+0x966>
 8001e00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e04:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	2b05      	cmp	r3, #5
 8001e0e:	d10c      	bne.n	8001e2a <HAL_RCC_OscConfig+0x94e>
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4a18      	ldr	r2, [pc, #96]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001e16:	f043 0304 	orr.w	r3, r3, #4
 8001e1a:	6213      	str	r3, [r2, #32]
 8001e1c:	4b16      	ldr	r3, [pc, #88]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001e1e:	6a1b      	ldr	r3, [r3, #32]
 8001e20:	4a15      	ldr	r2, [pc, #84]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6213      	str	r3, [r2, #32]
 8001e28:	e00b      	b.n	8001e42 <HAL_RCC_OscConfig+0x966>
 8001e2a:	4b13      	ldr	r3, [pc, #76]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	4a12      	ldr	r2, [pc, #72]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001e30:	f023 0301 	bic.w	r3, r3, #1
 8001e34:	6213      	str	r3, [r2, #32]
 8001e36:	4b10      	ldr	r3, [pc, #64]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e78 <HAL_RCC_OscConfig+0x99c>)
 8001e3c:	f023 0304 	bic.w	r3, r3, #4
 8001e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8087 	beq.w	8001f62 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7fe feaa 	bl	8000bac <HAL_GetTick>
 8001e58:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e5c:	e012      	b.n	8001e84 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7fe fea5 	bl	8000bac <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d908      	bls.n	8001e84 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e339      	b.n	80024ea <HAL_RCC_OscConfig+0x100e>
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	10908120 	.word	0x10908120
 8001e80:	40007000 	.word	0x40007000
 8001e84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e88:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e94:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	fa93 f2a3 	rbit	r2, r3
 8001e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ea2:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eac:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eb8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	fa93 f2a3 	rbit	r2, r3
 8001ec2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001eca:	601a      	str	r2, [r3, #0]
  return result;
 8001ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed0:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001ed4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d102      	bne.n	8001eec <HAL_RCC_OscConfig+0xa10>
 8001ee6:	4b98      	ldr	r3, [pc, #608]	@ (8002148 <HAL_RCC_OscConfig+0xc6c>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	e013      	b.n	8001f14 <HAL_RCC_OscConfig+0xa38>
 8001eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001efc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	fa93 f2a3 	rbit	r2, r3
 8001f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	4b8d      	ldr	r3, [pc, #564]	@ (8002148 <HAL_RCC_OscConfig+0xc6c>)
 8001f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f18:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f1c:	2102      	movs	r1, #2
 8001f1e:	6011      	str	r1, [r2, #0]
 8001f20:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f24:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	fa92 f1a2 	rbit	r1, r2
 8001f2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f32:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f36:	6011      	str	r1, [r2, #0]
  return result;
 8001f38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f3c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f40:	6812      	ldr	r2, [r2, #0]
 8001f42:	fab2 f282 	clz	r2, r2
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f4c:	b2d2      	uxtb	r2, r2
 8001f4e:	f002 021f 	and.w	r2, r2, #31
 8001f52:	2101      	movs	r1, #1
 8001f54:	fa01 f202 	lsl.w	r2, r1, r2
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f43f af7f 	beq.w	8001e5e <HAL_RCC_OscConfig+0x982>
 8001f60:	e07d      	b.n	800205e <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f62:	f7fe fe23 	bl	8000bac <HAL_GetTick>
 8001f66:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6c:	f7fe fe1e 	bl	8000bac <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e2b2      	b.n	80024ea <HAL_RCC_OscConfig+0x100e>
 8001f84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f88:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f94:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	fa93 f2a3 	rbit	r2, r3
 8001f9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fa2:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fb8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	fa93 f2a3 	rbit	r2, r3
 8001fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001fca:	601a      	str	r2, [r3, #0]
  return result;
 8001fcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001fd4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd6:	fab3 f383 	clz	r3, r3
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d102      	bne.n	8001fec <HAL_RCC_OscConfig+0xb10>
 8001fe6:	4b58      	ldr	r3, [pc, #352]	@ (8002148 <HAL_RCC_OscConfig+0xc6c>)
 8001fe8:	6a1b      	ldr	r3, [r3, #32]
 8001fea:	e013      	b.n	8002014 <HAL_RCC_OscConfig+0xb38>
 8001fec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ffc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	fa93 f2a3 	rbit	r2, r3
 8002006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	4b4d      	ldr	r3, [pc, #308]	@ (8002148 <HAL_RCC_OscConfig+0xc6c>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002014:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002018:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800201c:	2102      	movs	r1, #2
 800201e:	6011      	str	r1, [r2, #0]
 8002020:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002024:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002028:	6812      	ldr	r2, [r2, #0]
 800202a:	fa92 f1a2 	rbit	r1, r2
 800202e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002032:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002036:	6011      	str	r1, [r2, #0]
  return result;
 8002038:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800203c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	fab2 f282 	clz	r2, r2
 8002046:	b2d2      	uxtb	r2, r2
 8002048:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	f002 021f 	and.w	r2, r2, #31
 8002052:	2101      	movs	r1, #1
 8002054:	fa01 f202 	lsl.w	r2, r1, r2
 8002058:	4013      	ands	r3, r2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d186      	bne.n	8001f6c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800205e:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002062:	2b01      	cmp	r3, #1
 8002064:	d105      	bne.n	8002072 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002066:	4b38      	ldr	r3, [pc, #224]	@ (8002148 <HAL_RCC_OscConfig+0xc6c>)
 8002068:	69db      	ldr	r3, [r3, #28]
 800206a:	4a37      	ldr	r2, [pc, #220]	@ (8002148 <HAL_RCC_OscConfig+0xc6c>)
 800206c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002070:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002076:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 8232 	beq.w	80024e8 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002084:	4b30      	ldr	r3, [pc, #192]	@ (8002148 <HAL_RCC_OscConfig+0xc6c>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 030c 	and.w	r3, r3, #12
 800208c:	2b08      	cmp	r3, #8
 800208e:	f000 8201 	beq.w	8002494 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002092:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002096:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	f040 8157 	bne.w	8002352 <HAL_RCC_OscConfig+0xe76>
 80020a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80020ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b6:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	fa93 f2a3 	rbit	r2, r3
 80020c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c4:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80020c8:	601a      	str	r2, [r3, #0]
  return result;
 80020ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ce:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80020d2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d4:	fab3 f383 	clz	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80020de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	461a      	mov	r2, r3
 80020e6:	2300      	movs	r3, #0
 80020e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ea:	f7fe fd5f 	bl	8000bac <HAL_GetTick>
 80020ee:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	e009      	b.n	8002108 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f4:	f7fe fd5a 	bl	8000bac <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e1f0      	b.n	80024ea <HAL_RCC_OscConfig+0x100e>
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002110:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800211a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	fa93 f2a3 	rbit	r2, r3
 8002124:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002128:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800212c:	601a      	str	r2, [r3, #0]
  return result;
 800212e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002132:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002136:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002138:	fab3 f383 	clz	r3, r3
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b3f      	cmp	r3, #63	@ 0x3f
 8002140:	d804      	bhi.n	800214c <HAL_RCC_OscConfig+0xc70>
 8002142:	4b01      	ldr	r3, [pc, #4]	@ (8002148 <HAL_RCC_OscConfig+0xc6c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	e029      	b.n	800219c <HAL_RCC_OscConfig+0xcc0>
 8002148:	40021000 	.word	0x40021000
 800214c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002150:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002154:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002158:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800215e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	fa93 f2a3 	rbit	r2, r3
 8002168:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800216c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002176:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800217a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002184:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	fa93 f2a3 	rbit	r2, r3
 800218e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002192:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	4bc3      	ldr	r3, [pc, #780]	@ (80024a8 <HAL_RCC_OscConfig+0xfcc>)
 800219a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021a0:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80021a4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021a8:	6011      	str	r1, [r2, #0]
 80021aa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021ae:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80021b2:	6812      	ldr	r2, [r2, #0]
 80021b4:	fa92 f1a2 	rbit	r1, r2
 80021b8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021bc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80021c0:	6011      	str	r1, [r2, #0]
  return result;
 80021c2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021c6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	fab2 f282 	clz	r2, r2
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	f042 0220 	orr.w	r2, r2, #32
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	f002 021f 	and.w	r2, r2, #31
 80021dc:	2101      	movs	r1, #1
 80021de:	fa01 f202 	lsl.w	r2, r1, r2
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d185      	bne.n	80020f4 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e8:	4baf      	ldr	r3, [pc, #700]	@ (80024a8 <HAL_RCC_OscConfig+0xfcc>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80021f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80021fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002200:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a1b      	ldr	r3, [r3, #32]
 8002208:	430b      	orrs	r3, r1
 800220a:	49a7      	ldr	r1, [pc, #668]	@ (80024a8 <HAL_RCC_OscConfig+0xfcc>)
 800220c:	4313      	orrs	r3, r2
 800220e:	604b      	str	r3, [r1, #4]
 8002210:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002214:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002218:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800221c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002222:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	fa93 f2a3 	rbit	r2, r3
 800222c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002230:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002234:	601a      	str	r2, [r3, #0]
  return result;
 8002236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800223e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002240:	fab3 f383 	clz	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800224a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	461a      	mov	r2, r3
 8002252:	2301      	movs	r3, #1
 8002254:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe fca9 	bl	8000bac <HAL_GetTick>
 800225a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800225e:	e009      	b.n	8002274 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002260:	f7fe fca4 	bl	8000bac <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e13a      	b.n	80024ea <HAL_RCC_OscConfig+0x100e>
 8002274:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002278:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800227c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002286:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	fa93 f2a3 	rbit	r2, r3
 8002290:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002294:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002298:	601a      	str	r2, [r3, #0]
  return result;
 800229a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80022a2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a4:	fab3 f383 	clz	r3, r3
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80022ac:	d802      	bhi.n	80022b4 <HAL_RCC_OscConfig+0xdd8>
 80022ae:	4b7e      	ldr	r3, [pc, #504]	@ (80024a8 <HAL_RCC_OscConfig+0xfcc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	e027      	b.n	8002304 <HAL_RCC_OscConfig+0xe28>
 80022b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022b8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80022bc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f2a3 	rbit	r2, r3
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022de:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80022e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	fa93 f2a3 	rbit	r2, r3
 80022f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022fa:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	4b69      	ldr	r3, [pc, #420]	@ (80024a8 <HAL_RCC_OscConfig+0xfcc>)
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002308:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800230c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002310:	6011      	str	r1, [r2, #0]
 8002312:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002316:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	fa92 f1a2 	rbit	r1, r2
 8002320:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002324:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002328:	6011      	str	r1, [r2, #0]
  return result;
 800232a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800232e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	fab2 f282 	clz	r2, r2
 8002338:	b2d2      	uxtb	r2, r2
 800233a:	f042 0220 	orr.w	r2, r2, #32
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	f002 021f 	and.w	r2, r2, #31
 8002344:	2101      	movs	r1, #1
 8002346:	fa01 f202 	lsl.w	r2, r1, r2
 800234a:	4013      	ands	r3, r2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d087      	beq.n	8002260 <HAL_RCC_OscConfig+0xd84>
 8002350:	e0ca      	b.n	80024e8 <HAL_RCC_OscConfig+0x100c>
 8002352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002356:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800235a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800235e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fa93 f2a3 	rbit	r2, r3
 800236e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002372:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002376:	601a      	str	r2, [r3, #0]
  return result;
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002380:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002382:	fab3 f383 	clz	r3, r3
 8002386:	b2db      	uxtb	r3, r3
 8002388:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800238c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	461a      	mov	r2, r3
 8002394:	2300      	movs	r3, #0
 8002396:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002398:	f7fe fc08 	bl	8000bac <HAL_GetTick>
 800239c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023a0:	e009      	b.n	80023b6 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a2:	f7fe fc03 	bl	8000bac <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e099      	b.n	80024ea <HAL_RCC_OscConfig+0x100e>
 80023b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ba:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80023be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80023da:	601a      	str	r2, [r3, #0]
  return result;
 80023dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80023e4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b3f      	cmp	r3, #63	@ 0x3f
 80023ee:	d802      	bhi.n	80023f6 <HAL_RCC_OscConfig+0xf1a>
 80023f0:	4b2d      	ldr	r3, [pc, #180]	@ (80024a8 <HAL_RCC_OscConfig+0xfcc>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	e027      	b.n	8002446 <HAL_RCC_OscConfig+0xf6a>
 80023f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fa:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002402:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002408:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	fa93 f2a3 	rbit	r2, r3
 8002412:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002416:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002420:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002424:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	fa93 f2a3 	rbit	r2, r3
 8002438:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800243c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	4b19      	ldr	r3, [pc, #100]	@ (80024a8 <HAL_RCC_OscConfig+0xfcc>)
 8002444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002446:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800244a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800244e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002452:	6011      	str	r1, [r2, #0]
 8002454:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002458:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	fa92 f1a2 	rbit	r1, r2
 8002462:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002466:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800246a:	6011      	str	r1, [r2, #0]
  return result;
 800246c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002470:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002474:	6812      	ldr	r2, [r2, #0]
 8002476:	fab2 f282 	clz	r2, r2
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f042 0220 	orr.w	r2, r2, #32
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f002 021f 	and.w	r2, r2, #31
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f202 	lsl.w	r2, r1, r2
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d187      	bne.n	80023a2 <HAL_RCC_OscConfig+0xec6>
 8002492:	e029      	b.n	80024e8 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002494:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002498:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d103      	bne.n	80024ac <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e020      	b.n	80024ea <HAL_RCC_OscConfig+0x100e>
 80024a8:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024ac:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <HAL_RCC_OscConfig+0x1018>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024b4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80024b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d10b      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80024cc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80024d0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d001      	beq.n	80024e8 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b09e      	sub	sp, #120	@ 0x78
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d101      	bne.n	8002510 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e154      	b.n	80027ba <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002510:	4b89      	ldr	r3, [pc, #548]	@ (8002738 <HAL_RCC_ClockConfig+0x240>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d910      	bls.n	8002540 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b86      	ldr	r3, [pc, #536]	@ (8002738 <HAL_RCC_ClockConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	4984      	ldr	r1, [pc, #528]	@ (8002738 <HAL_RCC_ClockConfig+0x240>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b82      	ldr	r3, [pc, #520]	@ (8002738 <HAL_RCC_ClockConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e13c      	b.n	80027ba <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b7b      	ldr	r3, [pc, #492]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	4978      	ldr	r1, [pc, #480]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80cd 	beq.w	8002706 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d137      	bne.n	80025e4 <HAL_RCC_ClockConfig+0xec>
 8002574:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002578:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800257c:	fa93 f3a3 	rbit	r3, r3
 8002580:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002584:	fab3 f383 	clz	r3, r3
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b3f      	cmp	r3, #63	@ 0x3f
 800258c:	d802      	bhi.n	8002594 <HAL_RCC_ClockConfig+0x9c>
 800258e:	4b6b      	ldr	r3, [pc, #428]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e00f      	b.n	80025b4 <HAL_RCC_ClockConfig+0xbc>
 8002594:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002598:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800259c:	fa93 f3a3 	rbit	r3, r3
 80025a0:	667b      	str	r3, [r7, #100]	@ 0x64
 80025a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80025a8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80025aa:	fa93 f3a3 	rbit	r3, r3
 80025ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80025b0:	4b62      	ldr	r3, [pc, #392]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 80025b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80025b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80025ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80025bc:	fa92 f2a2 	rbit	r2, r2
 80025c0:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80025c2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80025c4:	fab2 f282 	clz	r2, r2
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f042 0220 	orr.w	r2, r2, #32
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f002 021f 	and.w	r2, r2, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d171      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e0ea      	b.n	80027ba <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d137      	bne.n	800265c <HAL_RCC_ClockConfig+0x164>
 80025ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025f4:	fa93 f3a3 	rbit	r3, r3
 80025f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80025fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b3f      	cmp	r3, #63	@ 0x3f
 8002604:	d802      	bhi.n	800260c <HAL_RCC_ClockConfig+0x114>
 8002606:	4b4d      	ldr	r3, [pc, #308]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	e00f      	b.n	800262c <HAL_RCC_ClockConfig+0x134>
 800260c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002610:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002612:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002614:	fa93 f3a3 	rbit	r3, r3
 8002618:	647b      	str	r3, [r7, #68]	@ 0x44
 800261a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800261e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002620:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002622:	fa93 f3a3 	rbit	r3, r3
 8002626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002628:	4b44      	ldr	r3, [pc, #272]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002630:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002632:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002634:	fa92 f2a2 	rbit	r2, r2
 8002638:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800263a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800263c:	fab2 f282 	clz	r2, r2
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	f042 0220 	orr.w	r2, r2, #32
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	f002 021f 	and.w	r2, r2, #31
 800264c:	2101      	movs	r1, #1
 800264e:	fa01 f202 	lsl.w	r2, r1, r2
 8002652:	4013      	ands	r3, r2
 8002654:	2b00      	cmp	r3, #0
 8002656:	d135      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e0ae      	b.n	80027ba <HAL_RCC_ClockConfig+0x2c2>
 800265c:	2302      	movs	r3, #2
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b3f      	cmp	r3, #63	@ 0x3f
 8002672:	d802      	bhi.n	800267a <HAL_RCC_ClockConfig+0x182>
 8002674:	4b31      	ldr	r3, [pc, #196]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	e00d      	b.n	8002696 <HAL_RCC_ClockConfig+0x19e>
 800267a:	2302      	movs	r3, #2
 800267c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	627b      	str	r3, [r7, #36]	@ 0x24
 8002686:	2302      	movs	r3, #2
 8002688:	623b      	str	r3, [r7, #32]
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	61fb      	str	r3, [r7, #28]
 8002692:	4b2a      	ldr	r3, [pc, #168]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 8002694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002696:	2202      	movs	r2, #2
 8002698:	61ba      	str	r2, [r7, #24]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	fa92 f2a2 	rbit	r2, r2
 80026a0:	617a      	str	r2, [r7, #20]
  return result;
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	fab2 f282 	clz	r2, r2
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f042 0220 	orr.w	r2, r2, #32
 80026ae:	b2d2      	uxtb	r2, r2
 80026b0:	f002 021f 	and.w	r2, r2, #31
 80026b4:	2101      	movs	r1, #1
 80026b6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ba:	4013      	ands	r3, r2
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e07a      	b.n	80027ba <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c4:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 0203 	bic.w	r2, r3, #3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	491a      	ldr	r1, [pc, #104]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d6:	f7fe fa69 	bl	8000bac <HAL_GetTick>
 80026da:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026de:	f7fe fa65 	bl	8000bac <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e062      	b.n	80027ba <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f4:	4b11      	ldr	r3, [pc, #68]	@ (800273c <HAL_RCC_ClockConfig+0x244>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 020c 	and.w	r2, r3, #12
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	429a      	cmp	r2, r3
 8002704:	d1eb      	bne.n	80026de <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002706:	4b0c      	ldr	r3, [pc, #48]	@ (8002738 <HAL_RCC_ClockConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d215      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002714:	4b08      	ldr	r3, [pc, #32]	@ (8002738 <HAL_RCC_ClockConfig+0x240>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f023 0207 	bic.w	r2, r3, #7
 800271c:	4906      	ldr	r1, [pc, #24]	@ (8002738 <HAL_RCC_ClockConfig+0x240>)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	4313      	orrs	r3, r2
 8002722:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002724:	4b04      	ldr	r3, [pc, #16]	@ (8002738 <HAL_RCC_ClockConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	429a      	cmp	r2, r3
 8002730:	d006      	beq.n	8002740 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e041      	b.n	80027ba <HAL_RCC_ClockConfig+0x2c2>
 8002736:	bf00      	nop
 8002738:	40022000 	.word	0x40022000
 800273c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <HAL_RCC_ClockConfig+0x2cc>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	491a      	ldr	r1, [pc, #104]	@ (80027c4 <HAL_RCC_ClockConfig+0x2cc>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800276a:	4b16      	ldr	r3, [pc, #88]	@ (80027c4 <HAL_RCC_ClockConfig+0x2cc>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4912      	ldr	r1, [pc, #72]	@ (80027c4 <HAL_RCC_ClockConfig+0x2cc>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800277e:	f000 f829 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 8002782:	4601      	mov	r1, r0
 8002784:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <HAL_RCC_ClockConfig+0x2cc>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800278c:	22f0      	movs	r2, #240	@ 0xf0
 800278e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002790:	693a      	ldr	r2, [r7, #16]
 8002792:	fa92 f2a2 	rbit	r2, r2
 8002796:	60fa      	str	r2, [r7, #12]
  return result;
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	fab2 f282 	clz	r2, r2
 800279e:	b2d2      	uxtb	r2, r2
 80027a0:	40d3      	lsrs	r3, r2
 80027a2:	4a09      	ldr	r2, [pc, #36]	@ (80027c8 <HAL_RCC_ClockConfig+0x2d0>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	fa21 f303 	lsr.w	r3, r1, r3
 80027aa:	4a08      	ldr	r2, [pc, #32]	@ (80027cc <HAL_RCC_ClockConfig+0x2d4>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027ae:	4b08      	ldr	r3, [pc, #32]	@ (80027d0 <HAL_RCC_ClockConfig+0x2d8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe f9b6 	bl	8000b24 <HAL_InitTick>
  
  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3778      	adds	r7, #120	@ 0x78
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08004724 	.word	0x08004724
 80027cc:	20000000 	.word	0x20000000
 80027d0:	20000004 	.word	0x20000004

080027d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	2300      	movs	r3, #0
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	2300      	movs	r3, #0
 80027e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80027ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 030c 	and.w	r3, r3, #12
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d002      	beq.n	8002804 <HAL_RCC_GetSysClockFreq+0x30>
 80027fe:	2b08      	cmp	r3, #8
 8002800:	d003      	beq.n	800280a <HAL_RCC_GetSysClockFreq+0x36>
 8002802:	e026      	b.n	8002852 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002804:	4b19      	ldr	r3, [pc, #100]	@ (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002806:	613b      	str	r3, [r7, #16]
      break;
 8002808:	e026      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	0c9b      	lsrs	r3, r3, #18
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	4a17      	ldr	r2, [pc, #92]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002814:	5cd3      	ldrb	r3, [r2, r3]
 8002816:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002818:	4b13      	ldr	r3, [pc, #76]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x94>)
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	4a14      	ldr	r2, [pc, #80]	@ (8002874 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002830:	4a0e      	ldr	r2, [pc, #56]	@ (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	fbb2 f2f3 	udiv	r2, r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	e004      	b.n	800284c <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a0c      	ldr	r2, [pc, #48]	@ (8002878 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002846:	fb02 f303 	mul.w	r3, r2, r3
 800284a:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	613b      	str	r3, [r7, #16]
      break;
 8002850:	e002      	b.n	8002858 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002852:	4b06      	ldr	r3, [pc, #24]	@ (800286c <HAL_RCC_GetSysClockFreq+0x98>)
 8002854:	613b      	str	r3, [r7, #16]
      break;
 8002856:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002858:	693b      	ldr	r3, [r7, #16]
}
 800285a:	4618      	mov	r0, r3
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	007a1200 	.word	0x007a1200
 8002870:	0800473c 	.word	0x0800473c
 8002874:	0800474c 	.word	0x0800474c
 8002878:	003d0900 	.word	0x003d0900

0800287c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800287c:	b480      	push	{r7}
 800287e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002880:	4b03      	ldr	r3, [pc, #12]	@ (8002890 <HAL_RCC_GetHCLKFreq+0x14>)
 8002882:	681b      	ldr	r3, [r3, #0]
}
 8002884:	4618      	mov	r0, r3
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	20000000 	.word	0x20000000

08002894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800289a:	f7ff ffef 	bl	800287c <HAL_RCC_GetHCLKFreq>
 800289e:	4601      	mov	r1, r0
 80028a0:	4b0b      	ldr	r3, [pc, #44]	@ (80028d0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028a8:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80028ac:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	fa92 f2a2 	rbit	r2, r2
 80028b4:	603a      	str	r2, [r7, #0]
  return result;
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	fab2 f282 	clz	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	40d3      	lsrs	r3, r2
 80028c0:	4a04      	ldr	r2, [pc, #16]	@ (80028d4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028c2:	5cd3      	ldrb	r3, [r2, r3]
 80028c4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028c8:	4618      	mov	r0, r3
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	40021000 	.word	0x40021000
 80028d4:	08004734 	.word	0x08004734

080028d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028de:	f7ff ffcd 	bl	800287c <HAL_RCC_GetHCLKFreq>
 80028e2:	4601      	mov	r1, r0
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 80028ec:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 80028f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	fa92 f2a2 	rbit	r2, r2
 80028f8:	603a      	str	r2, [r7, #0]
  return result;
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	fab2 f282 	clz	r2, r2
 8002900:	b2d2      	uxtb	r2, r2
 8002902:	40d3      	lsrs	r3, r2
 8002904:	4a04      	ldr	r2, [pc, #16]	@ (8002918 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002906:	5cd3      	ldrb	r3, [r2, r3]
 8002908:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800290c:	4618      	mov	r0, r3
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	08004734 	.word	0x08004734

0800291c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b092      	sub	sp, #72	@ 0x48
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800292c:	2300      	movs	r3, #0
 800292e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 80d2 	beq.w	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002940:	4b4d      	ldr	r3, [pc, #308]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002942:	69db      	ldr	r3, [r3, #28]
 8002944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10e      	bne.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800294c:	4b4a      	ldr	r3, [pc, #296]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	4a49      	ldr	r2, [pc, #292]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002952:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002956:	61d3      	str	r3, [r2, #28]
 8002958:	4b47      	ldr	r3, [pc, #284]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002964:	2301      	movs	r3, #1
 8002966:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800296a:	4b44      	ldr	r3, [pc, #272]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d118      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002976:	4b41      	ldr	r3, [pc, #260]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a40      	ldr	r2, [pc, #256]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002980:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002982:	f7fe f913 	bl	8000bac <HAL_GetTick>
 8002986:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002988:	e008      	b.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298a:	f7fe f90f 	bl	8000bac <HAL_GetTick>
 800298e:	4602      	mov	r2, r0
 8002990:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002992:	1ad3      	subs	r3, r2, r3
 8002994:	2b64      	cmp	r3, #100	@ 0x64
 8002996:	d901      	bls.n	800299c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002998:	2303      	movs	r3, #3
 800299a:	e167      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	4b37      	ldr	r3, [pc, #220]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d0f0      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029a8:	4b33      	ldr	r3, [pc, #204]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 8082 	beq.w	8002abe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d07a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029c8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029ca:	6a1b      	ldr	r3, [r3, #32]
 80029cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029da:	fa93 f3a3 	rbit	r3, r3
 80029de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80029e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b25      	ldr	r3, [pc, #148]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029ec:	4413      	add	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	461a      	mov	r2, r3
 80029f2:	2301      	movs	r3, #1
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	461a      	mov	r2, r3
 8002a16:	2300      	movs	r3, #0
 8002a18:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a1a:	4a17      	ldr	r2, [pc, #92]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d049      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe f8bf 	bl	8000bac <HAL_GetTick>
 8002a2e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a30:	e00a      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a32:	f7fe f8bb 	bl	8000bac <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e111      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x350>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a4e:	fa93 f3a3 	rbit	r3, r3
 8002a52:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a54:	2302      	movs	r3, #2
 8002a56:	623b      	str	r3, [r7, #32]
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	fa93 f3a3 	rbit	r3, r3
 8002a5e:	61fb      	str	r3, [r7, #28]
  return result;
 8002a60:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a62:	fab3 f383 	clz	r3, r3
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d108      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a72:	4b01      	ldr	r3, [pc, #4]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	e00d      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	10908100 	.word	0x10908100
 8002a84:	2302      	movs	r3, #2
 8002a86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	617b      	str	r3, [r7, #20]
 8002a90:	4b78      	ldr	r3, [pc, #480]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a94:	2202      	movs	r2, #2
 8002a96:	613a      	str	r2, [r7, #16]
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	fa92 f2a2 	rbit	r2, r2
 8002a9e:	60fa      	str	r2, [r7, #12]
  return result;
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	fab2 f282 	clz	r2, r2
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aac:	b2d2      	uxtb	r2, r2
 8002aae:	f002 021f 	and.w	r2, r2, #31
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d0b9      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002abe:	4b6d      	ldr	r3, [pc, #436]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	496a      	ldr	r1, [pc, #424]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ad0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad8:	4b66      	ldr	r3, [pc, #408]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	4a65      	ldr	r2, [pc, #404]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d008      	beq.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002af0:	4b60      	ldr	r3, [pc, #384]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af4:	f023 0203 	bic.w	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	495d      	ldr	r1, [pc, #372]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d008      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b0e:	4b59      	ldr	r3, [pc, #356]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	4956      	ldr	r1, [pc, #344]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d008      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b2c:	4b51      	ldr	r3, [pc, #324]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b30:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	691b      	ldr	r3, [r3, #16]
 8002b38:	494e      	ldr	r1, [pc, #312]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d008      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	f023 0210 	bic.w	r2, r3, #16
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	4947      	ldr	r1, [pc, #284]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b68:	4b42      	ldr	r3, [pc, #264]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b74:	493f      	ldr	r1, [pc, #252]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b86:	4b3b      	ldr	r3, [pc, #236]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f023 0220 	bic.w	r2, r3, #32
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4938      	ldr	r1, [pc, #224]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ba4:	4b33      	ldr	r3, [pc, #204]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	4930      	ldr	r1, [pc, #192]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	4929      	ldr	r1, [pc, #164]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002be0:	4b24      	ldr	r3, [pc, #144]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bec:	4921      	ldr	r1, [pc, #132]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d008      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0a:	491a      	ldr	r1, [pc, #104]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c1c:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	4912      	ldr	r1, [pc, #72]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c46:	490b      	ldr	r1, [pc, #44]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d008      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c58:	4b06      	ldr	r3, [pc, #24]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c64:	4903      	ldr	r1, [pc, #12]	@ (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3748      	adds	r7, #72	@ 0x48
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	40021000 	.word	0x40021000

08002c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e09d      	b.n	8002dc6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c9a:	d009      	beq.n	8002cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
 8002ca2:	e005      	b.n	8002cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fd fd58 	bl	8000780 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cf0:	d902      	bls.n	8002cf8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	60fb      	str	r3, [r7, #12]
 8002cf6:	e002      	b.n	8002cfe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cf8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cfc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d06:	d007      	beq.n	8002d18 <HAL_SPI_Init+0xa0>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d10:	d002      	beq.n	8002d18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d5a:	ea42 0103 	orr.w	r1, r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d62:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	0c1b      	lsrs	r3, r3, #16
 8002d74:	f003 0204 	and.w	r2, r3, #4
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d94:	ea42 0103 	orr.w	r1, r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	69da      	ldr	r2, [r3, #28]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002db4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b082      	sub	sp, #8
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e040      	b.n	8002e62 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d106      	bne.n	8002df6 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f7fd fd07 	bl	8000804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2224      	movs	r2, #36	@ 0x24
 8002dfa:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0201 	bic.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 fa85 	bl	8003324 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f8ae 	bl	8002f7c <UART_SetConfig>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e01b      	b.n	8002e62 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e38:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e48:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f042 0201 	orr.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 fb04 	bl	8003468 <UART_CheckIdleState>
 8002e60:	4603      	mov	r3, r0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b08a      	sub	sp, #40	@ 0x28
 8002e6e:	af02      	add	r7, sp, #8
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	603b      	str	r3, [r7, #0]
 8002e76:	4613      	mov	r3, r2
 8002e78:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d177      	bne.n	8002f72 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d002      	beq.n	8002e8e <HAL_UART_Transmit+0x24>
 8002e88:	88fb      	ldrh	r3, [r7, #6]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e070      	b.n	8002f74 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2221      	movs	r2, #33	@ 0x21
 8002e9e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ea0:	f7fd fe84 	bl	8000bac <HAL_GetTick>
 8002ea4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	88fa      	ldrh	r2, [r7, #6]
 8002eaa:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	88fa      	ldrh	r2, [r7, #6]
 8002eb2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ebe:	d108      	bne.n	8002ed2 <HAL_UART_Transmit+0x68>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d104      	bne.n	8002ed2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e003      	b.n	8002eda <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002eda:	e02f      	b.n	8002f3c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	2180      	movs	r1, #128	@ 0x80
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 fb66 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d004      	beq.n	8002efc <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e03b      	b.n	8002f74 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	881a      	ldrh	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f0e:	b292      	uxth	r2, r2
 8002f10:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	3302      	adds	r3, #2
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e007      	b.n	8002f2a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	3301      	adds	r3, #1
 8002f28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1c9      	bne.n	8002edc <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2140      	movs	r1, #64	@ 0x40
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fb30 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2220      	movs	r2, #32
 8002f62:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e005      	b.n	8002f74 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e000      	b.n	8002f74 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f72:	2302      	movs	r3, #2
  }
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3720      	adds	r7, #32
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b088      	sub	sp, #32
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f84:	2300      	movs	r3, #0
 8002f86:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002faa:	f023 030c 	bic.w	r3, r3, #12
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	6812      	ldr	r2, [r2, #0]
 8002fb2:	6979      	ldr	r1, [r7, #20]
 8002fb4:	430b      	orrs	r3, r1
 8002fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4aa7      	ldr	r2, [pc, #668]	@ (8003294 <UART_SetConfig+0x318>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d120      	bne.n	800303e <UART_SetConfig+0xc2>
 8002ffc:	4ba6      	ldr	r3, [pc, #664]	@ (8003298 <UART_SetConfig+0x31c>)
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003000:	f003 0303 	and.w	r3, r3, #3
 8003004:	2b03      	cmp	r3, #3
 8003006:	d817      	bhi.n	8003038 <UART_SetConfig+0xbc>
 8003008:	a201      	add	r2, pc, #4	@ (adr r2, 8003010 <UART_SetConfig+0x94>)
 800300a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300e:	bf00      	nop
 8003010:	08003021 	.word	0x08003021
 8003014:	0800302d 	.word	0x0800302d
 8003018:	08003033 	.word	0x08003033
 800301c:	08003027 	.word	0x08003027
 8003020:	2301      	movs	r3, #1
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e0b5      	b.n	8003192 <UART_SetConfig+0x216>
 8003026:	2302      	movs	r3, #2
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e0b2      	b.n	8003192 <UART_SetConfig+0x216>
 800302c:	2304      	movs	r3, #4
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e0af      	b.n	8003192 <UART_SetConfig+0x216>
 8003032:	2308      	movs	r3, #8
 8003034:	77fb      	strb	r3, [r7, #31]
 8003036:	e0ac      	b.n	8003192 <UART_SetConfig+0x216>
 8003038:	2310      	movs	r3, #16
 800303a:	77fb      	strb	r3, [r7, #31]
 800303c:	e0a9      	b.n	8003192 <UART_SetConfig+0x216>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a96      	ldr	r2, [pc, #600]	@ (800329c <UART_SetConfig+0x320>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d124      	bne.n	8003092 <UART_SetConfig+0x116>
 8003048:	4b93      	ldr	r3, [pc, #588]	@ (8003298 <UART_SetConfig+0x31c>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003050:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003054:	d011      	beq.n	800307a <UART_SetConfig+0xfe>
 8003056:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800305a:	d817      	bhi.n	800308c <UART_SetConfig+0x110>
 800305c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003060:	d011      	beq.n	8003086 <UART_SetConfig+0x10a>
 8003062:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003066:	d811      	bhi.n	800308c <UART_SetConfig+0x110>
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <UART_SetConfig+0xf8>
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003070:	d006      	beq.n	8003080 <UART_SetConfig+0x104>
 8003072:	e00b      	b.n	800308c <UART_SetConfig+0x110>
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e08b      	b.n	8003192 <UART_SetConfig+0x216>
 800307a:	2302      	movs	r3, #2
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e088      	b.n	8003192 <UART_SetConfig+0x216>
 8003080:	2304      	movs	r3, #4
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e085      	b.n	8003192 <UART_SetConfig+0x216>
 8003086:	2308      	movs	r3, #8
 8003088:	77fb      	strb	r3, [r7, #31]
 800308a:	e082      	b.n	8003192 <UART_SetConfig+0x216>
 800308c:	2310      	movs	r3, #16
 800308e:	77fb      	strb	r3, [r7, #31]
 8003090:	e07f      	b.n	8003192 <UART_SetConfig+0x216>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a82      	ldr	r2, [pc, #520]	@ (80032a0 <UART_SetConfig+0x324>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d124      	bne.n	80030e6 <UART_SetConfig+0x16a>
 800309c:	4b7e      	ldr	r3, [pc, #504]	@ (8003298 <UART_SetConfig+0x31c>)
 800309e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80030a4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030a8:	d011      	beq.n	80030ce <UART_SetConfig+0x152>
 80030aa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80030ae:	d817      	bhi.n	80030e0 <UART_SetConfig+0x164>
 80030b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030b4:	d011      	beq.n	80030da <UART_SetConfig+0x15e>
 80030b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80030ba:	d811      	bhi.n	80030e0 <UART_SetConfig+0x164>
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <UART_SetConfig+0x14c>
 80030c0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80030c4:	d006      	beq.n	80030d4 <UART_SetConfig+0x158>
 80030c6:	e00b      	b.n	80030e0 <UART_SetConfig+0x164>
 80030c8:	2300      	movs	r3, #0
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e061      	b.n	8003192 <UART_SetConfig+0x216>
 80030ce:	2302      	movs	r3, #2
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e05e      	b.n	8003192 <UART_SetConfig+0x216>
 80030d4:	2304      	movs	r3, #4
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e05b      	b.n	8003192 <UART_SetConfig+0x216>
 80030da:	2308      	movs	r3, #8
 80030dc:	77fb      	strb	r3, [r7, #31]
 80030de:	e058      	b.n	8003192 <UART_SetConfig+0x216>
 80030e0:	2310      	movs	r3, #16
 80030e2:	77fb      	strb	r3, [r7, #31]
 80030e4:	e055      	b.n	8003192 <UART_SetConfig+0x216>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a6e      	ldr	r2, [pc, #440]	@ (80032a4 <UART_SetConfig+0x328>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d124      	bne.n	800313a <UART_SetConfig+0x1be>
 80030f0:	4b69      	ldr	r3, [pc, #420]	@ (8003298 <UART_SetConfig+0x31c>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80030f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030fc:	d011      	beq.n	8003122 <UART_SetConfig+0x1a6>
 80030fe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003102:	d817      	bhi.n	8003134 <UART_SetConfig+0x1b8>
 8003104:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003108:	d011      	beq.n	800312e <UART_SetConfig+0x1b2>
 800310a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800310e:	d811      	bhi.n	8003134 <UART_SetConfig+0x1b8>
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <UART_SetConfig+0x1a0>
 8003114:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003118:	d006      	beq.n	8003128 <UART_SetConfig+0x1ac>
 800311a:	e00b      	b.n	8003134 <UART_SetConfig+0x1b8>
 800311c:	2300      	movs	r3, #0
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e037      	b.n	8003192 <UART_SetConfig+0x216>
 8003122:	2302      	movs	r3, #2
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e034      	b.n	8003192 <UART_SetConfig+0x216>
 8003128:	2304      	movs	r3, #4
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e031      	b.n	8003192 <UART_SetConfig+0x216>
 800312e:	2308      	movs	r3, #8
 8003130:	77fb      	strb	r3, [r7, #31]
 8003132:	e02e      	b.n	8003192 <UART_SetConfig+0x216>
 8003134:	2310      	movs	r3, #16
 8003136:	77fb      	strb	r3, [r7, #31]
 8003138:	e02b      	b.n	8003192 <UART_SetConfig+0x216>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5a      	ldr	r2, [pc, #360]	@ (80032a8 <UART_SetConfig+0x32c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d124      	bne.n	800318e <UART_SetConfig+0x212>
 8003144:	4b54      	ldr	r3, [pc, #336]	@ (8003298 <UART_SetConfig+0x31c>)
 8003146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003148:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 800314c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003150:	d011      	beq.n	8003176 <UART_SetConfig+0x1fa>
 8003152:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003156:	d817      	bhi.n	8003188 <UART_SetConfig+0x20c>
 8003158:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800315c:	d011      	beq.n	8003182 <UART_SetConfig+0x206>
 800315e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003162:	d811      	bhi.n	8003188 <UART_SetConfig+0x20c>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <UART_SetConfig+0x1f4>
 8003168:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800316c:	d006      	beq.n	800317c <UART_SetConfig+0x200>
 800316e:	e00b      	b.n	8003188 <UART_SetConfig+0x20c>
 8003170:	2300      	movs	r3, #0
 8003172:	77fb      	strb	r3, [r7, #31]
 8003174:	e00d      	b.n	8003192 <UART_SetConfig+0x216>
 8003176:	2302      	movs	r3, #2
 8003178:	77fb      	strb	r3, [r7, #31]
 800317a:	e00a      	b.n	8003192 <UART_SetConfig+0x216>
 800317c:	2304      	movs	r3, #4
 800317e:	77fb      	strb	r3, [r7, #31]
 8003180:	e007      	b.n	8003192 <UART_SetConfig+0x216>
 8003182:	2308      	movs	r3, #8
 8003184:	77fb      	strb	r3, [r7, #31]
 8003186:	e004      	b.n	8003192 <UART_SetConfig+0x216>
 8003188:	2310      	movs	r3, #16
 800318a:	77fb      	strb	r3, [r7, #31]
 800318c:	e001      	b.n	8003192 <UART_SetConfig+0x216>
 800318e:	2310      	movs	r3, #16
 8003190:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800319a:	d15b      	bne.n	8003254 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800319c:	7ffb      	ldrb	r3, [r7, #31]
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d827      	bhi.n	80031f2 <UART_SetConfig+0x276>
 80031a2:	a201      	add	r2, pc, #4	@ (adr r2, 80031a8 <UART_SetConfig+0x22c>)
 80031a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	080031dd 	.word	0x080031dd
 80031b4:	080031f3 	.word	0x080031f3
 80031b8:	080031e3 	.word	0x080031e3
 80031bc:	080031f3 	.word	0x080031f3
 80031c0:	080031f3 	.word	0x080031f3
 80031c4:	080031f3 	.word	0x080031f3
 80031c8:	080031eb 	.word	0x080031eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031cc:	f7ff fb62 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 80031d0:	61b8      	str	r0, [r7, #24]
        break;
 80031d2:	e013      	b.n	80031fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7ff fb80 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 80031d8:	61b8      	str	r0, [r7, #24]
        break;
 80031da:	e00f      	b.n	80031fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031dc:	4b33      	ldr	r3, [pc, #204]	@ (80032ac <UART_SetConfig+0x330>)
 80031de:	61bb      	str	r3, [r7, #24]
        break;
 80031e0:	e00c      	b.n	80031fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031e2:	f7ff faf7 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80031e6:	61b8      	str	r0, [r7, #24]
        break;
 80031e8:	e008      	b.n	80031fc <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ee:	61bb      	str	r3, [r7, #24]
        break;
 80031f0:	e004      	b.n	80031fc <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	77bb      	strb	r3, [r7, #30]
        break;
 80031fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8082 	beq.w	8003308 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	005a      	lsls	r2, r3, #1
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	085b      	lsrs	r3, r3, #1
 800320e:	441a      	add	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d916      	bls.n	800324e <UART_SetConfig+0x2d2>
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003226:	d212      	bcs.n	800324e <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	b29b      	uxth	r3, r3
 800322c:	f023 030f 	bic.w	r3, r3, #15
 8003230:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	b29b      	uxth	r3, r3
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	b29a      	uxth	r2, r3
 800323e:	89fb      	ldrh	r3, [r7, #14]
 8003240:	4313      	orrs	r3, r2
 8003242:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	89fa      	ldrh	r2, [r7, #14]
 800324a:	60da      	str	r2, [r3, #12]
 800324c:	e05c      	b.n	8003308 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	77bb      	strb	r3, [r7, #30]
 8003252:	e059      	b.n	8003308 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003254:	7ffb      	ldrb	r3, [r7, #31]
 8003256:	2b08      	cmp	r3, #8
 8003258:	d835      	bhi.n	80032c6 <UART_SetConfig+0x34a>
 800325a:	a201      	add	r2, pc, #4	@ (adr r2, 8003260 <UART_SetConfig+0x2e4>)
 800325c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003260:	08003285 	.word	0x08003285
 8003264:	0800328d 	.word	0x0800328d
 8003268:	080032b1 	.word	0x080032b1
 800326c:	080032c7 	.word	0x080032c7
 8003270:	080032b7 	.word	0x080032b7
 8003274:	080032c7 	.word	0x080032c7
 8003278:	080032c7 	.word	0x080032c7
 800327c:	080032c7 	.word	0x080032c7
 8003280:	080032bf 	.word	0x080032bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003284:	f7ff fb06 	bl	8002894 <HAL_RCC_GetPCLK1Freq>
 8003288:	61b8      	str	r0, [r7, #24]
        break;
 800328a:	e021      	b.n	80032d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800328c:	f7ff fb24 	bl	80028d8 <HAL_RCC_GetPCLK2Freq>
 8003290:	61b8      	str	r0, [r7, #24]
        break;
 8003292:	e01d      	b.n	80032d0 <UART_SetConfig+0x354>
 8003294:	40013800 	.word	0x40013800
 8003298:	40021000 	.word	0x40021000
 800329c:	40004400 	.word	0x40004400
 80032a0:	40004800 	.word	0x40004800
 80032a4:	40004c00 	.word	0x40004c00
 80032a8:	40005000 	.word	0x40005000
 80032ac:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <UART_SetConfig+0x3a4>)
 80032b2:	61bb      	str	r3, [r7, #24]
        break;
 80032b4:	e00c      	b.n	80032d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032b6:	f7ff fa8d 	bl	80027d4 <HAL_RCC_GetSysClockFreq>
 80032ba:	61b8      	str	r0, [r7, #24]
        break;
 80032bc:	e008      	b.n	80032d0 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032c2:	61bb      	str	r3, [r7, #24]
        break;
 80032c4:	e004      	b.n	80032d0 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	77bb      	strb	r3, [r7, #30]
        break;
 80032ce:	bf00      	nop
    }

    if (pclk != 0U)
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d018      	beq.n	8003308 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	085a      	lsrs	r2, r3, #1
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	441a      	add	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b0f      	cmp	r3, #15
 80032ee:	d909      	bls.n	8003304 <UART_SetConfig+0x388>
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032f6:	d205      	bcs.n	8003304 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	e001      	b.n	8003308 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003314:	7fbb      	ldrb	r3, [r7, #30]
}
 8003316:	4618      	mov	r0, r3
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	007a1200 	.word	0x007a1200

08003324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d00a      	beq.n	8003392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	430a      	orrs	r2, r1
 8003390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b00      	cmp	r3, #0
 800339c:	d00a      	beq.n	80033b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	430a      	orrs	r2, r1
 80033b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d00a      	beq.n	80033d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	430a      	orrs	r2, r1
 80033d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00a      	beq.n	80033f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d01a      	beq.n	800343a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003422:	d10a      	bne.n	800343a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00a      	beq.n	800345c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	605a      	str	r2, [r3, #4]
  }
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b098      	sub	sp, #96	@ 0x60
 800346c:	af02      	add	r7, sp, #8
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003478:	f7fd fb98 	bl	8000bac <HAL_GetTick>
 800347c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b08      	cmp	r3, #8
 800348a:	d12e      	bne.n	80034ea <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800348c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003494:	2200      	movs	r2, #0
 8003496:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f88c 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d021      	beq.n	80034ea <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80034b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80034ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80034c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80034ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80034d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e6      	bne.n	80034a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2220      	movs	r2, #32
 80034dc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e062      	b.n	80035b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0304 	and.w	r3, r3, #4
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d149      	bne.n	800358c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003500:	2200      	movs	r2, #0
 8003502:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f856 	bl	80035b8 <UART_WaitOnFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d03c      	beq.n	800358c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	623b      	str	r3, [r7, #32]
   return(result);
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003526:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003530:	633b      	str	r3, [r7, #48]	@ 0x30
 8003532:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800353e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e6      	bne.n	8003512 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	3308      	adds	r3, #8
 800354a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	e853 3f00 	ldrex	r3, [r3]
 8003552:	60fb      	str	r3, [r7, #12]
   return(result);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3308      	adds	r3, #8
 8003562:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003564:	61fa      	str	r2, [r7, #28]
 8003566:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003568:	69b9      	ldr	r1, [r7, #24]
 800356a:	69fa      	ldr	r2, [r7, #28]
 800356c:	e841 2300 	strex	r3, r2, [r1]
 8003570:	617b      	str	r3, [r7, #20]
   return(result);
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1e5      	bne.n	8003544 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e011      	b.n	80035b0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2220      	movs	r2, #32
 8003590:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2220      	movs	r2, #32
 8003596:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3758      	adds	r7, #88	@ 0x58
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035c8:	e04f      	b.n	800366a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d04b      	beq.n	800366a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d2:	f7fd faeb 	bl	8000bac <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e04e      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d037      	beq.n	800366a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	2b80      	cmp	r3, #128	@ 0x80
 80035fe:	d034      	beq.n	800366a <UART_WaitOnFlagUntilTimeout+0xb2>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b40      	cmp	r3, #64	@ 0x40
 8003604:	d031      	beq.n	800366a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	f003 0308 	and.w	r3, r3, #8
 8003610:	2b08      	cmp	r3, #8
 8003612:	d110      	bne.n	8003636 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2208      	movs	r2, #8
 800361a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 f838 	bl	8003692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2208      	movs	r2, #8
 8003626:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e029      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003644:	d111      	bne.n	800366a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800364e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f000 f81e 	bl	8003692 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e00f      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	69da      	ldr	r2, [r3, #28]
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4013      	ands	r3, r2
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	429a      	cmp	r2, r3
 8003678:	bf0c      	ite	eq
 800367a:	2301      	moveq	r3, #1
 800367c:	2300      	movne	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	461a      	mov	r2, r3
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	429a      	cmp	r2, r3
 8003686:	d0a0      	beq.n	80035ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003692:	b480      	push	{r7}
 8003694:	b095      	sub	sp, #84	@ 0x54
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a2:	e853 3f00 	ldrex	r3, [r3]
 80036a6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80036ba:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036bc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036be:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036c0:	e841 2300 	strex	r3, r2, [r1]
 80036c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1e6      	bne.n	800369a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3308      	adds	r3, #8
 80036d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	e853 3f00 	ldrex	r3, [r3]
 80036da:	61fb      	str	r3, [r7, #28]
   return(result);
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f023 0301 	bic.w	r3, r3, #1
 80036e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	3308      	adds	r3, #8
 80036ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036ec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036f4:	e841 2300 	strex	r3, r2, [r1]
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003704:	2b01      	cmp	r3, #1
 8003706:	d118      	bne.n	800373a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	e853 3f00 	ldrex	r3, [r3]
 8003714:	60bb      	str	r3, [r7, #8]
   return(result);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f023 0310 	bic.w	r3, r3, #16
 800371c:	647b      	str	r3, [r7, #68]	@ 0x44
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	461a      	mov	r2, r3
 8003724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003726:	61bb      	str	r3, [r7, #24]
 8003728:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372a:	6979      	ldr	r1, [r7, #20]
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	e841 2300 	strex	r3, r2, [r1]
 8003732:	613b      	str	r3, [r7, #16]
   return(result);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1e6      	bne.n	8003708 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2220      	movs	r2, #32
 800373e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800374e:	bf00      	nop
 8003750:	3754      	adds	r7, #84	@ 0x54
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800375a:	b480      	push	{r7}
 800375c:	b085      	sub	sp, #20
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003762:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003766:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800376e:	b29a      	uxth	r2, r3
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	b29b      	uxth	r3, r3
 8003774:	43db      	mvns	r3, r3
 8003776:	b29b      	uxth	r3, r3
 8003778:	4013      	ands	r3, r2
 800377a:	b29a      	uxth	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	1d3b      	adds	r3, r7, #4
 800379a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3714      	adds	r7, #20
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <std>:
 80037cc:	2300      	movs	r3, #0
 80037ce:	b510      	push	{r4, lr}
 80037d0:	4604      	mov	r4, r0
 80037d2:	e9c0 3300 	strd	r3, r3, [r0]
 80037d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80037da:	6083      	str	r3, [r0, #8]
 80037dc:	8181      	strh	r1, [r0, #12]
 80037de:	6643      	str	r3, [r0, #100]	@ 0x64
 80037e0:	81c2      	strh	r2, [r0, #14]
 80037e2:	6183      	str	r3, [r0, #24]
 80037e4:	4619      	mov	r1, r3
 80037e6:	2208      	movs	r2, #8
 80037e8:	305c      	adds	r0, #92	@ 0x5c
 80037ea:	f000 f9f9 	bl	8003be0 <memset>
 80037ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <std+0x58>)
 80037f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80037f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003828 <std+0x5c>)
 80037f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80037f6:	4b0d      	ldr	r3, [pc, #52]	@ (800382c <std+0x60>)
 80037f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80037fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003830 <std+0x64>)
 80037fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80037fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <std+0x68>)
 8003800:	6224      	str	r4, [r4, #32]
 8003802:	429c      	cmp	r4, r3
 8003804:	d006      	beq.n	8003814 <std+0x48>
 8003806:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800380a:	4294      	cmp	r4, r2
 800380c:	d002      	beq.n	8003814 <std+0x48>
 800380e:	33d0      	adds	r3, #208	@ 0xd0
 8003810:	429c      	cmp	r4, r3
 8003812:	d105      	bne.n	8003820 <std+0x54>
 8003814:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800381c:	f000 ba58 	b.w	8003cd0 <__retarget_lock_init_recursive>
 8003820:	bd10      	pop	{r4, pc}
 8003822:	bf00      	nop
 8003824:	08003a31 	.word	0x08003a31
 8003828:	08003a53 	.word	0x08003a53
 800382c:	08003a8b 	.word	0x08003a8b
 8003830:	08003aaf 	.word	0x08003aaf
 8003834:	200004a0 	.word	0x200004a0

08003838 <stdio_exit_handler>:
 8003838:	4a02      	ldr	r2, [pc, #8]	@ (8003844 <stdio_exit_handler+0xc>)
 800383a:	4903      	ldr	r1, [pc, #12]	@ (8003848 <stdio_exit_handler+0x10>)
 800383c:	4803      	ldr	r0, [pc, #12]	@ (800384c <stdio_exit_handler+0x14>)
 800383e:	f000 b869 	b.w	8003914 <_fwalk_sglue>
 8003842:	bf00      	nop
 8003844:	2000000c 	.word	0x2000000c
 8003848:	0800456d 	.word	0x0800456d
 800384c:	2000001c 	.word	0x2000001c

08003850 <cleanup_stdio>:
 8003850:	6841      	ldr	r1, [r0, #4]
 8003852:	4b0c      	ldr	r3, [pc, #48]	@ (8003884 <cleanup_stdio+0x34>)
 8003854:	4299      	cmp	r1, r3
 8003856:	b510      	push	{r4, lr}
 8003858:	4604      	mov	r4, r0
 800385a:	d001      	beq.n	8003860 <cleanup_stdio+0x10>
 800385c:	f000 fe86 	bl	800456c <_fflush_r>
 8003860:	68a1      	ldr	r1, [r4, #8]
 8003862:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <cleanup_stdio+0x38>)
 8003864:	4299      	cmp	r1, r3
 8003866:	d002      	beq.n	800386e <cleanup_stdio+0x1e>
 8003868:	4620      	mov	r0, r4
 800386a:	f000 fe7f 	bl	800456c <_fflush_r>
 800386e:	68e1      	ldr	r1, [r4, #12]
 8003870:	4b06      	ldr	r3, [pc, #24]	@ (800388c <cleanup_stdio+0x3c>)
 8003872:	4299      	cmp	r1, r3
 8003874:	d004      	beq.n	8003880 <cleanup_stdio+0x30>
 8003876:	4620      	mov	r0, r4
 8003878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800387c:	f000 be76 	b.w	800456c <_fflush_r>
 8003880:	bd10      	pop	{r4, pc}
 8003882:	bf00      	nop
 8003884:	200004a0 	.word	0x200004a0
 8003888:	20000508 	.word	0x20000508
 800388c:	20000570 	.word	0x20000570

08003890 <global_stdio_init.part.0>:
 8003890:	b510      	push	{r4, lr}
 8003892:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <global_stdio_init.part.0+0x30>)
 8003894:	4c0b      	ldr	r4, [pc, #44]	@ (80038c4 <global_stdio_init.part.0+0x34>)
 8003896:	4a0c      	ldr	r2, [pc, #48]	@ (80038c8 <global_stdio_init.part.0+0x38>)
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	4620      	mov	r0, r4
 800389c:	2200      	movs	r2, #0
 800389e:	2104      	movs	r1, #4
 80038a0:	f7ff ff94 	bl	80037cc <std>
 80038a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80038a8:	2201      	movs	r2, #1
 80038aa:	2109      	movs	r1, #9
 80038ac:	f7ff ff8e 	bl	80037cc <std>
 80038b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80038b4:	2202      	movs	r2, #2
 80038b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038ba:	2112      	movs	r1, #18
 80038bc:	f7ff bf86 	b.w	80037cc <std>
 80038c0:	200005d8 	.word	0x200005d8
 80038c4:	200004a0 	.word	0x200004a0
 80038c8:	08003839 	.word	0x08003839

080038cc <__sfp_lock_acquire>:
 80038cc:	4801      	ldr	r0, [pc, #4]	@ (80038d4 <__sfp_lock_acquire+0x8>)
 80038ce:	f000 ba00 	b.w	8003cd2 <__retarget_lock_acquire_recursive>
 80038d2:	bf00      	nop
 80038d4:	200005e1 	.word	0x200005e1

080038d8 <__sfp_lock_release>:
 80038d8:	4801      	ldr	r0, [pc, #4]	@ (80038e0 <__sfp_lock_release+0x8>)
 80038da:	f000 b9fb 	b.w	8003cd4 <__retarget_lock_release_recursive>
 80038de:	bf00      	nop
 80038e0:	200005e1 	.word	0x200005e1

080038e4 <__sinit>:
 80038e4:	b510      	push	{r4, lr}
 80038e6:	4604      	mov	r4, r0
 80038e8:	f7ff fff0 	bl	80038cc <__sfp_lock_acquire>
 80038ec:	6a23      	ldr	r3, [r4, #32]
 80038ee:	b11b      	cbz	r3, 80038f8 <__sinit+0x14>
 80038f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038f4:	f7ff bff0 	b.w	80038d8 <__sfp_lock_release>
 80038f8:	4b04      	ldr	r3, [pc, #16]	@ (800390c <__sinit+0x28>)
 80038fa:	6223      	str	r3, [r4, #32]
 80038fc:	4b04      	ldr	r3, [pc, #16]	@ (8003910 <__sinit+0x2c>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f5      	bne.n	80038f0 <__sinit+0xc>
 8003904:	f7ff ffc4 	bl	8003890 <global_stdio_init.part.0>
 8003908:	e7f2      	b.n	80038f0 <__sinit+0xc>
 800390a:	bf00      	nop
 800390c:	08003851 	.word	0x08003851
 8003910:	200005d8 	.word	0x200005d8

08003914 <_fwalk_sglue>:
 8003914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003918:	4607      	mov	r7, r0
 800391a:	4688      	mov	r8, r1
 800391c:	4614      	mov	r4, r2
 800391e:	2600      	movs	r6, #0
 8003920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003924:	f1b9 0901 	subs.w	r9, r9, #1
 8003928:	d505      	bpl.n	8003936 <_fwalk_sglue+0x22>
 800392a:	6824      	ldr	r4, [r4, #0]
 800392c:	2c00      	cmp	r4, #0
 800392e:	d1f7      	bne.n	8003920 <_fwalk_sglue+0xc>
 8003930:	4630      	mov	r0, r6
 8003932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003936:	89ab      	ldrh	r3, [r5, #12]
 8003938:	2b01      	cmp	r3, #1
 800393a:	d907      	bls.n	800394c <_fwalk_sglue+0x38>
 800393c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003940:	3301      	adds	r3, #1
 8003942:	d003      	beq.n	800394c <_fwalk_sglue+0x38>
 8003944:	4629      	mov	r1, r5
 8003946:	4638      	mov	r0, r7
 8003948:	47c0      	blx	r8
 800394a:	4306      	orrs	r6, r0
 800394c:	3568      	adds	r5, #104	@ 0x68
 800394e:	e7e9      	b.n	8003924 <_fwalk_sglue+0x10>

08003950 <iprintf>:
 8003950:	b40f      	push	{r0, r1, r2, r3}
 8003952:	b507      	push	{r0, r1, r2, lr}
 8003954:	4906      	ldr	r1, [pc, #24]	@ (8003970 <iprintf+0x20>)
 8003956:	ab04      	add	r3, sp, #16
 8003958:	6808      	ldr	r0, [r1, #0]
 800395a:	f853 2b04 	ldr.w	r2, [r3], #4
 800395e:	6881      	ldr	r1, [r0, #8]
 8003960:	9301      	str	r3, [sp, #4]
 8003962:	f000 fadb 	bl	8003f1c <_vfiprintf_r>
 8003966:	b003      	add	sp, #12
 8003968:	f85d eb04 	ldr.w	lr, [sp], #4
 800396c:	b004      	add	sp, #16
 800396e:	4770      	bx	lr
 8003970:	20000018 	.word	0x20000018

08003974 <_puts_r>:
 8003974:	6a03      	ldr	r3, [r0, #32]
 8003976:	b570      	push	{r4, r5, r6, lr}
 8003978:	6884      	ldr	r4, [r0, #8]
 800397a:	4605      	mov	r5, r0
 800397c:	460e      	mov	r6, r1
 800397e:	b90b      	cbnz	r3, 8003984 <_puts_r+0x10>
 8003980:	f7ff ffb0 	bl	80038e4 <__sinit>
 8003984:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003986:	07db      	lsls	r3, r3, #31
 8003988:	d405      	bmi.n	8003996 <_puts_r+0x22>
 800398a:	89a3      	ldrh	r3, [r4, #12]
 800398c:	0598      	lsls	r0, r3, #22
 800398e:	d402      	bmi.n	8003996 <_puts_r+0x22>
 8003990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003992:	f000 f99e 	bl	8003cd2 <__retarget_lock_acquire_recursive>
 8003996:	89a3      	ldrh	r3, [r4, #12]
 8003998:	0719      	lsls	r1, r3, #28
 800399a:	d502      	bpl.n	80039a2 <_puts_r+0x2e>
 800399c:	6923      	ldr	r3, [r4, #16]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d135      	bne.n	8003a0e <_puts_r+0x9a>
 80039a2:	4621      	mov	r1, r4
 80039a4:	4628      	mov	r0, r5
 80039a6:	f000 f8c5 	bl	8003b34 <__swsetup_r>
 80039aa:	b380      	cbz	r0, 8003a0e <_puts_r+0x9a>
 80039ac:	f04f 35ff 	mov.w	r5, #4294967295
 80039b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80039b2:	07da      	lsls	r2, r3, #31
 80039b4:	d405      	bmi.n	80039c2 <_puts_r+0x4e>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	059b      	lsls	r3, r3, #22
 80039ba:	d402      	bmi.n	80039c2 <_puts_r+0x4e>
 80039bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80039be:	f000 f989 	bl	8003cd4 <__retarget_lock_release_recursive>
 80039c2:	4628      	mov	r0, r5
 80039c4:	bd70      	pop	{r4, r5, r6, pc}
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	da04      	bge.n	80039d4 <_puts_r+0x60>
 80039ca:	69a2      	ldr	r2, [r4, #24]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	dc17      	bgt.n	8003a00 <_puts_r+0x8c>
 80039d0:	290a      	cmp	r1, #10
 80039d2:	d015      	beq.n	8003a00 <_puts_r+0x8c>
 80039d4:	6823      	ldr	r3, [r4, #0]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	6022      	str	r2, [r4, #0]
 80039da:	7019      	strb	r1, [r3, #0]
 80039dc:	68a3      	ldr	r3, [r4, #8]
 80039de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80039e2:	3b01      	subs	r3, #1
 80039e4:	60a3      	str	r3, [r4, #8]
 80039e6:	2900      	cmp	r1, #0
 80039e8:	d1ed      	bne.n	80039c6 <_puts_r+0x52>
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	da11      	bge.n	8003a12 <_puts_r+0x9e>
 80039ee:	4622      	mov	r2, r4
 80039f0:	210a      	movs	r1, #10
 80039f2:	4628      	mov	r0, r5
 80039f4:	f000 f85f 	bl	8003ab6 <__swbuf_r>
 80039f8:	3001      	adds	r0, #1
 80039fa:	d0d7      	beq.n	80039ac <_puts_r+0x38>
 80039fc:	250a      	movs	r5, #10
 80039fe:	e7d7      	b.n	80039b0 <_puts_r+0x3c>
 8003a00:	4622      	mov	r2, r4
 8003a02:	4628      	mov	r0, r5
 8003a04:	f000 f857 	bl	8003ab6 <__swbuf_r>
 8003a08:	3001      	adds	r0, #1
 8003a0a:	d1e7      	bne.n	80039dc <_puts_r+0x68>
 8003a0c:	e7ce      	b.n	80039ac <_puts_r+0x38>
 8003a0e:	3e01      	subs	r6, #1
 8003a10:	e7e4      	b.n	80039dc <_puts_r+0x68>
 8003a12:	6823      	ldr	r3, [r4, #0]
 8003a14:	1c5a      	adds	r2, r3, #1
 8003a16:	6022      	str	r2, [r4, #0]
 8003a18:	220a      	movs	r2, #10
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	e7ee      	b.n	80039fc <_puts_r+0x88>
	...

08003a20 <puts>:
 8003a20:	4b02      	ldr	r3, [pc, #8]	@ (8003a2c <puts+0xc>)
 8003a22:	4601      	mov	r1, r0
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	f7ff bfa5 	b.w	8003974 <_puts_r>
 8003a2a:	bf00      	nop
 8003a2c:	20000018 	.word	0x20000018

08003a30 <__sread>:
 8003a30:	b510      	push	{r4, lr}
 8003a32:	460c      	mov	r4, r1
 8003a34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a38:	f000 f8fc 	bl	8003c34 <_read_r>
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	bfab      	itete	ge
 8003a40:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003a42:	89a3      	ldrhlt	r3, [r4, #12]
 8003a44:	181b      	addge	r3, r3, r0
 8003a46:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003a4a:	bfac      	ite	ge
 8003a4c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003a4e:	81a3      	strhlt	r3, [r4, #12]
 8003a50:	bd10      	pop	{r4, pc}

08003a52 <__swrite>:
 8003a52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a56:	461f      	mov	r7, r3
 8003a58:	898b      	ldrh	r3, [r1, #12]
 8003a5a:	05db      	lsls	r3, r3, #23
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	4616      	mov	r6, r2
 8003a62:	d505      	bpl.n	8003a70 <__swrite+0x1e>
 8003a64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a68:	2302      	movs	r3, #2
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f000 f8d0 	bl	8003c10 <_lseek_r>
 8003a70:	89a3      	ldrh	r3, [r4, #12]
 8003a72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a76:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a7a:	81a3      	strh	r3, [r4, #12]
 8003a7c:	4632      	mov	r2, r6
 8003a7e:	463b      	mov	r3, r7
 8003a80:	4628      	mov	r0, r5
 8003a82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a86:	f000 b8e7 	b.w	8003c58 <_write_r>

08003a8a <__sseek>:
 8003a8a:	b510      	push	{r4, lr}
 8003a8c:	460c      	mov	r4, r1
 8003a8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a92:	f000 f8bd 	bl	8003c10 <_lseek_r>
 8003a96:	1c43      	adds	r3, r0, #1
 8003a98:	89a3      	ldrh	r3, [r4, #12]
 8003a9a:	bf15      	itete	ne
 8003a9c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a9e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003aa2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003aa6:	81a3      	strheq	r3, [r4, #12]
 8003aa8:	bf18      	it	ne
 8003aaa:	81a3      	strhne	r3, [r4, #12]
 8003aac:	bd10      	pop	{r4, pc}

08003aae <__sclose>:
 8003aae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ab2:	f000 b89d 	b.w	8003bf0 <_close_r>

08003ab6 <__swbuf_r>:
 8003ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ab8:	460e      	mov	r6, r1
 8003aba:	4614      	mov	r4, r2
 8003abc:	4605      	mov	r5, r0
 8003abe:	b118      	cbz	r0, 8003ac8 <__swbuf_r+0x12>
 8003ac0:	6a03      	ldr	r3, [r0, #32]
 8003ac2:	b90b      	cbnz	r3, 8003ac8 <__swbuf_r+0x12>
 8003ac4:	f7ff ff0e 	bl	80038e4 <__sinit>
 8003ac8:	69a3      	ldr	r3, [r4, #24]
 8003aca:	60a3      	str	r3, [r4, #8]
 8003acc:	89a3      	ldrh	r3, [r4, #12]
 8003ace:	071a      	lsls	r2, r3, #28
 8003ad0:	d501      	bpl.n	8003ad6 <__swbuf_r+0x20>
 8003ad2:	6923      	ldr	r3, [r4, #16]
 8003ad4:	b943      	cbnz	r3, 8003ae8 <__swbuf_r+0x32>
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	4628      	mov	r0, r5
 8003ada:	f000 f82b 	bl	8003b34 <__swsetup_r>
 8003ade:	b118      	cbz	r0, 8003ae8 <__swbuf_r+0x32>
 8003ae0:	f04f 37ff 	mov.w	r7, #4294967295
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	6922      	ldr	r2, [r4, #16]
 8003aec:	1a98      	subs	r0, r3, r2
 8003aee:	6963      	ldr	r3, [r4, #20]
 8003af0:	b2f6      	uxtb	r6, r6
 8003af2:	4283      	cmp	r3, r0
 8003af4:	4637      	mov	r7, r6
 8003af6:	dc05      	bgt.n	8003b04 <__swbuf_r+0x4e>
 8003af8:	4621      	mov	r1, r4
 8003afa:	4628      	mov	r0, r5
 8003afc:	f000 fd36 	bl	800456c <_fflush_r>
 8003b00:	2800      	cmp	r0, #0
 8003b02:	d1ed      	bne.n	8003ae0 <__swbuf_r+0x2a>
 8003b04:	68a3      	ldr	r3, [r4, #8]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	60a3      	str	r3, [r4, #8]
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	1c5a      	adds	r2, r3, #1
 8003b0e:	6022      	str	r2, [r4, #0]
 8003b10:	701e      	strb	r6, [r3, #0]
 8003b12:	6962      	ldr	r2, [r4, #20]
 8003b14:	1c43      	adds	r3, r0, #1
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d004      	beq.n	8003b24 <__swbuf_r+0x6e>
 8003b1a:	89a3      	ldrh	r3, [r4, #12]
 8003b1c:	07db      	lsls	r3, r3, #31
 8003b1e:	d5e1      	bpl.n	8003ae4 <__swbuf_r+0x2e>
 8003b20:	2e0a      	cmp	r6, #10
 8003b22:	d1df      	bne.n	8003ae4 <__swbuf_r+0x2e>
 8003b24:	4621      	mov	r1, r4
 8003b26:	4628      	mov	r0, r5
 8003b28:	f000 fd20 	bl	800456c <_fflush_r>
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d0d9      	beq.n	8003ae4 <__swbuf_r+0x2e>
 8003b30:	e7d6      	b.n	8003ae0 <__swbuf_r+0x2a>
	...

08003b34 <__swsetup_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	4b29      	ldr	r3, [pc, #164]	@ (8003bdc <__swsetup_r+0xa8>)
 8003b38:	4605      	mov	r5, r0
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	460c      	mov	r4, r1
 8003b3e:	b118      	cbz	r0, 8003b48 <__swsetup_r+0x14>
 8003b40:	6a03      	ldr	r3, [r0, #32]
 8003b42:	b90b      	cbnz	r3, 8003b48 <__swsetup_r+0x14>
 8003b44:	f7ff fece 	bl	80038e4 <__sinit>
 8003b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b4c:	0719      	lsls	r1, r3, #28
 8003b4e:	d422      	bmi.n	8003b96 <__swsetup_r+0x62>
 8003b50:	06da      	lsls	r2, r3, #27
 8003b52:	d407      	bmi.n	8003b64 <__swsetup_r+0x30>
 8003b54:	2209      	movs	r2, #9
 8003b56:	602a      	str	r2, [r5, #0]
 8003b58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b5c:	81a3      	strh	r3, [r4, #12]
 8003b5e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b62:	e033      	b.n	8003bcc <__swsetup_r+0x98>
 8003b64:	0758      	lsls	r0, r3, #29
 8003b66:	d512      	bpl.n	8003b8e <__swsetup_r+0x5a>
 8003b68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b6a:	b141      	cbz	r1, 8003b7e <__swsetup_r+0x4a>
 8003b6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b70:	4299      	cmp	r1, r3
 8003b72:	d002      	beq.n	8003b7a <__swsetup_r+0x46>
 8003b74:	4628      	mov	r0, r5
 8003b76:	f000 f8af 	bl	8003cd8 <_free_r>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b7e:	89a3      	ldrh	r3, [r4, #12]
 8003b80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b84:	81a3      	strh	r3, [r4, #12]
 8003b86:	2300      	movs	r3, #0
 8003b88:	6063      	str	r3, [r4, #4]
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f043 0308 	orr.w	r3, r3, #8
 8003b94:	81a3      	strh	r3, [r4, #12]
 8003b96:	6923      	ldr	r3, [r4, #16]
 8003b98:	b94b      	cbnz	r3, 8003bae <__swsetup_r+0x7a>
 8003b9a:	89a3      	ldrh	r3, [r4, #12]
 8003b9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ba0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba4:	d003      	beq.n	8003bae <__swsetup_r+0x7a>
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f000 fd2d 	bl	8004608 <__smakebuf_r>
 8003bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bb2:	f013 0201 	ands.w	r2, r3, #1
 8003bb6:	d00a      	beq.n	8003bce <__swsetup_r+0x9a>
 8003bb8:	2200      	movs	r2, #0
 8003bba:	60a2      	str	r2, [r4, #8]
 8003bbc:	6962      	ldr	r2, [r4, #20]
 8003bbe:	4252      	negs	r2, r2
 8003bc0:	61a2      	str	r2, [r4, #24]
 8003bc2:	6922      	ldr	r2, [r4, #16]
 8003bc4:	b942      	cbnz	r2, 8003bd8 <__swsetup_r+0xa4>
 8003bc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003bca:	d1c5      	bne.n	8003b58 <__swsetup_r+0x24>
 8003bcc:	bd38      	pop	{r3, r4, r5, pc}
 8003bce:	0799      	lsls	r1, r3, #30
 8003bd0:	bf58      	it	pl
 8003bd2:	6962      	ldrpl	r2, [r4, #20]
 8003bd4:	60a2      	str	r2, [r4, #8]
 8003bd6:	e7f4      	b.n	8003bc2 <__swsetup_r+0x8e>
 8003bd8:	2000      	movs	r0, #0
 8003bda:	e7f7      	b.n	8003bcc <__swsetup_r+0x98>
 8003bdc:	20000018 	.word	0x20000018

08003be0 <memset>:
 8003be0:	4402      	add	r2, r0
 8003be2:	4603      	mov	r3, r0
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d100      	bne.n	8003bea <memset+0xa>
 8003be8:	4770      	bx	lr
 8003bea:	f803 1b01 	strb.w	r1, [r3], #1
 8003bee:	e7f9      	b.n	8003be4 <memset+0x4>

08003bf0 <_close_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4d06      	ldr	r5, [pc, #24]	@ (8003c0c <_close_r+0x1c>)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	f7fc fed6 	bl	80009ac <_close>
 8003c00:	1c43      	adds	r3, r0, #1
 8003c02:	d102      	bne.n	8003c0a <_close_r+0x1a>
 8003c04:	682b      	ldr	r3, [r5, #0]
 8003c06:	b103      	cbz	r3, 8003c0a <_close_r+0x1a>
 8003c08:	6023      	str	r3, [r4, #0]
 8003c0a:	bd38      	pop	{r3, r4, r5, pc}
 8003c0c:	200005dc 	.word	0x200005dc

08003c10 <_lseek_r>:
 8003c10:	b538      	push	{r3, r4, r5, lr}
 8003c12:	4d07      	ldr	r5, [pc, #28]	@ (8003c30 <_lseek_r+0x20>)
 8003c14:	4604      	mov	r4, r0
 8003c16:	4608      	mov	r0, r1
 8003c18:	4611      	mov	r1, r2
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	602a      	str	r2, [r5, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	f7fc feeb 	bl	80009fa <_lseek>
 8003c24:	1c43      	adds	r3, r0, #1
 8003c26:	d102      	bne.n	8003c2e <_lseek_r+0x1e>
 8003c28:	682b      	ldr	r3, [r5, #0]
 8003c2a:	b103      	cbz	r3, 8003c2e <_lseek_r+0x1e>
 8003c2c:	6023      	str	r3, [r4, #0]
 8003c2e:	bd38      	pop	{r3, r4, r5, pc}
 8003c30:	200005dc 	.word	0x200005dc

08003c34 <_read_r>:
 8003c34:	b538      	push	{r3, r4, r5, lr}
 8003c36:	4d07      	ldr	r5, [pc, #28]	@ (8003c54 <_read_r+0x20>)
 8003c38:	4604      	mov	r4, r0
 8003c3a:	4608      	mov	r0, r1
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	2200      	movs	r2, #0
 8003c40:	602a      	str	r2, [r5, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	f7fc fe95 	bl	8000972 <_read>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d102      	bne.n	8003c52 <_read_r+0x1e>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	b103      	cbz	r3, 8003c52 <_read_r+0x1e>
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	200005dc 	.word	0x200005dc

08003c58 <_write_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4d07      	ldr	r5, [pc, #28]	@ (8003c78 <_write_r+0x20>)
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	4608      	mov	r0, r1
 8003c60:	4611      	mov	r1, r2
 8003c62:	2200      	movs	r2, #0
 8003c64:	602a      	str	r2, [r5, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f7fc fb02 	bl	8000270 <_write>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d102      	bne.n	8003c76 <_write_r+0x1e>
 8003c70:	682b      	ldr	r3, [r5, #0]
 8003c72:	b103      	cbz	r3, 8003c76 <_write_r+0x1e>
 8003c74:	6023      	str	r3, [r4, #0]
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	200005dc 	.word	0x200005dc

08003c7c <__errno>:
 8003c7c:	4b01      	ldr	r3, [pc, #4]	@ (8003c84 <__errno+0x8>)
 8003c7e:	6818      	ldr	r0, [r3, #0]
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000018 	.word	0x20000018

08003c88 <__libc_init_array>:
 8003c88:	b570      	push	{r4, r5, r6, lr}
 8003c8a:	4d0d      	ldr	r5, [pc, #52]	@ (8003cc0 <__libc_init_array+0x38>)
 8003c8c:	4c0d      	ldr	r4, [pc, #52]	@ (8003cc4 <__libc_init_array+0x3c>)
 8003c8e:	1b64      	subs	r4, r4, r5
 8003c90:	10a4      	asrs	r4, r4, #2
 8003c92:	2600      	movs	r6, #0
 8003c94:	42a6      	cmp	r6, r4
 8003c96:	d109      	bne.n	8003cac <__libc_init_array+0x24>
 8003c98:	4d0b      	ldr	r5, [pc, #44]	@ (8003cc8 <__libc_init_array+0x40>)
 8003c9a:	4c0c      	ldr	r4, [pc, #48]	@ (8003ccc <__libc_init_array+0x44>)
 8003c9c:	f000 fd22 	bl	80046e4 <_init>
 8003ca0:	1b64      	subs	r4, r4, r5
 8003ca2:	10a4      	asrs	r4, r4, #2
 8003ca4:	2600      	movs	r6, #0
 8003ca6:	42a6      	cmp	r6, r4
 8003ca8:	d105      	bne.n	8003cb6 <__libc_init_array+0x2e>
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cb0:	4798      	blx	r3
 8003cb2:	3601      	adds	r6, #1
 8003cb4:	e7ee      	b.n	8003c94 <__libc_init_array+0xc>
 8003cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cba:	4798      	blx	r3
 8003cbc:	3601      	adds	r6, #1
 8003cbe:	e7f2      	b.n	8003ca6 <__libc_init_array+0x1e>
 8003cc0:	08004798 	.word	0x08004798
 8003cc4:	08004798 	.word	0x08004798
 8003cc8:	08004798 	.word	0x08004798
 8003ccc:	0800479c 	.word	0x0800479c

08003cd0 <__retarget_lock_init_recursive>:
 8003cd0:	4770      	bx	lr

08003cd2 <__retarget_lock_acquire_recursive>:
 8003cd2:	4770      	bx	lr

08003cd4 <__retarget_lock_release_recursive>:
 8003cd4:	4770      	bx	lr
	...

08003cd8 <_free_r>:
 8003cd8:	b538      	push	{r3, r4, r5, lr}
 8003cda:	4605      	mov	r5, r0
 8003cdc:	2900      	cmp	r1, #0
 8003cde:	d041      	beq.n	8003d64 <_free_r+0x8c>
 8003ce0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ce4:	1f0c      	subs	r4, r1, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bfb8      	it	lt
 8003cea:	18e4      	addlt	r4, r4, r3
 8003cec:	f000 f8e0 	bl	8003eb0 <__malloc_lock>
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d68 <_free_r+0x90>)
 8003cf2:	6813      	ldr	r3, [r2, #0]
 8003cf4:	b933      	cbnz	r3, 8003d04 <_free_r+0x2c>
 8003cf6:	6063      	str	r3, [r4, #4]
 8003cf8:	6014      	str	r4, [r2, #0]
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d00:	f000 b8dc 	b.w	8003ebc <__malloc_unlock>
 8003d04:	42a3      	cmp	r3, r4
 8003d06:	d908      	bls.n	8003d1a <_free_r+0x42>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	1821      	adds	r1, r4, r0
 8003d0c:	428b      	cmp	r3, r1
 8003d0e:	bf01      	itttt	eq
 8003d10:	6819      	ldreq	r1, [r3, #0]
 8003d12:	685b      	ldreq	r3, [r3, #4]
 8003d14:	1809      	addeq	r1, r1, r0
 8003d16:	6021      	streq	r1, [r4, #0]
 8003d18:	e7ed      	b.n	8003cf6 <_free_r+0x1e>
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	b10b      	cbz	r3, 8003d24 <_free_r+0x4c>
 8003d20:	42a3      	cmp	r3, r4
 8003d22:	d9fa      	bls.n	8003d1a <_free_r+0x42>
 8003d24:	6811      	ldr	r1, [r2, #0]
 8003d26:	1850      	adds	r0, r2, r1
 8003d28:	42a0      	cmp	r0, r4
 8003d2a:	d10b      	bne.n	8003d44 <_free_r+0x6c>
 8003d2c:	6820      	ldr	r0, [r4, #0]
 8003d2e:	4401      	add	r1, r0
 8003d30:	1850      	adds	r0, r2, r1
 8003d32:	4283      	cmp	r3, r0
 8003d34:	6011      	str	r1, [r2, #0]
 8003d36:	d1e0      	bne.n	8003cfa <_free_r+0x22>
 8003d38:	6818      	ldr	r0, [r3, #0]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	6053      	str	r3, [r2, #4]
 8003d3e:	4408      	add	r0, r1
 8003d40:	6010      	str	r0, [r2, #0]
 8003d42:	e7da      	b.n	8003cfa <_free_r+0x22>
 8003d44:	d902      	bls.n	8003d4c <_free_r+0x74>
 8003d46:	230c      	movs	r3, #12
 8003d48:	602b      	str	r3, [r5, #0]
 8003d4a:	e7d6      	b.n	8003cfa <_free_r+0x22>
 8003d4c:	6820      	ldr	r0, [r4, #0]
 8003d4e:	1821      	adds	r1, r4, r0
 8003d50:	428b      	cmp	r3, r1
 8003d52:	bf04      	itt	eq
 8003d54:	6819      	ldreq	r1, [r3, #0]
 8003d56:	685b      	ldreq	r3, [r3, #4]
 8003d58:	6063      	str	r3, [r4, #4]
 8003d5a:	bf04      	itt	eq
 8003d5c:	1809      	addeq	r1, r1, r0
 8003d5e:	6021      	streq	r1, [r4, #0]
 8003d60:	6054      	str	r4, [r2, #4]
 8003d62:	e7ca      	b.n	8003cfa <_free_r+0x22>
 8003d64:	bd38      	pop	{r3, r4, r5, pc}
 8003d66:	bf00      	nop
 8003d68:	200005e8 	.word	0x200005e8

08003d6c <sbrk_aligned>:
 8003d6c:	b570      	push	{r4, r5, r6, lr}
 8003d6e:	4e0f      	ldr	r6, [pc, #60]	@ (8003dac <sbrk_aligned+0x40>)
 8003d70:	460c      	mov	r4, r1
 8003d72:	6831      	ldr	r1, [r6, #0]
 8003d74:	4605      	mov	r5, r0
 8003d76:	b911      	cbnz	r1, 8003d7e <sbrk_aligned+0x12>
 8003d78:	f000 fca4 	bl	80046c4 <_sbrk_r>
 8003d7c:	6030      	str	r0, [r6, #0]
 8003d7e:	4621      	mov	r1, r4
 8003d80:	4628      	mov	r0, r5
 8003d82:	f000 fc9f 	bl	80046c4 <_sbrk_r>
 8003d86:	1c43      	adds	r3, r0, #1
 8003d88:	d103      	bne.n	8003d92 <sbrk_aligned+0x26>
 8003d8a:	f04f 34ff 	mov.w	r4, #4294967295
 8003d8e:	4620      	mov	r0, r4
 8003d90:	bd70      	pop	{r4, r5, r6, pc}
 8003d92:	1cc4      	adds	r4, r0, #3
 8003d94:	f024 0403 	bic.w	r4, r4, #3
 8003d98:	42a0      	cmp	r0, r4
 8003d9a:	d0f8      	beq.n	8003d8e <sbrk_aligned+0x22>
 8003d9c:	1a21      	subs	r1, r4, r0
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 fc90 	bl	80046c4 <_sbrk_r>
 8003da4:	3001      	adds	r0, #1
 8003da6:	d1f2      	bne.n	8003d8e <sbrk_aligned+0x22>
 8003da8:	e7ef      	b.n	8003d8a <sbrk_aligned+0x1e>
 8003daa:	bf00      	nop
 8003dac:	200005e4 	.word	0x200005e4

08003db0 <_malloc_r>:
 8003db0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003db4:	1ccd      	adds	r5, r1, #3
 8003db6:	f025 0503 	bic.w	r5, r5, #3
 8003dba:	3508      	adds	r5, #8
 8003dbc:	2d0c      	cmp	r5, #12
 8003dbe:	bf38      	it	cc
 8003dc0:	250c      	movcc	r5, #12
 8003dc2:	2d00      	cmp	r5, #0
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	db01      	blt.n	8003dcc <_malloc_r+0x1c>
 8003dc8:	42a9      	cmp	r1, r5
 8003dca:	d904      	bls.n	8003dd6 <_malloc_r+0x26>
 8003dcc:	230c      	movs	r3, #12
 8003dce:	6033      	str	r3, [r6, #0]
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003dd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003eac <_malloc_r+0xfc>
 8003dda:	f000 f869 	bl	8003eb0 <__malloc_lock>
 8003dde:	f8d8 3000 	ldr.w	r3, [r8]
 8003de2:	461c      	mov	r4, r3
 8003de4:	bb44      	cbnz	r4, 8003e38 <_malloc_r+0x88>
 8003de6:	4629      	mov	r1, r5
 8003de8:	4630      	mov	r0, r6
 8003dea:	f7ff ffbf 	bl	8003d6c <sbrk_aligned>
 8003dee:	1c43      	adds	r3, r0, #1
 8003df0:	4604      	mov	r4, r0
 8003df2:	d158      	bne.n	8003ea6 <_malloc_r+0xf6>
 8003df4:	f8d8 4000 	ldr.w	r4, [r8]
 8003df8:	4627      	mov	r7, r4
 8003dfa:	2f00      	cmp	r7, #0
 8003dfc:	d143      	bne.n	8003e86 <_malloc_r+0xd6>
 8003dfe:	2c00      	cmp	r4, #0
 8003e00:	d04b      	beq.n	8003e9a <_malloc_r+0xea>
 8003e02:	6823      	ldr	r3, [r4, #0]
 8003e04:	4639      	mov	r1, r7
 8003e06:	4630      	mov	r0, r6
 8003e08:	eb04 0903 	add.w	r9, r4, r3
 8003e0c:	f000 fc5a 	bl	80046c4 <_sbrk_r>
 8003e10:	4581      	cmp	r9, r0
 8003e12:	d142      	bne.n	8003e9a <_malloc_r+0xea>
 8003e14:	6821      	ldr	r1, [r4, #0]
 8003e16:	1a6d      	subs	r5, r5, r1
 8003e18:	4629      	mov	r1, r5
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	f7ff ffa6 	bl	8003d6c <sbrk_aligned>
 8003e20:	3001      	adds	r0, #1
 8003e22:	d03a      	beq.n	8003e9a <_malloc_r+0xea>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	442b      	add	r3, r5
 8003e28:	6023      	str	r3, [r4, #0]
 8003e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	bb62      	cbnz	r2, 8003e8c <_malloc_r+0xdc>
 8003e32:	f8c8 7000 	str.w	r7, [r8]
 8003e36:	e00f      	b.n	8003e58 <_malloc_r+0xa8>
 8003e38:	6822      	ldr	r2, [r4, #0]
 8003e3a:	1b52      	subs	r2, r2, r5
 8003e3c:	d420      	bmi.n	8003e80 <_malloc_r+0xd0>
 8003e3e:	2a0b      	cmp	r2, #11
 8003e40:	d917      	bls.n	8003e72 <_malloc_r+0xc2>
 8003e42:	1961      	adds	r1, r4, r5
 8003e44:	42a3      	cmp	r3, r4
 8003e46:	6025      	str	r5, [r4, #0]
 8003e48:	bf18      	it	ne
 8003e4a:	6059      	strne	r1, [r3, #4]
 8003e4c:	6863      	ldr	r3, [r4, #4]
 8003e4e:	bf08      	it	eq
 8003e50:	f8c8 1000 	streq.w	r1, [r8]
 8003e54:	5162      	str	r2, [r4, r5]
 8003e56:	604b      	str	r3, [r1, #4]
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f000 f82f 	bl	8003ebc <__malloc_unlock>
 8003e5e:	f104 000b 	add.w	r0, r4, #11
 8003e62:	1d23      	adds	r3, r4, #4
 8003e64:	f020 0007 	bic.w	r0, r0, #7
 8003e68:	1ac2      	subs	r2, r0, r3
 8003e6a:	bf1c      	itt	ne
 8003e6c:	1a1b      	subne	r3, r3, r0
 8003e6e:	50a3      	strne	r3, [r4, r2]
 8003e70:	e7af      	b.n	8003dd2 <_malloc_r+0x22>
 8003e72:	6862      	ldr	r2, [r4, #4]
 8003e74:	42a3      	cmp	r3, r4
 8003e76:	bf0c      	ite	eq
 8003e78:	f8c8 2000 	streq.w	r2, [r8]
 8003e7c:	605a      	strne	r2, [r3, #4]
 8003e7e:	e7eb      	b.n	8003e58 <_malloc_r+0xa8>
 8003e80:	4623      	mov	r3, r4
 8003e82:	6864      	ldr	r4, [r4, #4]
 8003e84:	e7ae      	b.n	8003de4 <_malloc_r+0x34>
 8003e86:	463c      	mov	r4, r7
 8003e88:	687f      	ldr	r7, [r7, #4]
 8003e8a:	e7b6      	b.n	8003dfa <_malloc_r+0x4a>
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	42a3      	cmp	r3, r4
 8003e92:	d1fb      	bne.n	8003e8c <_malloc_r+0xdc>
 8003e94:	2300      	movs	r3, #0
 8003e96:	6053      	str	r3, [r2, #4]
 8003e98:	e7de      	b.n	8003e58 <_malloc_r+0xa8>
 8003e9a:	230c      	movs	r3, #12
 8003e9c:	6033      	str	r3, [r6, #0]
 8003e9e:	4630      	mov	r0, r6
 8003ea0:	f000 f80c 	bl	8003ebc <__malloc_unlock>
 8003ea4:	e794      	b.n	8003dd0 <_malloc_r+0x20>
 8003ea6:	6005      	str	r5, [r0, #0]
 8003ea8:	e7d6      	b.n	8003e58 <_malloc_r+0xa8>
 8003eaa:	bf00      	nop
 8003eac:	200005e8 	.word	0x200005e8

08003eb0 <__malloc_lock>:
 8003eb0:	4801      	ldr	r0, [pc, #4]	@ (8003eb8 <__malloc_lock+0x8>)
 8003eb2:	f7ff bf0e 	b.w	8003cd2 <__retarget_lock_acquire_recursive>
 8003eb6:	bf00      	nop
 8003eb8:	200005e0 	.word	0x200005e0

08003ebc <__malloc_unlock>:
 8003ebc:	4801      	ldr	r0, [pc, #4]	@ (8003ec4 <__malloc_unlock+0x8>)
 8003ebe:	f7ff bf09 	b.w	8003cd4 <__retarget_lock_release_recursive>
 8003ec2:	bf00      	nop
 8003ec4:	200005e0 	.word	0x200005e0

08003ec8 <__sfputc_r>:
 8003ec8:	6893      	ldr	r3, [r2, #8]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	b410      	push	{r4}
 8003ed0:	6093      	str	r3, [r2, #8]
 8003ed2:	da08      	bge.n	8003ee6 <__sfputc_r+0x1e>
 8003ed4:	6994      	ldr	r4, [r2, #24]
 8003ed6:	42a3      	cmp	r3, r4
 8003ed8:	db01      	blt.n	8003ede <__sfputc_r+0x16>
 8003eda:	290a      	cmp	r1, #10
 8003edc:	d103      	bne.n	8003ee6 <__sfputc_r+0x1e>
 8003ede:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ee2:	f7ff bde8 	b.w	8003ab6 <__swbuf_r>
 8003ee6:	6813      	ldr	r3, [r2, #0]
 8003ee8:	1c58      	adds	r0, r3, #1
 8003eea:	6010      	str	r0, [r2, #0]
 8003eec:	7019      	strb	r1, [r3, #0]
 8003eee:	4608      	mov	r0, r1
 8003ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <__sfputs_r>:
 8003ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ef8:	4606      	mov	r6, r0
 8003efa:	460f      	mov	r7, r1
 8003efc:	4614      	mov	r4, r2
 8003efe:	18d5      	adds	r5, r2, r3
 8003f00:	42ac      	cmp	r4, r5
 8003f02:	d101      	bne.n	8003f08 <__sfputs_r+0x12>
 8003f04:	2000      	movs	r0, #0
 8003f06:	e007      	b.n	8003f18 <__sfputs_r+0x22>
 8003f08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f0c:	463a      	mov	r2, r7
 8003f0e:	4630      	mov	r0, r6
 8003f10:	f7ff ffda 	bl	8003ec8 <__sfputc_r>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d1f3      	bne.n	8003f00 <__sfputs_r+0xa>
 8003f18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003f1c <_vfiprintf_r>:
 8003f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f20:	460d      	mov	r5, r1
 8003f22:	b09d      	sub	sp, #116	@ 0x74
 8003f24:	4614      	mov	r4, r2
 8003f26:	4698      	mov	r8, r3
 8003f28:	4606      	mov	r6, r0
 8003f2a:	b118      	cbz	r0, 8003f34 <_vfiprintf_r+0x18>
 8003f2c:	6a03      	ldr	r3, [r0, #32]
 8003f2e:	b90b      	cbnz	r3, 8003f34 <_vfiprintf_r+0x18>
 8003f30:	f7ff fcd8 	bl	80038e4 <__sinit>
 8003f34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f36:	07d9      	lsls	r1, r3, #31
 8003f38:	d405      	bmi.n	8003f46 <_vfiprintf_r+0x2a>
 8003f3a:	89ab      	ldrh	r3, [r5, #12]
 8003f3c:	059a      	lsls	r2, r3, #22
 8003f3e:	d402      	bmi.n	8003f46 <_vfiprintf_r+0x2a>
 8003f40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f42:	f7ff fec6 	bl	8003cd2 <__retarget_lock_acquire_recursive>
 8003f46:	89ab      	ldrh	r3, [r5, #12]
 8003f48:	071b      	lsls	r3, r3, #28
 8003f4a:	d501      	bpl.n	8003f50 <_vfiprintf_r+0x34>
 8003f4c:	692b      	ldr	r3, [r5, #16]
 8003f4e:	b99b      	cbnz	r3, 8003f78 <_vfiprintf_r+0x5c>
 8003f50:	4629      	mov	r1, r5
 8003f52:	4630      	mov	r0, r6
 8003f54:	f7ff fdee 	bl	8003b34 <__swsetup_r>
 8003f58:	b170      	cbz	r0, 8003f78 <_vfiprintf_r+0x5c>
 8003f5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f5c:	07dc      	lsls	r4, r3, #31
 8003f5e:	d504      	bpl.n	8003f6a <_vfiprintf_r+0x4e>
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	b01d      	add	sp, #116	@ 0x74
 8003f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6a:	89ab      	ldrh	r3, [r5, #12]
 8003f6c:	0598      	lsls	r0, r3, #22
 8003f6e:	d4f7      	bmi.n	8003f60 <_vfiprintf_r+0x44>
 8003f70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f72:	f7ff feaf 	bl	8003cd4 <__retarget_lock_release_recursive>
 8003f76:	e7f3      	b.n	8003f60 <_vfiprintf_r+0x44>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f7c:	2320      	movs	r3, #32
 8003f7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f82:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f86:	2330      	movs	r3, #48	@ 0x30
 8003f88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004138 <_vfiprintf_r+0x21c>
 8003f8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f90:	f04f 0901 	mov.w	r9, #1
 8003f94:	4623      	mov	r3, r4
 8003f96:	469a      	mov	sl, r3
 8003f98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f9c:	b10a      	cbz	r2, 8003fa2 <_vfiprintf_r+0x86>
 8003f9e:	2a25      	cmp	r2, #37	@ 0x25
 8003fa0:	d1f9      	bne.n	8003f96 <_vfiprintf_r+0x7a>
 8003fa2:	ebba 0b04 	subs.w	fp, sl, r4
 8003fa6:	d00b      	beq.n	8003fc0 <_vfiprintf_r+0xa4>
 8003fa8:	465b      	mov	r3, fp
 8003faa:	4622      	mov	r2, r4
 8003fac:	4629      	mov	r1, r5
 8003fae:	4630      	mov	r0, r6
 8003fb0:	f7ff ffa1 	bl	8003ef6 <__sfputs_r>
 8003fb4:	3001      	adds	r0, #1
 8003fb6:	f000 80a7 	beq.w	8004108 <_vfiprintf_r+0x1ec>
 8003fba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003fbc:	445a      	add	r2, fp
 8003fbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8003fc0:	f89a 3000 	ldrb.w	r3, [sl]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 809f 	beq.w	8004108 <_vfiprintf_r+0x1ec>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fd4:	f10a 0a01 	add.w	sl, sl, #1
 8003fd8:	9304      	str	r3, [sp, #16]
 8003fda:	9307      	str	r3, [sp, #28]
 8003fdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003fe0:	931a      	str	r3, [sp, #104]	@ 0x68
 8003fe2:	4654      	mov	r4, sl
 8003fe4:	2205      	movs	r2, #5
 8003fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fea:	4853      	ldr	r0, [pc, #332]	@ (8004138 <_vfiprintf_r+0x21c>)
 8003fec:	f7fc f8f0 	bl	80001d0 <memchr>
 8003ff0:	9a04      	ldr	r2, [sp, #16]
 8003ff2:	b9d8      	cbnz	r0, 800402c <_vfiprintf_r+0x110>
 8003ff4:	06d1      	lsls	r1, r2, #27
 8003ff6:	bf44      	itt	mi
 8003ff8:	2320      	movmi	r3, #32
 8003ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ffe:	0713      	lsls	r3, r2, #28
 8004000:	bf44      	itt	mi
 8004002:	232b      	movmi	r3, #43	@ 0x2b
 8004004:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004008:	f89a 3000 	ldrb.w	r3, [sl]
 800400c:	2b2a      	cmp	r3, #42	@ 0x2a
 800400e:	d015      	beq.n	800403c <_vfiprintf_r+0x120>
 8004010:	9a07      	ldr	r2, [sp, #28]
 8004012:	4654      	mov	r4, sl
 8004014:	2000      	movs	r0, #0
 8004016:	f04f 0c0a 	mov.w	ip, #10
 800401a:	4621      	mov	r1, r4
 800401c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004020:	3b30      	subs	r3, #48	@ 0x30
 8004022:	2b09      	cmp	r3, #9
 8004024:	d94b      	bls.n	80040be <_vfiprintf_r+0x1a2>
 8004026:	b1b0      	cbz	r0, 8004056 <_vfiprintf_r+0x13a>
 8004028:	9207      	str	r2, [sp, #28]
 800402a:	e014      	b.n	8004056 <_vfiprintf_r+0x13a>
 800402c:	eba0 0308 	sub.w	r3, r0, r8
 8004030:	fa09 f303 	lsl.w	r3, r9, r3
 8004034:	4313      	orrs	r3, r2
 8004036:	9304      	str	r3, [sp, #16]
 8004038:	46a2      	mov	sl, r4
 800403a:	e7d2      	b.n	8003fe2 <_vfiprintf_r+0xc6>
 800403c:	9b03      	ldr	r3, [sp, #12]
 800403e:	1d19      	adds	r1, r3, #4
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	9103      	str	r1, [sp, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	bfbb      	ittet	lt
 8004048:	425b      	neglt	r3, r3
 800404a:	f042 0202 	orrlt.w	r2, r2, #2
 800404e:	9307      	strge	r3, [sp, #28]
 8004050:	9307      	strlt	r3, [sp, #28]
 8004052:	bfb8      	it	lt
 8004054:	9204      	strlt	r2, [sp, #16]
 8004056:	7823      	ldrb	r3, [r4, #0]
 8004058:	2b2e      	cmp	r3, #46	@ 0x2e
 800405a:	d10a      	bne.n	8004072 <_vfiprintf_r+0x156>
 800405c:	7863      	ldrb	r3, [r4, #1]
 800405e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004060:	d132      	bne.n	80040c8 <_vfiprintf_r+0x1ac>
 8004062:	9b03      	ldr	r3, [sp, #12]
 8004064:	1d1a      	adds	r2, r3, #4
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	9203      	str	r2, [sp, #12]
 800406a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800406e:	3402      	adds	r4, #2
 8004070:	9305      	str	r3, [sp, #20]
 8004072:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004148 <_vfiprintf_r+0x22c>
 8004076:	7821      	ldrb	r1, [r4, #0]
 8004078:	2203      	movs	r2, #3
 800407a:	4650      	mov	r0, sl
 800407c:	f7fc f8a8 	bl	80001d0 <memchr>
 8004080:	b138      	cbz	r0, 8004092 <_vfiprintf_r+0x176>
 8004082:	9b04      	ldr	r3, [sp, #16]
 8004084:	eba0 000a 	sub.w	r0, r0, sl
 8004088:	2240      	movs	r2, #64	@ 0x40
 800408a:	4082      	lsls	r2, r0
 800408c:	4313      	orrs	r3, r2
 800408e:	3401      	adds	r4, #1
 8004090:	9304      	str	r3, [sp, #16]
 8004092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004096:	4829      	ldr	r0, [pc, #164]	@ (800413c <_vfiprintf_r+0x220>)
 8004098:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800409c:	2206      	movs	r2, #6
 800409e:	f7fc f897 	bl	80001d0 <memchr>
 80040a2:	2800      	cmp	r0, #0
 80040a4:	d03f      	beq.n	8004126 <_vfiprintf_r+0x20a>
 80040a6:	4b26      	ldr	r3, [pc, #152]	@ (8004140 <_vfiprintf_r+0x224>)
 80040a8:	bb1b      	cbnz	r3, 80040f2 <_vfiprintf_r+0x1d6>
 80040aa:	9b03      	ldr	r3, [sp, #12]
 80040ac:	3307      	adds	r3, #7
 80040ae:	f023 0307 	bic.w	r3, r3, #7
 80040b2:	3308      	adds	r3, #8
 80040b4:	9303      	str	r3, [sp, #12]
 80040b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040b8:	443b      	add	r3, r7
 80040ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80040bc:	e76a      	b.n	8003f94 <_vfiprintf_r+0x78>
 80040be:	fb0c 3202 	mla	r2, ip, r2, r3
 80040c2:	460c      	mov	r4, r1
 80040c4:	2001      	movs	r0, #1
 80040c6:	e7a8      	b.n	800401a <_vfiprintf_r+0xfe>
 80040c8:	2300      	movs	r3, #0
 80040ca:	3401      	adds	r4, #1
 80040cc:	9305      	str	r3, [sp, #20]
 80040ce:	4619      	mov	r1, r3
 80040d0:	f04f 0c0a 	mov.w	ip, #10
 80040d4:	4620      	mov	r0, r4
 80040d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040da:	3a30      	subs	r2, #48	@ 0x30
 80040dc:	2a09      	cmp	r2, #9
 80040de:	d903      	bls.n	80040e8 <_vfiprintf_r+0x1cc>
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0c6      	beq.n	8004072 <_vfiprintf_r+0x156>
 80040e4:	9105      	str	r1, [sp, #20]
 80040e6:	e7c4      	b.n	8004072 <_vfiprintf_r+0x156>
 80040e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80040ec:	4604      	mov	r4, r0
 80040ee:	2301      	movs	r3, #1
 80040f0:	e7f0      	b.n	80040d4 <_vfiprintf_r+0x1b8>
 80040f2:	ab03      	add	r3, sp, #12
 80040f4:	9300      	str	r3, [sp, #0]
 80040f6:	462a      	mov	r2, r5
 80040f8:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <_vfiprintf_r+0x228>)
 80040fa:	a904      	add	r1, sp, #16
 80040fc:	4630      	mov	r0, r6
 80040fe:	f3af 8000 	nop.w
 8004102:	4607      	mov	r7, r0
 8004104:	1c78      	adds	r0, r7, #1
 8004106:	d1d6      	bne.n	80040b6 <_vfiprintf_r+0x19a>
 8004108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800410a:	07d9      	lsls	r1, r3, #31
 800410c:	d405      	bmi.n	800411a <_vfiprintf_r+0x1fe>
 800410e:	89ab      	ldrh	r3, [r5, #12]
 8004110:	059a      	lsls	r2, r3, #22
 8004112:	d402      	bmi.n	800411a <_vfiprintf_r+0x1fe>
 8004114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004116:	f7ff fddd 	bl	8003cd4 <__retarget_lock_release_recursive>
 800411a:	89ab      	ldrh	r3, [r5, #12]
 800411c:	065b      	lsls	r3, r3, #25
 800411e:	f53f af1f 	bmi.w	8003f60 <_vfiprintf_r+0x44>
 8004122:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004124:	e71e      	b.n	8003f64 <_vfiprintf_r+0x48>
 8004126:	ab03      	add	r3, sp, #12
 8004128:	9300      	str	r3, [sp, #0]
 800412a:	462a      	mov	r2, r5
 800412c:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <_vfiprintf_r+0x228>)
 800412e:	a904      	add	r1, sp, #16
 8004130:	4630      	mov	r0, r6
 8004132:	f000 f879 	bl	8004228 <_printf_i>
 8004136:	e7e4      	b.n	8004102 <_vfiprintf_r+0x1e6>
 8004138:	0800475c 	.word	0x0800475c
 800413c:	08004766 	.word	0x08004766
 8004140:	00000000 	.word	0x00000000
 8004144:	08003ef7 	.word	0x08003ef7
 8004148:	08004762 	.word	0x08004762

0800414c <_printf_common>:
 800414c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004150:	4616      	mov	r6, r2
 8004152:	4698      	mov	r8, r3
 8004154:	688a      	ldr	r2, [r1, #8]
 8004156:	690b      	ldr	r3, [r1, #16]
 8004158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800415c:	4293      	cmp	r3, r2
 800415e:	bfb8      	it	lt
 8004160:	4613      	movlt	r3, r2
 8004162:	6033      	str	r3, [r6, #0]
 8004164:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004168:	4607      	mov	r7, r0
 800416a:	460c      	mov	r4, r1
 800416c:	b10a      	cbz	r2, 8004172 <_printf_common+0x26>
 800416e:	3301      	adds	r3, #1
 8004170:	6033      	str	r3, [r6, #0]
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	0699      	lsls	r1, r3, #26
 8004176:	bf42      	ittt	mi
 8004178:	6833      	ldrmi	r3, [r6, #0]
 800417a:	3302      	addmi	r3, #2
 800417c:	6033      	strmi	r3, [r6, #0]
 800417e:	6825      	ldr	r5, [r4, #0]
 8004180:	f015 0506 	ands.w	r5, r5, #6
 8004184:	d106      	bne.n	8004194 <_printf_common+0x48>
 8004186:	f104 0a19 	add.w	sl, r4, #25
 800418a:	68e3      	ldr	r3, [r4, #12]
 800418c:	6832      	ldr	r2, [r6, #0]
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	42ab      	cmp	r3, r5
 8004192:	dc26      	bgt.n	80041e2 <_printf_common+0x96>
 8004194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004198:	6822      	ldr	r2, [r4, #0]
 800419a:	3b00      	subs	r3, #0
 800419c:	bf18      	it	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	0692      	lsls	r2, r2, #26
 80041a2:	d42b      	bmi.n	80041fc <_printf_common+0xb0>
 80041a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80041a8:	4641      	mov	r1, r8
 80041aa:	4638      	mov	r0, r7
 80041ac:	47c8      	blx	r9
 80041ae:	3001      	adds	r0, #1
 80041b0:	d01e      	beq.n	80041f0 <_printf_common+0xa4>
 80041b2:	6823      	ldr	r3, [r4, #0]
 80041b4:	6922      	ldr	r2, [r4, #16]
 80041b6:	f003 0306 	and.w	r3, r3, #6
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	bf02      	ittt	eq
 80041be:	68e5      	ldreq	r5, [r4, #12]
 80041c0:	6833      	ldreq	r3, [r6, #0]
 80041c2:	1aed      	subeq	r5, r5, r3
 80041c4:	68a3      	ldr	r3, [r4, #8]
 80041c6:	bf0c      	ite	eq
 80041c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041cc:	2500      	movne	r5, #0
 80041ce:	4293      	cmp	r3, r2
 80041d0:	bfc4      	itt	gt
 80041d2:	1a9b      	subgt	r3, r3, r2
 80041d4:	18ed      	addgt	r5, r5, r3
 80041d6:	2600      	movs	r6, #0
 80041d8:	341a      	adds	r4, #26
 80041da:	42b5      	cmp	r5, r6
 80041dc:	d11a      	bne.n	8004214 <_printf_common+0xc8>
 80041de:	2000      	movs	r0, #0
 80041e0:	e008      	b.n	80041f4 <_printf_common+0xa8>
 80041e2:	2301      	movs	r3, #1
 80041e4:	4652      	mov	r2, sl
 80041e6:	4641      	mov	r1, r8
 80041e8:	4638      	mov	r0, r7
 80041ea:	47c8      	blx	r9
 80041ec:	3001      	adds	r0, #1
 80041ee:	d103      	bne.n	80041f8 <_printf_common+0xac>
 80041f0:	f04f 30ff 	mov.w	r0, #4294967295
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f8:	3501      	adds	r5, #1
 80041fa:	e7c6      	b.n	800418a <_printf_common+0x3e>
 80041fc:	18e1      	adds	r1, r4, r3
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	2030      	movs	r0, #48	@ 0x30
 8004202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004206:	4422      	add	r2, r4
 8004208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800420c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004210:	3302      	adds	r3, #2
 8004212:	e7c7      	b.n	80041a4 <_printf_common+0x58>
 8004214:	2301      	movs	r3, #1
 8004216:	4622      	mov	r2, r4
 8004218:	4641      	mov	r1, r8
 800421a:	4638      	mov	r0, r7
 800421c:	47c8      	blx	r9
 800421e:	3001      	adds	r0, #1
 8004220:	d0e6      	beq.n	80041f0 <_printf_common+0xa4>
 8004222:	3601      	adds	r6, #1
 8004224:	e7d9      	b.n	80041da <_printf_common+0x8e>
	...

08004228 <_printf_i>:
 8004228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800422c:	7e0f      	ldrb	r7, [r1, #24]
 800422e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004230:	2f78      	cmp	r7, #120	@ 0x78
 8004232:	4691      	mov	r9, r2
 8004234:	4680      	mov	r8, r0
 8004236:	460c      	mov	r4, r1
 8004238:	469a      	mov	sl, r3
 800423a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800423e:	d807      	bhi.n	8004250 <_printf_i+0x28>
 8004240:	2f62      	cmp	r7, #98	@ 0x62
 8004242:	d80a      	bhi.n	800425a <_printf_i+0x32>
 8004244:	2f00      	cmp	r7, #0
 8004246:	f000 80d1 	beq.w	80043ec <_printf_i+0x1c4>
 800424a:	2f58      	cmp	r7, #88	@ 0x58
 800424c:	f000 80b8 	beq.w	80043c0 <_printf_i+0x198>
 8004250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004258:	e03a      	b.n	80042d0 <_printf_i+0xa8>
 800425a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800425e:	2b15      	cmp	r3, #21
 8004260:	d8f6      	bhi.n	8004250 <_printf_i+0x28>
 8004262:	a101      	add	r1, pc, #4	@ (adr r1, 8004268 <_printf_i+0x40>)
 8004264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004268:	080042c1 	.word	0x080042c1
 800426c:	080042d5 	.word	0x080042d5
 8004270:	08004251 	.word	0x08004251
 8004274:	08004251 	.word	0x08004251
 8004278:	08004251 	.word	0x08004251
 800427c:	08004251 	.word	0x08004251
 8004280:	080042d5 	.word	0x080042d5
 8004284:	08004251 	.word	0x08004251
 8004288:	08004251 	.word	0x08004251
 800428c:	08004251 	.word	0x08004251
 8004290:	08004251 	.word	0x08004251
 8004294:	080043d3 	.word	0x080043d3
 8004298:	080042ff 	.word	0x080042ff
 800429c:	0800438d 	.word	0x0800438d
 80042a0:	08004251 	.word	0x08004251
 80042a4:	08004251 	.word	0x08004251
 80042a8:	080043f5 	.word	0x080043f5
 80042ac:	08004251 	.word	0x08004251
 80042b0:	080042ff 	.word	0x080042ff
 80042b4:	08004251 	.word	0x08004251
 80042b8:	08004251 	.word	0x08004251
 80042bc:	08004395 	.word	0x08004395
 80042c0:	6833      	ldr	r3, [r6, #0]
 80042c2:	1d1a      	adds	r2, r3, #4
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	6032      	str	r2, [r6, #0]
 80042c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80042d0:	2301      	movs	r3, #1
 80042d2:	e09c      	b.n	800440e <_printf_i+0x1e6>
 80042d4:	6833      	ldr	r3, [r6, #0]
 80042d6:	6820      	ldr	r0, [r4, #0]
 80042d8:	1d19      	adds	r1, r3, #4
 80042da:	6031      	str	r1, [r6, #0]
 80042dc:	0606      	lsls	r6, r0, #24
 80042de:	d501      	bpl.n	80042e4 <_printf_i+0xbc>
 80042e0:	681d      	ldr	r5, [r3, #0]
 80042e2:	e003      	b.n	80042ec <_printf_i+0xc4>
 80042e4:	0645      	lsls	r5, r0, #25
 80042e6:	d5fb      	bpl.n	80042e0 <_printf_i+0xb8>
 80042e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	da03      	bge.n	80042f8 <_printf_i+0xd0>
 80042f0:	232d      	movs	r3, #45	@ 0x2d
 80042f2:	426d      	negs	r5, r5
 80042f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042f8:	4858      	ldr	r0, [pc, #352]	@ (800445c <_printf_i+0x234>)
 80042fa:	230a      	movs	r3, #10
 80042fc:	e011      	b.n	8004322 <_printf_i+0xfa>
 80042fe:	6821      	ldr	r1, [r4, #0]
 8004300:	6833      	ldr	r3, [r6, #0]
 8004302:	0608      	lsls	r0, r1, #24
 8004304:	f853 5b04 	ldr.w	r5, [r3], #4
 8004308:	d402      	bmi.n	8004310 <_printf_i+0xe8>
 800430a:	0649      	lsls	r1, r1, #25
 800430c:	bf48      	it	mi
 800430e:	b2ad      	uxthmi	r5, r5
 8004310:	2f6f      	cmp	r7, #111	@ 0x6f
 8004312:	4852      	ldr	r0, [pc, #328]	@ (800445c <_printf_i+0x234>)
 8004314:	6033      	str	r3, [r6, #0]
 8004316:	bf14      	ite	ne
 8004318:	230a      	movne	r3, #10
 800431a:	2308      	moveq	r3, #8
 800431c:	2100      	movs	r1, #0
 800431e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004322:	6866      	ldr	r6, [r4, #4]
 8004324:	60a6      	str	r6, [r4, #8]
 8004326:	2e00      	cmp	r6, #0
 8004328:	db05      	blt.n	8004336 <_printf_i+0x10e>
 800432a:	6821      	ldr	r1, [r4, #0]
 800432c:	432e      	orrs	r6, r5
 800432e:	f021 0104 	bic.w	r1, r1, #4
 8004332:	6021      	str	r1, [r4, #0]
 8004334:	d04b      	beq.n	80043ce <_printf_i+0x1a6>
 8004336:	4616      	mov	r6, r2
 8004338:	fbb5 f1f3 	udiv	r1, r5, r3
 800433c:	fb03 5711 	mls	r7, r3, r1, r5
 8004340:	5dc7      	ldrb	r7, [r0, r7]
 8004342:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004346:	462f      	mov	r7, r5
 8004348:	42bb      	cmp	r3, r7
 800434a:	460d      	mov	r5, r1
 800434c:	d9f4      	bls.n	8004338 <_printf_i+0x110>
 800434e:	2b08      	cmp	r3, #8
 8004350:	d10b      	bne.n	800436a <_printf_i+0x142>
 8004352:	6823      	ldr	r3, [r4, #0]
 8004354:	07df      	lsls	r7, r3, #31
 8004356:	d508      	bpl.n	800436a <_printf_i+0x142>
 8004358:	6923      	ldr	r3, [r4, #16]
 800435a:	6861      	ldr	r1, [r4, #4]
 800435c:	4299      	cmp	r1, r3
 800435e:	bfde      	ittt	le
 8004360:	2330      	movle	r3, #48	@ 0x30
 8004362:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004366:	f106 36ff 	addle.w	r6, r6, #4294967295
 800436a:	1b92      	subs	r2, r2, r6
 800436c:	6122      	str	r2, [r4, #16]
 800436e:	f8cd a000 	str.w	sl, [sp]
 8004372:	464b      	mov	r3, r9
 8004374:	aa03      	add	r2, sp, #12
 8004376:	4621      	mov	r1, r4
 8004378:	4640      	mov	r0, r8
 800437a:	f7ff fee7 	bl	800414c <_printf_common>
 800437e:	3001      	adds	r0, #1
 8004380:	d14a      	bne.n	8004418 <_printf_i+0x1f0>
 8004382:	f04f 30ff 	mov.w	r0, #4294967295
 8004386:	b004      	add	sp, #16
 8004388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800438c:	6823      	ldr	r3, [r4, #0]
 800438e:	f043 0320 	orr.w	r3, r3, #32
 8004392:	6023      	str	r3, [r4, #0]
 8004394:	4832      	ldr	r0, [pc, #200]	@ (8004460 <_printf_i+0x238>)
 8004396:	2778      	movs	r7, #120	@ 0x78
 8004398:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800439c:	6823      	ldr	r3, [r4, #0]
 800439e:	6831      	ldr	r1, [r6, #0]
 80043a0:	061f      	lsls	r7, r3, #24
 80043a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80043a6:	d402      	bmi.n	80043ae <_printf_i+0x186>
 80043a8:	065f      	lsls	r7, r3, #25
 80043aa:	bf48      	it	mi
 80043ac:	b2ad      	uxthmi	r5, r5
 80043ae:	6031      	str	r1, [r6, #0]
 80043b0:	07d9      	lsls	r1, r3, #31
 80043b2:	bf44      	itt	mi
 80043b4:	f043 0320 	orrmi.w	r3, r3, #32
 80043b8:	6023      	strmi	r3, [r4, #0]
 80043ba:	b11d      	cbz	r5, 80043c4 <_printf_i+0x19c>
 80043bc:	2310      	movs	r3, #16
 80043be:	e7ad      	b.n	800431c <_printf_i+0xf4>
 80043c0:	4826      	ldr	r0, [pc, #152]	@ (800445c <_printf_i+0x234>)
 80043c2:	e7e9      	b.n	8004398 <_printf_i+0x170>
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	f023 0320 	bic.w	r3, r3, #32
 80043ca:	6023      	str	r3, [r4, #0]
 80043cc:	e7f6      	b.n	80043bc <_printf_i+0x194>
 80043ce:	4616      	mov	r6, r2
 80043d0:	e7bd      	b.n	800434e <_printf_i+0x126>
 80043d2:	6833      	ldr	r3, [r6, #0]
 80043d4:	6825      	ldr	r5, [r4, #0]
 80043d6:	6961      	ldr	r1, [r4, #20]
 80043d8:	1d18      	adds	r0, r3, #4
 80043da:	6030      	str	r0, [r6, #0]
 80043dc:	062e      	lsls	r6, r5, #24
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	d501      	bpl.n	80043e6 <_printf_i+0x1be>
 80043e2:	6019      	str	r1, [r3, #0]
 80043e4:	e002      	b.n	80043ec <_printf_i+0x1c4>
 80043e6:	0668      	lsls	r0, r5, #25
 80043e8:	d5fb      	bpl.n	80043e2 <_printf_i+0x1ba>
 80043ea:	8019      	strh	r1, [r3, #0]
 80043ec:	2300      	movs	r3, #0
 80043ee:	6123      	str	r3, [r4, #16]
 80043f0:	4616      	mov	r6, r2
 80043f2:	e7bc      	b.n	800436e <_printf_i+0x146>
 80043f4:	6833      	ldr	r3, [r6, #0]
 80043f6:	1d1a      	adds	r2, r3, #4
 80043f8:	6032      	str	r2, [r6, #0]
 80043fa:	681e      	ldr	r6, [r3, #0]
 80043fc:	6862      	ldr	r2, [r4, #4]
 80043fe:	2100      	movs	r1, #0
 8004400:	4630      	mov	r0, r6
 8004402:	f7fb fee5 	bl	80001d0 <memchr>
 8004406:	b108      	cbz	r0, 800440c <_printf_i+0x1e4>
 8004408:	1b80      	subs	r0, r0, r6
 800440a:	6060      	str	r0, [r4, #4]
 800440c:	6863      	ldr	r3, [r4, #4]
 800440e:	6123      	str	r3, [r4, #16]
 8004410:	2300      	movs	r3, #0
 8004412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004416:	e7aa      	b.n	800436e <_printf_i+0x146>
 8004418:	6923      	ldr	r3, [r4, #16]
 800441a:	4632      	mov	r2, r6
 800441c:	4649      	mov	r1, r9
 800441e:	4640      	mov	r0, r8
 8004420:	47d0      	blx	sl
 8004422:	3001      	adds	r0, #1
 8004424:	d0ad      	beq.n	8004382 <_printf_i+0x15a>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	079b      	lsls	r3, r3, #30
 800442a:	d413      	bmi.n	8004454 <_printf_i+0x22c>
 800442c:	68e0      	ldr	r0, [r4, #12]
 800442e:	9b03      	ldr	r3, [sp, #12]
 8004430:	4298      	cmp	r0, r3
 8004432:	bfb8      	it	lt
 8004434:	4618      	movlt	r0, r3
 8004436:	e7a6      	b.n	8004386 <_printf_i+0x15e>
 8004438:	2301      	movs	r3, #1
 800443a:	4632      	mov	r2, r6
 800443c:	4649      	mov	r1, r9
 800443e:	4640      	mov	r0, r8
 8004440:	47d0      	blx	sl
 8004442:	3001      	adds	r0, #1
 8004444:	d09d      	beq.n	8004382 <_printf_i+0x15a>
 8004446:	3501      	adds	r5, #1
 8004448:	68e3      	ldr	r3, [r4, #12]
 800444a:	9903      	ldr	r1, [sp, #12]
 800444c:	1a5b      	subs	r3, r3, r1
 800444e:	42ab      	cmp	r3, r5
 8004450:	dcf2      	bgt.n	8004438 <_printf_i+0x210>
 8004452:	e7eb      	b.n	800442c <_printf_i+0x204>
 8004454:	2500      	movs	r5, #0
 8004456:	f104 0619 	add.w	r6, r4, #25
 800445a:	e7f5      	b.n	8004448 <_printf_i+0x220>
 800445c:	0800476d 	.word	0x0800476d
 8004460:	0800477e 	.word	0x0800477e

08004464 <__sflush_r>:
 8004464:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800446c:	0716      	lsls	r6, r2, #28
 800446e:	4605      	mov	r5, r0
 8004470:	460c      	mov	r4, r1
 8004472:	d454      	bmi.n	800451e <__sflush_r+0xba>
 8004474:	684b      	ldr	r3, [r1, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	dc02      	bgt.n	8004480 <__sflush_r+0x1c>
 800447a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	dd48      	ble.n	8004512 <__sflush_r+0xae>
 8004480:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004482:	2e00      	cmp	r6, #0
 8004484:	d045      	beq.n	8004512 <__sflush_r+0xae>
 8004486:	2300      	movs	r3, #0
 8004488:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800448c:	682f      	ldr	r7, [r5, #0]
 800448e:	6a21      	ldr	r1, [r4, #32]
 8004490:	602b      	str	r3, [r5, #0]
 8004492:	d030      	beq.n	80044f6 <__sflush_r+0x92>
 8004494:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	0759      	lsls	r1, r3, #29
 800449a:	d505      	bpl.n	80044a8 <__sflush_r+0x44>
 800449c:	6863      	ldr	r3, [r4, #4]
 800449e:	1ad2      	subs	r2, r2, r3
 80044a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80044a2:	b10b      	cbz	r3, 80044a8 <__sflush_r+0x44>
 80044a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80044a6:	1ad2      	subs	r2, r2, r3
 80044a8:	2300      	movs	r3, #0
 80044aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80044ac:	6a21      	ldr	r1, [r4, #32]
 80044ae:	4628      	mov	r0, r5
 80044b0:	47b0      	blx	r6
 80044b2:	1c43      	adds	r3, r0, #1
 80044b4:	89a3      	ldrh	r3, [r4, #12]
 80044b6:	d106      	bne.n	80044c6 <__sflush_r+0x62>
 80044b8:	6829      	ldr	r1, [r5, #0]
 80044ba:	291d      	cmp	r1, #29
 80044bc:	d82b      	bhi.n	8004516 <__sflush_r+0xb2>
 80044be:	4a2a      	ldr	r2, [pc, #168]	@ (8004568 <__sflush_r+0x104>)
 80044c0:	40ca      	lsrs	r2, r1
 80044c2:	07d6      	lsls	r6, r2, #31
 80044c4:	d527      	bpl.n	8004516 <__sflush_r+0xb2>
 80044c6:	2200      	movs	r2, #0
 80044c8:	6062      	str	r2, [r4, #4]
 80044ca:	04d9      	lsls	r1, r3, #19
 80044cc:	6922      	ldr	r2, [r4, #16]
 80044ce:	6022      	str	r2, [r4, #0]
 80044d0:	d504      	bpl.n	80044dc <__sflush_r+0x78>
 80044d2:	1c42      	adds	r2, r0, #1
 80044d4:	d101      	bne.n	80044da <__sflush_r+0x76>
 80044d6:	682b      	ldr	r3, [r5, #0]
 80044d8:	b903      	cbnz	r3, 80044dc <__sflush_r+0x78>
 80044da:	6560      	str	r0, [r4, #84]	@ 0x54
 80044dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044de:	602f      	str	r7, [r5, #0]
 80044e0:	b1b9      	cbz	r1, 8004512 <__sflush_r+0xae>
 80044e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044e6:	4299      	cmp	r1, r3
 80044e8:	d002      	beq.n	80044f0 <__sflush_r+0x8c>
 80044ea:	4628      	mov	r0, r5
 80044ec:	f7ff fbf4 	bl	8003cd8 <_free_r>
 80044f0:	2300      	movs	r3, #0
 80044f2:	6363      	str	r3, [r4, #52]	@ 0x34
 80044f4:	e00d      	b.n	8004512 <__sflush_r+0xae>
 80044f6:	2301      	movs	r3, #1
 80044f8:	4628      	mov	r0, r5
 80044fa:	47b0      	blx	r6
 80044fc:	4602      	mov	r2, r0
 80044fe:	1c50      	adds	r0, r2, #1
 8004500:	d1c9      	bne.n	8004496 <__sflush_r+0x32>
 8004502:	682b      	ldr	r3, [r5, #0]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0c6      	beq.n	8004496 <__sflush_r+0x32>
 8004508:	2b1d      	cmp	r3, #29
 800450a:	d001      	beq.n	8004510 <__sflush_r+0xac>
 800450c:	2b16      	cmp	r3, #22
 800450e:	d11e      	bne.n	800454e <__sflush_r+0xea>
 8004510:	602f      	str	r7, [r5, #0]
 8004512:	2000      	movs	r0, #0
 8004514:	e022      	b.n	800455c <__sflush_r+0xf8>
 8004516:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800451a:	b21b      	sxth	r3, r3
 800451c:	e01b      	b.n	8004556 <__sflush_r+0xf2>
 800451e:	690f      	ldr	r7, [r1, #16]
 8004520:	2f00      	cmp	r7, #0
 8004522:	d0f6      	beq.n	8004512 <__sflush_r+0xae>
 8004524:	0793      	lsls	r3, r2, #30
 8004526:	680e      	ldr	r6, [r1, #0]
 8004528:	bf08      	it	eq
 800452a:	694b      	ldreq	r3, [r1, #20]
 800452c:	600f      	str	r7, [r1, #0]
 800452e:	bf18      	it	ne
 8004530:	2300      	movne	r3, #0
 8004532:	eba6 0807 	sub.w	r8, r6, r7
 8004536:	608b      	str	r3, [r1, #8]
 8004538:	f1b8 0f00 	cmp.w	r8, #0
 800453c:	dde9      	ble.n	8004512 <__sflush_r+0xae>
 800453e:	6a21      	ldr	r1, [r4, #32]
 8004540:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004542:	4643      	mov	r3, r8
 8004544:	463a      	mov	r2, r7
 8004546:	4628      	mov	r0, r5
 8004548:	47b0      	blx	r6
 800454a:	2800      	cmp	r0, #0
 800454c:	dc08      	bgt.n	8004560 <__sflush_r+0xfc>
 800454e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004552:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004556:	81a3      	strh	r3, [r4, #12]
 8004558:	f04f 30ff 	mov.w	r0, #4294967295
 800455c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004560:	4407      	add	r7, r0
 8004562:	eba8 0800 	sub.w	r8, r8, r0
 8004566:	e7e7      	b.n	8004538 <__sflush_r+0xd4>
 8004568:	20400001 	.word	0x20400001

0800456c <_fflush_r>:
 800456c:	b538      	push	{r3, r4, r5, lr}
 800456e:	690b      	ldr	r3, [r1, #16]
 8004570:	4605      	mov	r5, r0
 8004572:	460c      	mov	r4, r1
 8004574:	b913      	cbnz	r3, 800457c <_fflush_r+0x10>
 8004576:	2500      	movs	r5, #0
 8004578:	4628      	mov	r0, r5
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	b118      	cbz	r0, 8004586 <_fflush_r+0x1a>
 800457e:	6a03      	ldr	r3, [r0, #32]
 8004580:	b90b      	cbnz	r3, 8004586 <_fflush_r+0x1a>
 8004582:	f7ff f9af 	bl	80038e4 <__sinit>
 8004586:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f3      	beq.n	8004576 <_fflush_r+0xa>
 800458e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004590:	07d0      	lsls	r0, r2, #31
 8004592:	d404      	bmi.n	800459e <_fflush_r+0x32>
 8004594:	0599      	lsls	r1, r3, #22
 8004596:	d402      	bmi.n	800459e <_fflush_r+0x32>
 8004598:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800459a:	f7ff fb9a 	bl	8003cd2 <__retarget_lock_acquire_recursive>
 800459e:	4628      	mov	r0, r5
 80045a0:	4621      	mov	r1, r4
 80045a2:	f7ff ff5f 	bl	8004464 <__sflush_r>
 80045a6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80045a8:	07da      	lsls	r2, r3, #31
 80045aa:	4605      	mov	r5, r0
 80045ac:	d4e4      	bmi.n	8004578 <_fflush_r+0xc>
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	059b      	lsls	r3, r3, #22
 80045b2:	d4e1      	bmi.n	8004578 <_fflush_r+0xc>
 80045b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80045b6:	f7ff fb8d 	bl	8003cd4 <__retarget_lock_release_recursive>
 80045ba:	e7dd      	b.n	8004578 <_fflush_r+0xc>

080045bc <__swhatbuf_r>:
 80045bc:	b570      	push	{r4, r5, r6, lr}
 80045be:	460c      	mov	r4, r1
 80045c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045c4:	2900      	cmp	r1, #0
 80045c6:	b096      	sub	sp, #88	@ 0x58
 80045c8:	4615      	mov	r5, r2
 80045ca:	461e      	mov	r6, r3
 80045cc:	da0d      	bge.n	80045ea <__swhatbuf_r+0x2e>
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80045d4:	f04f 0100 	mov.w	r1, #0
 80045d8:	bf14      	ite	ne
 80045da:	2340      	movne	r3, #64	@ 0x40
 80045dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80045e0:	2000      	movs	r0, #0
 80045e2:	6031      	str	r1, [r6, #0]
 80045e4:	602b      	str	r3, [r5, #0]
 80045e6:	b016      	add	sp, #88	@ 0x58
 80045e8:	bd70      	pop	{r4, r5, r6, pc}
 80045ea:	466a      	mov	r2, sp
 80045ec:	f000 f848 	bl	8004680 <_fstat_r>
 80045f0:	2800      	cmp	r0, #0
 80045f2:	dbec      	blt.n	80045ce <__swhatbuf_r+0x12>
 80045f4:	9901      	ldr	r1, [sp, #4]
 80045f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80045fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80045fe:	4259      	negs	r1, r3
 8004600:	4159      	adcs	r1, r3
 8004602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004606:	e7eb      	b.n	80045e0 <__swhatbuf_r+0x24>

08004608 <__smakebuf_r>:
 8004608:	898b      	ldrh	r3, [r1, #12]
 800460a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800460c:	079d      	lsls	r5, r3, #30
 800460e:	4606      	mov	r6, r0
 8004610:	460c      	mov	r4, r1
 8004612:	d507      	bpl.n	8004624 <__smakebuf_r+0x1c>
 8004614:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004618:	6023      	str	r3, [r4, #0]
 800461a:	6123      	str	r3, [r4, #16]
 800461c:	2301      	movs	r3, #1
 800461e:	6163      	str	r3, [r4, #20]
 8004620:	b003      	add	sp, #12
 8004622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004624:	ab01      	add	r3, sp, #4
 8004626:	466a      	mov	r2, sp
 8004628:	f7ff ffc8 	bl	80045bc <__swhatbuf_r>
 800462c:	9f00      	ldr	r7, [sp, #0]
 800462e:	4605      	mov	r5, r0
 8004630:	4639      	mov	r1, r7
 8004632:	4630      	mov	r0, r6
 8004634:	f7ff fbbc 	bl	8003db0 <_malloc_r>
 8004638:	b948      	cbnz	r0, 800464e <__smakebuf_r+0x46>
 800463a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800463e:	059a      	lsls	r2, r3, #22
 8004640:	d4ee      	bmi.n	8004620 <__smakebuf_r+0x18>
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	f043 0302 	orr.w	r3, r3, #2
 800464a:	81a3      	strh	r3, [r4, #12]
 800464c:	e7e2      	b.n	8004614 <__smakebuf_r+0xc>
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	6020      	str	r0, [r4, #0]
 8004652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004656:	81a3      	strh	r3, [r4, #12]
 8004658:	9b01      	ldr	r3, [sp, #4]
 800465a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800465e:	b15b      	cbz	r3, 8004678 <__smakebuf_r+0x70>
 8004660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004664:	4630      	mov	r0, r6
 8004666:	f000 f81d 	bl	80046a4 <_isatty_r>
 800466a:	b128      	cbz	r0, 8004678 <__smakebuf_r+0x70>
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	f023 0303 	bic.w	r3, r3, #3
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	81a3      	strh	r3, [r4, #12]
 8004678:	89a3      	ldrh	r3, [r4, #12]
 800467a:	431d      	orrs	r5, r3
 800467c:	81a5      	strh	r5, [r4, #12]
 800467e:	e7cf      	b.n	8004620 <__smakebuf_r+0x18>

08004680 <_fstat_r>:
 8004680:	b538      	push	{r3, r4, r5, lr}
 8004682:	4d07      	ldr	r5, [pc, #28]	@ (80046a0 <_fstat_r+0x20>)
 8004684:	2300      	movs	r3, #0
 8004686:	4604      	mov	r4, r0
 8004688:	4608      	mov	r0, r1
 800468a:	4611      	mov	r1, r2
 800468c:	602b      	str	r3, [r5, #0]
 800468e:	f7fc f999 	bl	80009c4 <_fstat>
 8004692:	1c43      	adds	r3, r0, #1
 8004694:	d102      	bne.n	800469c <_fstat_r+0x1c>
 8004696:	682b      	ldr	r3, [r5, #0]
 8004698:	b103      	cbz	r3, 800469c <_fstat_r+0x1c>
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	bd38      	pop	{r3, r4, r5, pc}
 800469e:	bf00      	nop
 80046a0:	200005dc 	.word	0x200005dc

080046a4 <_isatty_r>:
 80046a4:	b538      	push	{r3, r4, r5, lr}
 80046a6:	4d06      	ldr	r5, [pc, #24]	@ (80046c0 <_isatty_r+0x1c>)
 80046a8:	2300      	movs	r3, #0
 80046aa:	4604      	mov	r4, r0
 80046ac:	4608      	mov	r0, r1
 80046ae:	602b      	str	r3, [r5, #0]
 80046b0:	f7fc f998 	bl	80009e4 <_isatty>
 80046b4:	1c43      	adds	r3, r0, #1
 80046b6:	d102      	bne.n	80046be <_isatty_r+0x1a>
 80046b8:	682b      	ldr	r3, [r5, #0]
 80046ba:	b103      	cbz	r3, 80046be <_isatty_r+0x1a>
 80046bc:	6023      	str	r3, [r4, #0]
 80046be:	bd38      	pop	{r3, r4, r5, pc}
 80046c0:	200005dc 	.word	0x200005dc

080046c4 <_sbrk_r>:
 80046c4:	b538      	push	{r3, r4, r5, lr}
 80046c6:	4d06      	ldr	r5, [pc, #24]	@ (80046e0 <_sbrk_r+0x1c>)
 80046c8:	2300      	movs	r3, #0
 80046ca:	4604      	mov	r4, r0
 80046cc:	4608      	mov	r0, r1
 80046ce:	602b      	str	r3, [r5, #0]
 80046d0:	f7fc f9a0 	bl	8000a14 <_sbrk>
 80046d4:	1c43      	adds	r3, r0, #1
 80046d6:	d102      	bne.n	80046de <_sbrk_r+0x1a>
 80046d8:	682b      	ldr	r3, [r5, #0]
 80046da:	b103      	cbz	r3, 80046de <_sbrk_r+0x1a>
 80046dc:	6023      	str	r3, [r4, #0]
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	200005dc 	.word	0x200005dc

080046e4 <_init>:
 80046e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e6:	bf00      	nop
 80046e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ea:	bc08      	pop	{r3}
 80046ec:	469e      	mov	lr, r3
 80046ee:	4770      	bx	lr

080046f0 <_fini>:
 80046f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046f2:	bf00      	nop
 80046f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f6:	bc08      	pop	{r3}
 80046f8:	469e      	mov	lr, r3
 80046fa:	4770      	bx	lr
