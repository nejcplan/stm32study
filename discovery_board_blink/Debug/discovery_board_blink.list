
discovery_board_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000450c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800469c  0800469c  0000569c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004730  08004730  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004730  08004730  00005730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004738  08004738  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004738  08004738  00005738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800473c  0800473c  0000573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004740  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006068  2**0
                  CONTENTS
 10 .bss          00000584  20000068  20000068  00006068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005ec  200005ec  00006068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011445  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023b1  00000000  00000000  000174dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00019890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b15  00000000  00000000  0001a6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ef00  00000000  00000000  0001b1ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012e03  00000000  00000000  0003a0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b5974  00000000  00000000  0004cef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00102864  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004384  00000000  00000000  001028a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00106c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004684 	.word	0x08004684

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004684 	.word	0x08004684

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Send printf to uart1
int _write(int fd, char* ptr, int len) {
 8000270:	b580      	push	{r7, lr}
 8000272:	b086      	sub	sp, #24
 8000274:	af00      	add	r7, sp, #0
 8000276:	60f8      	str	r0, [r7, #12]
 8000278:	60b9      	str	r1, [r7, #8]
 800027a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == 1 || fd == 2) {
 800027c:	68fb      	ldr	r3, [r7, #12]
 800027e:	2b01      	cmp	r3, #1
 8000280:	d002      	beq.n	8000288 <_write+0x18>
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	2b02      	cmp	r3, #2
 8000286:	d111      	bne.n	80002ac <_write+0x3c>
    hstatus = HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	b29a      	uxth	r2, r3
 800028c:	f04f 33ff 	mov.w	r3, #4294967295
 8000290:	68b9      	ldr	r1, [r7, #8]
 8000292:	4809      	ldr	r0, [pc, #36]	@ (80002b8 <_write+0x48>)
 8000294:	f002 fdb9 	bl	8002e0a <HAL_UART_Transmit>
 8000298:	4603      	mov	r3, r0
 800029a:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 800029c:	7dfb      	ldrb	r3, [r7, #23]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d101      	bne.n	80002a6 <_write+0x36>
      return len;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	e004      	b.n	80002b0 <_write+0x40>
    else
      return -1;
 80002a6:	f04f 33ff 	mov.w	r3, #4294967295
 80002aa:	e001      	b.n	80002b0 <_write+0x40>
  }
  return -1;
 80002ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002b0:	4618      	mov	r0, r3
 80002b2:	3718      	adds	r7, #24
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	2000013c 	.word	0x2000013c

080002bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b082      	sub	sp, #8
 80002c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c2:	f000 fc03 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c6:	f000 f825 	bl	8000314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ca:	f000 f957 	bl	800057c <MX_GPIO_Init>
  MX_I2C1_Init();
 80002ce:	f000 f885 	bl	80003dc <MX_I2C1_Init>
  MX_SPI1_Init();
 80002d2:	f000 f8c3 	bl	800045c <MX_SPI1_Init>
  MX_USB_PCD_Init();
 80002d6:	f000 f92f 	bl	8000538 <MX_USB_PCD_Init>
  MX_USART1_UART_Init();
 80002da:	f000 f8fd 	bl	80004d8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("First application starting\n");
 80002de:	480b      	ldr	r0, [pc, #44]	@ (800030c <main+0x50>)
 80002e0:	f003 fb6e 	bl	80039c0 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t now = 0, last_print = 0;
 80002e4:	2300      	movs	r3, #0
 80002e6:	603b      	str	r3, [r7, #0]
 80002e8:	2300      	movs	r3, #0
 80002ea:	607b      	str	r3, [r7, #4]


  while (1)
  {
	  now = HAL_GetTick();
 80002ec:	f000 fc48 	bl	8000b80 <HAL_GetTick>
 80002f0:	6038      	str	r0, [r7, #0]

	  if ( now - last_print >= 1000) {
 80002f2:	683a      	ldr	r2, [r7, #0]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	1ad3      	subs	r3, r2, r3
 80002f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002fc:	d3f6      	bcc.n	80002ec <main+0x30>
		  printf("Loop %lu\n", now);
 80002fe:	6839      	ldr	r1, [r7, #0]
 8000300:	4803      	ldr	r0, [pc, #12]	@ (8000310 <main+0x54>)
 8000302:	f003 faf5 	bl	80038f0 <iprintf>
		  last_print = now;
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	607b      	str	r3, [r7, #4]
	  now = HAL_GetTick();
 800030a:	e7ef      	b.n	80002ec <main+0x30>
 800030c:	0800469c 	.word	0x0800469c
 8000310:	080046b8 	.word	0x080046b8

08000314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b09e      	sub	sp, #120	@ 0x78
 8000318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800031a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800031e:	2228      	movs	r2, #40	@ 0x28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f003 fc2c 	bl	8003b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000328:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800032c:	2200      	movs	r2, #0
 800032e:	601a      	str	r2, [r3, #0]
 8000330:	605a      	str	r2, [r3, #4]
 8000332:	609a      	str	r2, [r3, #8]
 8000334:	60da      	str	r2, [r3, #12]
 8000336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000338:	463b      	mov	r3, r7
 800033a:	223c      	movs	r2, #60	@ 0x3c
 800033c:	2100      	movs	r1, #0
 800033e:	4618      	mov	r0, r3
 8000340:	f003 fc1e 	bl	8003b80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000344:	2303      	movs	r3, #3
 8000346:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000348:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800034c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800034e:	2300      	movs	r3, #0
 8000350:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000352:	2301      	movs	r3, #1
 8000354:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000356:	2310      	movs	r3, #16
 8000358:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800035a:	2302      	movs	r3, #2
 800035c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800035e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000362:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000364:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000368:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800036a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800036e:	4618      	mov	r0, r3
 8000370:	f001 f884 	bl	800147c <HAL_RCC_OscConfig>
 8000374:	4603      	mov	r3, r0
 8000376:	2b00      	cmp	r3, #0
 8000378:	d001      	beq.n	800037e <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800037a:	f000 f97d 	bl	8000678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800037e:	230f      	movs	r3, #15
 8000380:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000382:	2302      	movs	r3, #2
 8000384:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000386:	2300      	movs	r3, #0
 8000388:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800038a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800038e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000390:	2300      	movs	r3, #0
 8000392:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000394:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000398:	2101      	movs	r1, #1
 800039a:	4618      	mov	r0, r3
 800039c:	f002 f87c 	bl	8002498 <HAL_RCC_ClockConfig>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003a6:	f000 f967 	bl	8000678 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART1
 80003aa:	4b0b      	ldr	r3, [pc, #44]	@ (80003d8 <SystemClock_Config+0xc4>)
 80003ac:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80003ae:	2300      	movs	r3, #0
 80003b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003b2:	2300      	movs	r3, #0
 80003b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80003ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003bc:	463b      	mov	r3, r7
 80003be:	4618      	mov	r0, r3
 80003c0:	f002 fa7c 	bl	80028bc <HAL_RCCEx_PeriphCLKConfig>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d001      	beq.n	80003ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80003ca:	f000 f955 	bl	8000678 <Error_Handler>
  }
}
 80003ce:	bf00      	nop
 80003d0:	3778      	adds	r7, #120	@ 0x78
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bd80      	pop	{r7, pc}
 80003d6:	bf00      	nop
 80003d8:	00020021 	.word	0x00020021

080003dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80003e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000450 <MX_I2C1_Init+0x74>)
 80003e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000454 <MX_I2C1_Init+0x78>)
 80003e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80003e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000450 <MX_I2C1_Init+0x74>)
 80003e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000458 <MX_I2C1_Init+0x7c>)
 80003ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80003ec:	4b18      	ldr	r3, [pc, #96]	@ (8000450 <MX_I2C1_Init+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80003f2:	4b17      	ldr	r3, [pc, #92]	@ (8000450 <MX_I2C1_Init+0x74>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003f8:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <MX_I2C1_Init+0x74>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003fe:	4b14      	ldr	r3, [pc, #80]	@ (8000450 <MX_I2C1_Init+0x74>)
 8000400:	2200      	movs	r2, #0
 8000402:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000404:	4b12      	ldr	r3, [pc, #72]	@ (8000450 <MX_I2C1_Init+0x74>)
 8000406:	2200      	movs	r2, #0
 8000408:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800040a:	4b11      	ldr	r3, [pc, #68]	@ (8000450 <MX_I2C1_Init+0x74>)
 800040c:	2200      	movs	r2, #0
 800040e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000410:	4b0f      	ldr	r3, [pc, #60]	@ (8000450 <MX_I2C1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000416:	480e      	ldr	r0, [pc, #56]	@ (8000450 <MX_I2C1_Init+0x74>)
 8000418:	f000 fe36 	bl	8001088 <HAL_I2C_Init>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000422:	f000 f929 	bl	8000678 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000426:	2100      	movs	r1, #0
 8000428:	4809      	ldr	r0, [pc, #36]	@ (8000450 <MX_I2C1_Init+0x74>)
 800042a:	f000 fec8 	bl	80011be <HAL_I2CEx_ConfigAnalogFilter>
 800042e:	4603      	mov	r3, r0
 8000430:	2b00      	cmp	r3, #0
 8000432:	d001      	beq.n	8000438 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000434:	f000 f920 	bl	8000678 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000438:	2100      	movs	r1, #0
 800043a:	4805      	ldr	r0, [pc, #20]	@ (8000450 <MX_I2C1_Init+0x74>)
 800043c:	f000 ff0a 	bl	8001254 <HAL_I2CEx_ConfigDigitalFilter>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000446:	f000 f917 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800044a:	bf00      	nop
 800044c:	bd80      	pop	{r7, pc}
 800044e:	bf00      	nop
 8000450:	20000084 	.word	0x20000084
 8000454:	40005400 	.word	0x40005400
 8000458:	00201d2b 	.word	0x00201d2b

0800045c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000460:	4b1b      	ldr	r3, [pc, #108]	@ (80004d0 <MX_SPI1_Init+0x74>)
 8000462:	4a1c      	ldr	r2, [pc, #112]	@ (80004d4 <MX_SPI1_Init+0x78>)
 8000464:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000466:	4b1a      	ldr	r3, [pc, #104]	@ (80004d0 <MX_SPI1_Init+0x74>)
 8000468:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800046c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <MX_SPI1_Init+0x74>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000474:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <MX_SPI1_Init+0x74>)
 8000476:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800047a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800047c:	4b14      	ldr	r3, [pc, #80]	@ (80004d0 <MX_SPI1_Init+0x74>)
 800047e:	2200      	movs	r2, #0
 8000480:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000482:	4b13      	ldr	r3, [pc, #76]	@ (80004d0 <MX_SPI1_Init+0x74>)
 8000484:	2200      	movs	r2, #0
 8000486:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000488:	4b11      	ldr	r3, [pc, #68]	@ (80004d0 <MX_SPI1_Init+0x74>)
 800048a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800048e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <MX_SPI1_Init+0x74>)
 8000492:	2208      	movs	r2, #8
 8000494:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000496:	4b0e      	ldr	r3, [pc, #56]	@ (80004d0 <MX_SPI1_Init+0x74>)
 8000498:	2200      	movs	r2, #0
 800049a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800049c:	4b0c      	ldr	r3, [pc, #48]	@ (80004d0 <MX_SPI1_Init+0x74>)
 800049e:	2200      	movs	r2, #0
 80004a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004a2:	4b0b      	ldr	r3, [pc, #44]	@ (80004d0 <MX_SPI1_Init+0x74>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004a8:	4b09      	ldr	r3, [pc, #36]	@ (80004d0 <MX_SPI1_Init+0x74>)
 80004aa:	2207      	movs	r2, #7
 80004ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004ae:	4b08      	ldr	r3, [pc, #32]	@ (80004d0 <MX_SPI1_Init+0x74>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004b4:	4b06      	ldr	r3, [pc, #24]	@ (80004d0 <MX_SPI1_Init+0x74>)
 80004b6:	2208      	movs	r2, #8
 80004b8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004ba:	4805      	ldr	r0, [pc, #20]	@ (80004d0 <MX_SPI1_Init+0x74>)
 80004bc:	f002 fbac 	bl	8002c18 <HAL_SPI_Init>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004c6:	f000 f8d7 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	200000d8 	.word	0x200000d8
 80004d4:	40013000 	.word	0x40013000

080004d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80004dc:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 80004de:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <MX_USART1_UART_Init+0x5c>)
 80004e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004e2:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 80004e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000502:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000508:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800050e:	4b08      	ldr	r3, [pc, #32]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 8000510:	2200      	movs	r2, #0
 8000512:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 8000516:	2200      	movs	r2, #0
 8000518:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800051a:	4805      	ldr	r0, [pc, #20]	@ (8000530 <MX_USART1_UART_Init+0x58>)
 800051c:	f002 fc27 	bl	8002d6e <HAL_UART_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000526:	f000 f8a7 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	2000013c 	.word	0x2000013c
 8000534:	40013800 	.word	0x40013800

08000538 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 800053c:	4b0d      	ldr	r3, [pc, #52]	@ (8000574 <MX_USB_PCD_Init+0x3c>)
 800053e:	4a0e      	ldr	r2, [pc, #56]	@ (8000578 <MX_USB_PCD_Init+0x40>)
 8000540:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000542:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <MX_USB_PCD_Init+0x3c>)
 8000544:	2208      	movs	r2, #8
 8000546:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000548:	4b0a      	ldr	r3, [pc, #40]	@ (8000574 <MX_USB_PCD_Init+0x3c>)
 800054a:	2202      	movs	r2, #2
 800054c:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <MX_USB_PCD_Init+0x3c>)
 8000550:	2202      	movs	r2, #2
 8000552:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000554:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <MX_USB_PCD_Init+0x3c>)
 8000556:	2200      	movs	r2, #0
 8000558:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800055a:	4b06      	ldr	r3, [pc, #24]	@ (8000574 <MX_USB_PCD_Init+0x3c>)
 800055c:	2200      	movs	r2, #0
 800055e:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000560:	4804      	ldr	r0, [pc, #16]	@ (8000574 <MX_USB_PCD_Init+0x3c>)
 8000562:	f000 fec3 	bl	80012ec <HAL_PCD_Init>
 8000566:	4603      	mov	r3, r0
 8000568:	2b00      	cmp	r3, #0
 800056a:	d001      	beq.n	8000570 <MX_USB_PCD_Init+0x38>
  {
    Error_Handler();
 800056c:	f000 f884 	bl	8000678 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200001c4 	.word	0x200001c4
 8000578:	40005c00 	.word	0x40005c00

0800057c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	@ 0x28
 8000580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000592:	4b37      	ldr	r3, [pc, #220]	@ (8000670 <MX_GPIO_Init+0xf4>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	4a36      	ldr	r2, [pc, #216]	@ (8000670 <MX_GPIO_Init+0xf4>)
 8000598:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800059c:	6153      	str	r3, [r2, #20]
 800059e:	4b34      	ldr	r3, [pc, #208]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005a6:	613b      	str	r3, [r7, #16]
 80005a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005aa:	4b31      	ldr	r3, [pc, #196]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	4a30      	ldr	r2, [pc, #192]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005b4:	6153      	str	r3, [r2, #20]
 80005b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005cc:	6153      	str	r3, [r2, #20]
 80005ce:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005d0:	695b      	ldr	r3, [r3, #20]
 80005d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b25      	ldr	r3, [pc, #148]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a24      	ldr	r2, [pc, #144]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b22      	ldr	r3, [pc, #136]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005f4:	695b      	ldr	r3, [r3, #20]
 80005f6:	4a1e      	ldr	r2, [pc, #120]	@ (8000670 <MX_GPIO_Init+0xf4>)
 80005f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80005fc:	6153      	str	r3, [r2, #20]
 80005fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <MX_GPIO_Init+0xf4>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 800060a:	2200      	movs	r2, #0
 800060c:	f64f 7108 	movw	r1, #65288	@ 0xff08
 8000610:	4818      	ldr	r0, [pc, #96]	@ (8000674 <MX_GPIO_Init+0xf8>)
 8000612:	f000 fd21 	bl	8001058 <HAL_GPIO_WritePin>
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : DRDY_Pin MEMS_INT3_Pin MEMS_INT4_Pin MEMS_INT1_Pin
                           MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = DRDY_Pin|MEMS_INT3_Pin|MEMS_INT4_Pin|MEMS_INT1_Pin
 8000616:	2337      	movs	r3, #55	@ 0x37
 8000618:	617b      	str	r3, [r7, #20]
                          |MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800061a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800061e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	4812      	ldr	r0, [pc, #72]	@ (8000674 <MX_GPIO_Init+0xf8>)
 800062c:	f000 fb9a 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD3_Pin LD5_Pin
                           LD7_Pin LD9_Pin LD10_Pin LD8_Pin
                           LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD3_Pin|LD5_Pin
 8000630:	f64f 7308 	movw	r3, #65288	@ 0xff08
 8000634:	617b      	str	r3, [r7, #20]
                          |LD7_Pin|LD9_Pin|LD10_Pin|LD8_Pin
                          |LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	2301      	movs	r3, #1
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4619      	mov	r1, r3
 8000648:	480a      	ldr	r0, [pc, #40]	@ (8000674 <MX_GPIO_Init+0xf8>)
 800064a:	f000 fb8b 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800064e:	2301      	movs	r3, #1
 8000650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000664:	f000 fb7e 	bl	8000d64 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000668:	bf00      	nop
 800066a:	3728      	adds	r7, #40	@ 0x28
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	48001000 	.word	0x48001000

08000678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800067c:	b672      	cpsid	i
}
 800067e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000680:	bf00      	nop
 8000682:	e7fd      	b.n	8000680 <Error_Handler+0x8>

08000684 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068a:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <HAL_MspInit+0x44>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a0e      	ldr	r2, [pc, #56]	@ (80006c8 <HAL_MspInit+0x44>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6193      	str	r3, [r2, #24]
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <HAL_MspInit+0x44>)
 8000698:	699b      	ldr	r3, [r3, #24]
 800069a:	f003 0301 	and.w	r3, r3, #1
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a2:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <HAL_MspInit+0x44>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a08      	ldr	r2, [pc, #32]	@ (80006c8 <HAL_MspInit+0x44>)
 80006a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b06      	ldr	r3, [pc, #24]	@ (80006c8 <HAL_MspInit+0x44>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80006ba:	2007      	movs	r0, #7
 80006bc:	f000 fb1e 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40021000 	.word	0x40021000

080006cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d4:	f107 0314 	add.w	r3, r7, #20
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a17      	ldr	r2, [pc, #92]	@ (8000748 <HAL_I2C_MspInit+0x7c>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d127      	bne.n	800073e <HAL_I2C_MspInit+0x72>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <HAL_I2C_MspInit+0x80>)
 80006f0:	695b      	ldr	r3, [r3, #20]
 80006f2:	4a16      	ldr	r2, [pc, #88]	@ (800074c <HAL_I2C_MspInit+0x80>)
 80006f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80006f8:	6153      	str	r3, [r2, #20]
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <HAL_I2C_MspInit+0x80>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000706:	23c0      	movs	r3, #192	@ 0xc0
 8000708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800070a:	2312      	movs	r3, #18
 800070c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800070e:	2301      	movs	r3, #1
 8000710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000712:	2303      	movs	r3, #3
 8000714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000716:	2304      	movs	r3, #4
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	480b      	ldr	r0, [pc, #44]	@ (8000750 <HAL_I2C_MspInit+0x84>)
 8000722:	f000 fb1f 	bl	8000d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <HAL_I2C_MspInit+0x80>)
 8000728:	69db      	ldr	r3, [r3, #28]
 800072a:	4a08      	ldr	r2, [pc, #32]	@ (800074c <HAL_I2C_MspInit+0x80>)
 800072c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000730:	61d3      	str	r3, [r2, #28]
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <HAL_I2C_MspInit+0x80>)
 8000734:	69db      	ldr	r3, [r3, #28]
 8000736:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800073e:	bf00      	nop
 8000740:	3728      	adds	r7, #40	@ 0x28
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40005400 	.word	0x40005400
 800074c:	40021000 	.word	0x40021000
 8000750:	48000400 	.word	0x48000400

08000754 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0314 	add.w	r3, r7, #20
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a17      	ldr	r2, [pc, #92]	@ (80007d0 <HAL_SPI_MspInit+0x7c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d128      	bne.n	80007c8 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000776:	4b17      	ldr	r3, [pc, #92]	@ (80007d4 <HAL_SPI_MspInit+0x80>)
 8000778:	699b      	ldr	r3, [r3, #24]
 800077a:	4a16      	ldr	r2, [pc, #88]	@ (80007d4 <HAL_SPI_MspInit+0x80>)
 800077c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000780:	6193      	str	r3, [r2, #24]
 8000782:	4b14      	ldr	r3, [pc, #80]	@ (80007d4 <HAL_SPI_MspInit+0x80>)
 8000784:	699b      	ldr	r3, [r3, #24]
 8000786:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	4b11      	ldr	r3, [pc, #68]	@ (80007d4 <HAL_SPI_MspInit+0x80>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a10      	ldr	r2, [pc, #64]	@ (80007d4 <HAL_SPI_MspInit+0x80>)
 8000794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <HAL_SPI_MspInit+0x80>)
 800079c:	695b      	ldr	r3, [r3, #20]
 800079e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 80007a6:	23e0      	movs	r3, #224	@ 0xe0
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007b6:	2305      	movs	r3, #5
 80007b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007c4:	f000 face 	bl	8000d64 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	@ 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40013000 	.word	0x40013000
 80007d4:	40021000 	.word	0x40021000

080007d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	@ 0x28
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a17      	ldr	r2, [pc, #92]	@ (8000854 <HAL_UART_MspInit+0x7c>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d127      	bne.n	800084a <HAL_UART_MspInit+0x72>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80007fa:	4b17      	ldr	r3, [pc, #92]	@ (8000858 <HAL_UART_MspInit+0x80>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a16      	ldr	r2, [pc, #88]	@ (8000858 <HAL_UART_MspInit+0x80>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b14      	ldr	r3, [pc, #80]	@ (8000858 <HAL_UART_MspInit+0x80>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_UART_MspInit+0x80>)
 8000814:	695b      	ldr	r3, [r3, #20]
 8000816:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <HAL_UART_MspInit+0x80>)
 8000818:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800081c:	6153      	str	r3, [r2, #20]
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <HAL_UART_MspInit+0x80>)
 8000820:	695b      	ldr	r3, [r3, #20]
 8000822:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800082a:	2330      	movs	r3, #48	@ 0x30
 800082c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	2302      	movs	r3, #2
 8000830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	2300      	movs	r3, #0
 8000834:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000836:	2303      	movs	r3, #3
 8000838:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800083a:	2307      	movs	r3, #7
 800083c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <HAL_UART_MspInit+0x84>)
 8000846:	f000 fa8d 	bl	8000d64 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	@ 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40013800 	.word	0x40013800
 8000858:	40021000 	.word	0x40021000
 800085c:	48000800 	.word	0x48000800

08000860 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a18      	ldr	r2, [pc, #96]	@ (80008e0 <HAL_PCD_MspInit+0x80>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d129      	bne.n	80008d6 <HAL_PCD_MspInit+0x76>
  {
    /* USER CODE BEGIN USB_MspInit 0 */

    /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <HAL_PCD_MspInit+0x84>)
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	4a17      	ldr	r2, [pc, #92]	@ (80008e4 <HAL_PCD_MspInit+0x84>)
 8000888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800088c:	6153      	str	r3, [r2, #20]
 800088e:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <HAL_PCD_MspInit+0x84>)
 8000890:	695b      	ldr	r3, [r3, #20]
 8000892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800089a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a8:	2303      	movs	r3, #3
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80008ac:	230e      	movs	r3, #14
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ba:	f000 fa53 	bl	8000d64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80008be:	4b09      	ldr	r3, [pc, #36]	@ (80008e4 <HAL_PCD_MspInit+0x84>)
 80008c0:	69db      	ldr	r3, [r3, #28]
 80008c2:	4a08      	ldr	r2, [pc, #32]	@ (80008e4 <HAL_PCD_MspInit+0x84>)
 80008c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80008c8:	61d3      	str	r3, [r2, #28]
 80008ca:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <HAL_PCD_MspInit+0x84>)
 80008cc:	69db      	ldr	r3, [r3, #28]
 80008ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_MspInit 1 */

  }

}
 80008d6:	bf00      	nop
 80008d8:	3728      	adds	r7, #40	@ 0x28
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40005c00 	.word	0x40005c00
 80008e4:	40021000 	.word	0x40021000

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <NMI_Handler+0x4>

080008f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <MemManage_Handler+0x4>

08000900 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <UsageFault_Handler+0x4>

08000910 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr

0800093a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093a:	b580      	push	{r7, lr}
 800093c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093e:	f000 f90b 	bl	8000b58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}

08000946 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b086      	sub	sp, #24
 800094a:	af00      	add	r7, sp, #0
 800094c:	60f8      	str	r0, [r7, #12]
 800094e:	60b9      	str	r1, [r7, #8]
 8000950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	e00a      	b.n	800096e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000958:	f3af 8000 	nop.w
 800095c:	4601      	mov	r1, r0
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	60ba      	str	r2, [r7, #8]
 8000964:	b2ca      	uxtb	r2, r1
 8000966:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	3301      	adds	r3, #1
 800096c:	617b      	str	r3, [r7, #20]
 800096e:	697a      	ldr	r2, [r7, #20]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	429a      	cmp	r2, r3
 8000974:	dbf0      	blt.n	8000958 <_read+0x12>
  }

  return len;
 8000976:	687b      	ldr	r3, [r7, #4]
}
 8000978:	4618      	mov	r0, r3
 800097a:	3718      	adds	r7, #24
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}

08000980 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000988:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009a8:	605a      	str	r2, [r3, #4]
  return 0;
 80009aa:	2300      	movs	r3, #0
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	370c      	adds	r7, #12
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <_isatty>:

int _isatty(int file)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c0:	2301      	movs	r3, #1
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	370c      	adds	r7, #12
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr

080009ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ce:	b480      	push	{r7}
 80009d0:	b085      	sub	sp, #20
 80009d2:	af00      	add	r7, sp, #0
 80009d4:	60f8      	str	r0, [r7, #12]
 80009d6:	60b9      	str	r1, [r7, #8]
 80009d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009da:	2300      	movs	r3, #0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3714      	adds	r7, #20
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f0:	4a14      	ldr	r2, [pc, #80]	@ (8000a44 <_sbrk+0x5c>)
 80009f2:	4b15      	ldr	r3, [pc, #84]	@ (8000a48 <_sbrk+0x60>)
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009fc:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <_sbrk+0x64>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d102      	bne.n	8000a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <_sbrk+0x64>)
 8000a06:	4a12      	ldr	r2, [pc, #72]	@ (8000a50 <_sbrk+0x68>)
 8000a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0a:	4b10      	ldr	r3, [pc, #64]	@ (8000a4c <_sbrk+0x64>)
 8000a0c:	681a      	ldr	r2, [r3, #0]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	693a      	ldr	r2, [r7, #16]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d207      	bcs.n	8000a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a18:	f003 f900 	bl	8003c1c <__errno>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	220c      	movs	r2, #12
 8000a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	e009      	b.n	8000a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a28:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <_sbrk+0x64>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a2e:	4b07      	ldr	r3, [pc, #28]	@ (8000a4c <_sbrk+0x64>)
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	4413      	add	r3, r2
 8000a36:	4a05      	ldr	r2, [pc, #20]	@ (8000a4c <_sbrk+0x64>)
 8000a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000a000 	.word	0x2000a000
 8000a48:	00000400 	.word	0x00000400
 8000a4c:	20000498 	.word	0x20000498
 8000a50:	200005f0 	.word	0x200005f0

08000a54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab0 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a7c:	f7ff ffea 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f003 f8bf 	bl	8003c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aaa:	f7ff fc07 	bl	80002bc <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ab0:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000abc:	08004740 	.word	0x08004740
  ldr r2, =_sbss
 8000ac0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ac4:	200005ec 	.word	0x200005ec

08000ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_2_IRQHandler>
	...

08000acc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad0:	4b08      	ldr	r3, [pc, #32]	@ (8000af4 <HAL_Init+0x28>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a07      	ldr	r2, [pc, #28]	@ (8000af4 <HAL_Init+0x28>)
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000adc:	2003      	movs	r0, #3
 8000ade:	f000 f90d 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ae2:	2000      	movs	r0, #0
 8000ae4:	f000 f808 	bl	8000af8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ae8:	f7ff fdcc 	bl	8000684 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40022000 	.word	0x40022000

08000af8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b00:	4b12      	ldr	r3, [pc, #72]	@ (8000b4c <HAL_InitTick+0x54>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b12      	ldr	r3, [pc, #72]	@ (8000b50 <HAL_InitTick+0x58>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	4619      	mov	r1, r3
 8000b0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b16:	4618      	mov	r0, r3
 8000b18:	f000 f917 	bl	8000d4a <HAL_SYSTICK_Config>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	e00e      	b.n	8000b44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2b0f      	cmp	r3, #15
 8000b2a:	d80a      	bhi.n	8000b42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	f04f 30ff 	mov.w	r0, #4294967295
 8000b34:	f000 f8ed 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b38:	4a06      	ldr	r2, [pc, #24]	@ (8000b54 <HAL_InitTick+0x5c>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	e000      	b.n	8000b44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20000000 	.word	0x20000000
 8000b50:	20000008 	.word	0x20000008
 8000b54:	20000004 	.word	0x20000004

08000b58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_IncTick+0x20>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	461a      	mov	r2, r3
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <HAL_IncTick+0x24>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4413      	add	r3, r2
 8000b68:	4a04      	ldr	r2, [pc, #16]	@ (8000b7c <HAL_IncTick+0x24>)
 8000b6a:	6013      	str	r3, [r2, #0]
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008
 8000b7c:	2000049c 	.word	0x2000049c

08000b80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000b84:	4b03      	ldr	r3, [pc, #12]	@ (8000b94 <HAL_GetTick+0x14>)
 8000b86:	681b      	ldr	r3, [r3, #0]
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	2000049c 	.word	0x2000049c

08000b98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b085      	sub	sp, #20
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bca:	4a04      	ldr	r2, [pc, #16]	@ (8000bdc <__NVIC_SetPriorityGrouping+0x44>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	60d3      	str	r3, [r2, #12]
}
 8000bd0:	bf00      	nop
 8000bd2:	3714      	adds	r7, #20
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be4:	4b04      	ldr	r3, [pc, #16]	@ (8000bf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	0a1b      	lsrs	r3, r3, #8
 8000bea:	f003 0307 	and.w	r3, r3, #7
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	6039      	str	r1, [r7, #0]
 8000c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	db0a      	blt.n	8000c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	490c      	ldr	r1, [pc, #48]	@ (8000c48 <__NVIC_SetPriority+0x4c>)
 8000c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1a:	0112      	lsls	r2, r2, #4
 8000c1c:	b2d2      	uxtb	r2, r2
 8000c1e:	440b      	add	r3, r1
 8000c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c24:	e00a      	b.n	8000c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	4908      	ldr	r1, [pc, #32]	@ (8000c4c <__NVIC_SetPriority+0x50>)
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	f003 030f 	and.w	r3, r3, #15
 8000c32:	3b04      	subs	r3, #4
 8000c34:	0112      	lsls	r2, r2, #4
 8000c36:	b2d2      	uxtb	r2, r2
 8000c38:	440b      	add	r3, r1
 8000c3a:	761a      	strb	r2, [r3, #24]
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000e100 	.word	0xe000e100
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b089      	sub	sp, #36	@ 0x24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	f003 0307 	and.w	r3, r3, #7
 8000c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c64:	69fb      	ldr	r3, [r7, #28]
 8000c66:	f1c3 0307 	rsb	r3, r3, #7
 8000c6a:	2b04      	cmp	r3, #4
 8000c6c:	bf28      	it	cs
 8000c6e:	2304      	movcs	r3, #4
 8000c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	3304      	adds	r3, #4
 8000c76:	2b06      	cmp	r3, #6
 8000c78:	d902      	bls.n	8000c80 <NVIC_EncodePriority+0x30>
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	3b03      	subs	r3, #3
 8000c7e:	e000      	b.n	8000c82 <NVIC_EncodePriority+0x32>
 8000c80:	2300      	movs	r3, #0
 8000c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c84:	f04f 32ff 	mov.w	r2, #4294967295
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8e:	43da      	mvns	r2, r3
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	401a      	ands	r2, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c98:	f04f 31ff 	mov.w	r1, #4294967295
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca2:	43d9      	mvns	r1, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca8:	4313      	orrs	r3, r2
         );
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3724      	adds	r7, #36	@ 0x24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
	...

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff8e 	bl	8000bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff47 	bl	8000b98 <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff5c 	bl	8000be0 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff8e 	bl	8000c50 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5d 	bl	8000bfc <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b087      	sub	sp, #28
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d72:	e154      	b.n	800101e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8146 	beq.w	8001018 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f003 0303 	and.w	r3, r3, #3
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d005      	beq.n	8000da4 <HAL_GPIO_Init+0x40>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f003 0303 	and.w	r3, r3, #3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d130      	bne.n	8000e06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2203      	movs	r2, #3
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dda:	2201      	movs	r2, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	091b      	lsrs	r3, r3, #4
 8000df0:	f003 0201 	and.w	r2, r3, #1
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f003 0303 	and.w	r3, r3, #3
 8000e0e:	2b03      	cmp	r3, #3
 8000e10:	d017      	beq.n	8000e42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	2203      	movs	r2, #3
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	689a      	ldr	r2, [r3, #8]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f003 0303 	and.w	r3, r3, #3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d123      	bne.n	8000e96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	08da      	lsrs	r2, r3, #3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	3208      	adds	r2, #8
 8000e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	220f      	movs	r2, #15
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	691a      	ldr	r2, [r3, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	f003 0307 	and.w	r3, r3, #7
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	6939      	ldr	r1, [r7, #16]
 8000e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0203 	and.w	r2, r3, #3
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 80a0 	beq.w	8001018 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed8:	4b58      	ldr	r3, [pc, #352]	@ (800103c <HAL_GPIO_Init+0x2d8>)
 8000eda:	699b      	ldr	r3, [r3, #24]
 8000edc:	4a57      	ldr	r2, [pc, #348]	@ (800103c <HAL_GPIO_Init+0x2d8>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6193      	str	r3, [r2, #24]
 8000ee4:	4b55      	ldr	r3, [pc, #340]	@ (800103c <HAL_GPIO_Init+0x2d8>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ef0:	4a53      	ldr	r2, [pc, #332]	@ (8001040 <HAL_GPIO_Init+0x2dc>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f1a:	d019      	beq.n	8000f50 <HAL_GPIO_Init+0x1ec>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a49      	ldr	r2, [pc, #292]	@ (8001044 <HAL_GPIO_Init+0x2e0>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d013      	beq.n	8000f4c <HAL_GPIO_Init+0x1e8>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a48      	ldr	r2, [pc, #288]	@ (8001048 <HAL_GPIO_Init+0x2e4>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d00d      	beq.n	8000f48 <HAL_GPIO_Init+0x1e4>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a47      	ldr	r2, [pc, #284]	@ (800104c <HAL_GPIO_Init+0x2e8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d007      	beq.n	8000f44 <HAL_GPIO_Init+0x1e0>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4a46      	ldr	r2, [pc, #280]	@ (8001050 <HAL_GPIO_Init+0x2ec>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d101      	bne.n	8000f40 <HAL_GPIO_Init+0x1dc>
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	e008      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f40:	2305      	movs	r3, #5
 8000f42:	e006      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f44:	2303      	movs	r3, #3
 8000f46:	e004      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e002      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f50:	2300      	movs	r3, #0
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	f002 0203 	and.w	r2, r2, #3
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	4093      	lsls	r3, r2
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f62:	4937      	ldr	r1, [pc, #220]	@ (8001040 <HAL_GPIO_Init+0x2dc>)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f70:	4b38      	ldr	r3, [pc, #224]	@ (8001054 <HAL_GPIO_Init+0x2f0>)
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f94:	4a2f      	ldr	r2, [pc, #188]	@ (8001054 <HAL_GPIO_Init+0x2f0>)
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001054 <HAL_GPIO_Init+0x2f0>)
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	693a      	ldr	r2, [r7, #16]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fbe:	4a25      	ldr	r2, [pc, #148]	@ (8001054 <HAL_GPIO_Init+0x2f0>)
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fc4:	4b23      	ldr	r3, [pc, #140]	@ (8001054 <HAL_GPIO_Init+0x2f0>)
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8001054 <HAL_GPIO_Init+0x2f0>)
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <HAL_GPIO_Init+0x2f0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4313      	orrs	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001012:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <HAL_GPIO_Init+0x2f0>)
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	3301      	adds	r3, #1
 800101c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	fa22 f303 	lsr.w	r3, r2, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	f47f aea3 	bne.w	8000d74 <HAL_GPIO_Init+0x10>
  }
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	371c      	adds	r7, #28
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000
 8001044:	48000400 	.word	0x48000400
 8001048:	48000800 	.word	0x48000800
 800104c:	48000c00 	.word	0x48000c00
 8001050:	48001000 	.word	0x48001000
 8001054:	40010400 	.word	0x40010400

08001058 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	807b      	strh	r3, [r7, #2]
 8001064:	4613      	mov	r3, r2
 8001066:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001068:	787b      	ldrb	r3, [r7, #1]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800106e:	887a      	ldrh	r2, [r7, #2]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001074:	e002      	b.n	800107c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e08d      	b.n	80011b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d106      	bne.n	80010b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fb0c 	bl	80006cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2224      	movs	r2, #36	@ 0x24
 80010b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f022 0201 	bic.w	r2, r2, #1
 80010ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685a      	ldr	r2, [r3, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d107      	bne.n	8001102 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	e006      	b.n	8001110 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800110e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d108      	bne.n	800112a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	e007      	b.n	800113a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001138:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001148:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800114c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800115c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691a      	ldr	r2, [r3, #16]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	430a      	orrs	r2, r1
 8001176:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	69d9      	ldr	r1, [r3, #28]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6a1a      	ldr	r2, [r3, #32]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0201 	orr.w	r2, r2, #1
 8001196:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2220      	movs	r2, #32
 80011a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80011be:	b480      	push	{r7}
 80011c0:	b083      	sub	sp, #12
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
 80011c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2b20      	cmp	r3, #32
 80011d2:	d138      	bne.n	8001246 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80011de:	2302      	movs	r3, #2
 80011e0:	e032      	b.n	8001248 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2224      	movs	r2, #36	@ 0x24
 80011ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0201 	bic.w	r2, r2, #1
 8001200:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001210:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	430a      	orrs	r2, r1
 8001220:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f042 0201 	orr.w	r2, r2, #1
 8001230:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2220      	movs	r2, #32
 8001236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001246:	2302      	movs	r3, #2
  }
}
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b20      	cmp	r3, #32
 8001268:	d139      	bne.n	80012de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001270:	2b01      	cmp	r3, #1
 8001272:	d101      	bne.n	8001278 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001274:	2302      	movs	r3, #2
 8001276:	e033      	b.n	80012e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2224      	movs	r2, #36	@ 0x24
 8001284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80012a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	021b      	lsls	r3, r3, #8
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2220      	movs	r2, #32
 80012ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80012de:	2302      	movs	r3, #2
  }
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d101      	bne.n	80012fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e0b9      	b.n	8001472 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d106      	bne.n	8001318 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2200      	movs	r2, #0
 800130e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff faa4 	bl	8000860 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2203      	movs	r2, #3
 800131c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f002 f9e8 	bl	80036fa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800132a:	2300      	movs	r3, #0
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e03e      	b.n	80013ae <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	4613      	mov	r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	4413      	add	r3, r2
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	440b      	add	r3, r1
 800133e:	3311      	adds	r3, #17
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001344:	7bfa      	ldrb	r2, [r7, #15]
 8001346:	6879      	ldr	r1, [r7, #4]
 8001348:	4613      	mov	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	4413      	add	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	440b      	add	r3, r1
 8001352:	3310      	adds	r3, #16
 8001354:	7bfa      	ldrb	r2, [r7, #15]
 8001356:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001358:	7bfa      	ldrb	r2, [r7, #15]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	009b      	lsls	r3, r3, #2
 8001360:	4413      	add	r3, r2
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	440b      	add	r3, r1
 8001366:	3313      	adds	r3, #19
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	00db      	lsls	r3, r3, #3
 8001378:	440b      	add	r3, r1
 800137a:	3320      	adds	r3, #32
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001380:	7bfa      	ldrb	r2, [r7, #15]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	440b      	add	r3, r1
 800138e:	3324      	adds	r3, #36	@ 0x24
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001394:	7bfb      	ldrb	r3, [r7, #15]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	440b      	add	r3, r1
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	3301      	adds	r3, #1
 80013ac:	73fb      	strb	r3, [r7, #15]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	791b      	ldrb	r3, [r3, #4]
 80013b2:	7bfa      	ldrb	r2, [r7, #15]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d3bb      	bcc.n	8001330 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e044      	b.n	8001448 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	4413      	add	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	440b      	add	r3, r1
 80013cc:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80013d0:	2200      	movs	r2, #0
 80013d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	440b      	add	r3, r1
 80013f8:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80013fc:	2200      	movs	r2, #0
 80013fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001400:	7bfa      	ldrb	r2, [r7, #15]
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	440b      	add	r3, r1
 8001424:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001442:	7bfb      	ldrb	r3, [r7, #15]
 8001444:	3301      	adds	r3, #1
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	791b      	ldrb	r3, [r3, #4]
 800144c:	7bfa      	ldrb	r2, [r7, #15]
 800144e:	429a      	cmp	r2, r3
 8001450:	d3b5      	bcc.n	80013be <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3304      	adds	r3, #4
 800145a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800145e:	f002 f967 	bl	8003730 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001482:	af00      	add	r7, sp, #0
 8001484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001488:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800148c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001492:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	f000 bff4 	b.w	800248a <HAL_RCC_OscConfig+0x100e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 816d 	beq.w	8001792 <HAL_RCC_OscConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014b8:	4bb4      	ldr	r3, [pc, #720]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 030c 	and.w	r3, r3, #12
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d00c      	beq.n	80014de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014c4:	4bb1      	ldr	r3, [pc, #708]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 030c 	and.w	r3, r3, #12
 80014cc:	2b08      	cmp	r3, #8
 80014ce:	d157      	bne.n	8001580 <HAL_RCC_OscConfig+0x104>
 80014d0:	4bae      	ldr	r3, [pc, #696]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014dc:	d150      	bne.n	8001580 <HAL_RCC_OscConfig+0x104>
 80014de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014e2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80014ea:	fa93 f3a3 	rbit	r3, r3
 80014ee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b3f      	cmp	r3, #63	@ 0x3f
 80014fe:	d802      	bhi.n	8001506 <HAL_RCC_OscConfig+0x8a>
 8001500:	4ba2      	ldr	r3, [pc, #648]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	e015      	b.n	8001532 <HAL_RCC_OscConfig+0xb6>
 8001506:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800150a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001512:	fa93 f3a3 	rbit	r3, r3
 8001516:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800151a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800151e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001522:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001526:	fa93 f3a3 	rbit	r3, r3
 800152a:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800152e:	4b97      	ldr	r3, [pc, #604]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 8001530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001532:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001536:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800153a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800153e:	fa92 f2a2 	rbit	r2, r2
 8001542:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001546:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800154a:	fab2 f282 	clz	r2, r2
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	f042 0220 	orr.w	r2, r2, #32
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f002 021f 	and.w	r2, r2, #31
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	f000 8114 	beq.w	8001790 <HAL_RCC_OscConfig+0x314>
 8001568:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800156c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	f040 810b 	bne.w	8001790 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	f000 bf85 	b.w	800248a <HAL_RCC_OscConfig+0x100e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001580:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001584:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001590:	d106      	bne.n	80015a0 <HAL_RCC_OscConfig+0x124>
 8001592:	4b7e      	ldr	r3, [pc, #504]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a7d      	ldr	r2, [pc, #500]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 8001598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	e036      	b.n	800160e <HAL_RCC_OscConfig+0x192>
 80015a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x14e>
 80015b0:	4b76      	ldr	r3, [pc, #472]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a75      	ldr	r2, [pc, #468]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b73      	ldr	r3, [pc, #460]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a72      	ldr	r2, [pc, #456]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	e021      	b.n	800160e <HAL_RCC_OscConfig+0x192>
 80015ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x17a>
 80015dc:	4b6b      	ldr	r3, [pc, #428]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a6a      	ldr	r2, [pc, #424]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80015e2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015e6:	6013      	str	r3, [r2, #0]
 80015e8:	4b68      	ldr	r3, [pc, #416]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a67      	ldr	r2, [pc, #412]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80015ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	e00b      	b.n	800160e <HAL_RCC_OscConfig+0x192>
 80015f6:	4b65      	ldr	r3, [pc, #404]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a64      	ldr	r2, [pc, #400]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80015fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001600:	6013      	str	r3, [r2, #0]
 8001602:	4b62      	ldr	r3, [pc, #392]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a61      	ldr	r2, [pc, #388]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 8001608:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800160c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800160e:	4b5f      	ldr	r3, [pc, #380]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 8001610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001612:	f023 020f 	bic.w	r2, r3, #15
 8001616:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800161a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	495a      	ldr	r1, [pc, #360]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 8001624:	4313      	orrs	r3, r2
 8001626:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800162c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d054      	beq.n	80016e2 <HAL_RCC_OscConfig+0x266>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff faa2 	bl	8000b80 <HAL_GetTick>
 800163c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001640:	e00a      	b.n	8001658 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001642:	f7ff fa9d 	bl	8000b80 <HAL_GetTick>
 8001646:	4602      	mov	r2, r0
 8001648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	@ 0x64
 8001650:	d902      	bls.n	8001658 <HAL_RCC_OscConfig+0x1dc>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	f000 bf19 	b.w	800248a <HAL_RCC_OscConfig+0x100e>
 8001658:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800165c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800166c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b3f      	cmp	r3, #63	@ 0x3f
 8001678:	d802      	bhi.n	8001680 <HAL_RCC_OscConfig+0x204>
 800167a:	4b44      	ldr	r3, [pc, #272]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	e015      	b.n	80016ac <HAL_RCC_OscConfig+0x230>
 8001680:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001684:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800168c:	fa93 f3a3 	rbit	r3, r3
 8001690:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001694:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001698:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800169c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80016a0:	fa93 f3a3 	rbit	r3, r3
 80016a4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80016a8:	4b38      	ldr	r3, [pc, #224]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 80016aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ac:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016b0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80016b4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80016b8:	fa92 f2a2 	rbit	r2, r2
 80016bc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80016c0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80016c4:	fab2 f282 	clz	r2, r2
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	f042 0220 	orr.w	r2, r2, #32
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	f002 021f 	and.w	r2, r2, #31
 80016d4:	2101      	movs	r1, #1
 80016d6:	fa01 f202 	lsl.w	r2, r1, r2
 80016da:	4013      	ands	r3, r2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d0b0      	beq.n	8001642 <HAL_RCC_OscConfig+0x1c6>
 80016e0:	e057      	b.n	8001792 <HAL_RCC_OscConfig+0x316>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff fa4d 	bl	8000b80 <HAL_GetTick>
 80016e6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	e00a      	b.n	8001702 <HAL_RCC_OscConfig+0x286>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ec:	f7ff fa48 	bl	8000b80 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b64      	cmp	r3, #100	@ 0x64
 80016fa:	d902      	bls.n	8001702 <HAL_RCC_OscConfig+0x286>
          {
            return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	f000 bec4 	b.w	800248a <HAL_RCC_OscConfig+0x100e>
 8001702:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001706:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001716:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b3f      	cmp	r3, #63	@ 0x3f
 8001722:	d802      	bhi.n	800172a <HAL_RCC_OscConfig+0x2ae>
 8001724:	4b19      	ldr	r3, [pc, #100]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	e015      	b.n	8001756 <HAL_RCC_OscConfig+0x2da>
 800172a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800172e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001732:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001736:	fa93 f3a3 	rbit	r3, r3
 800173a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800173e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001742:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001746:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 800174a:	fa93 f3a3 	rbit	r3, r3
 800174e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_RCC_OscConfig+0x310>)
 8001754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001756:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800175a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800175e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001762:	fa92 f2a2 	rbit	r2, r2
 8001766:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 800176a:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800176e:	fab2 f282 	clz	r2, r2
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	f042 0220 	orr.w	r2, r2, #32
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	f002 021f 	and.w	r2, r2, #31
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f202 	lsl.w	r2, r1, r2
 8001784:	4013      	ands	r3, r2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1b0      	bne.n	80016ec <HAL_RCC_OscConfig+0x270>
 800178a:	e002      	b.n	8001792 <HAL_RCC_OscConfig+0x316>
 800178c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001796:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 816c 	beq.w	8001a80 <HAL_RCC_OscConfig+0x604>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80017a8:	4bcc      	ldr	r3, [pc, #816]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00b      	beq.n	80017cc <HAL_RCC_OscConfig+0x350>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80017b4:	4bc9      	ldr	r3, [pc, #804]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 030c 	and.w	r3, r3, #12
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d16d      	bne.n	800189c <HAL_RCC_OscConfig+0x420>
 80017c0:	4bc6      	ldr	r3, [pc, #792]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d167      	bne.n	800189c <HAL_RCC_OscConfig+0x420>
 80017cc:	2302      	movs	r3, #2
 80017ce:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80017d6:	fa93 f3a3 	rbit	r3, r3
 80017da:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80017de:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b3f      	cmp	r3, #63	@ 0x3f
 80017ea:	d802      	bhi.n	80017f2 <HAL_RCC_OscConfig+0x376>
 80017ec:	4bbb      	ldr	r3, [pc, #748]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	e013      	b.n	800181a <HAL_RCC_OscConfig+0x39e>
 80017f2:	2302      	movs	r3, #2
 80017f4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80017fc:	fa93 f3a3 	rbit	r3, r3
 8001800:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001804:	2302      	movs	r3, #2
 8001806:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800180a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800180e:	fa93 f3a3 	rbit	r3, r3
 8001812:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001816:	4bb1      	ldr	r3, [pc, #708]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 8001818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181a:	2202      	movs	r2, #2
 800181c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8001820:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8001824:	fa92 f2a2 	rbit	r2, r2
 8001828:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800182c:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8001830:	fab2 f282 	clz	r2, r2
 8001834:	b2d2      	uxtb	r2, r2
 8001836:	f042 0220 	orr.w	r2, r2, #32
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	f002 021f 	and.w	r2, r2, #31
 8001840:	2101      	movs	r1, #1
 8001842:	fa01 f202 	lsl.w	r2, r1, r2
 8001846:	4013      	ands	r3, r2
 8001848:	2b00      	cmp	r3, #0
 800184a:	d00a      	beq.n	8001862 <HAL_RCC_OscConfig+0x3e6>
 800184c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001850:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d002      	beq.n	8001862 <HAL_RCC_OscConfig+0x3e6>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	f000 be14 	b.w	800248a <HAL_RCC_OscConfig+0x100e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001862:	4b9e      	ldr	r3, [pc, #632]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800186a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800186e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695b      	ldr	r3, [r3, #20]
 8001876:	21f8      	movs	r1, #248	@ 0xf8
 8001878:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001880:	fa91 f1a1 	rbit	r1, r1
 8001884:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001888:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800188c:	fab1 f181 	clz	r1, r1
 8001890:	b2c9      	uxtb	r1, r1
 8001892:	408b      	lsls	r3, r1
 8001894:	4991      	ldr	r1, [pc, #580]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 8001896:	4313      	orrs	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	e0f1      	b.n	8001a80 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800189c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f000 8083 	beq.w	80019b4 <HAL_RCC_OscConfig+0x538>
 80018ae:	2301      	movs	r3, #1
 80018b0:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b4:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80018b8:	fa93 f3a3 	rbit	r3, r3
 80018bc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80018c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c4:	fab3 f383 	clz	r3, r3
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80018ce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	461a      	mov	r2, r3
 80018d6:	2301      	movs	r3, #1
 80018d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff f951 	bl	8000b80 <HAL_GetTick>
 80018de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x47e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff f94c 	bl	8000b80 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d902      	bls.n	80018fa <HAL_RCC_OscConfig+0x47e>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	f000 bdc8 	b.w	800248a <HAL_RCC_OscConfig+0x100e>
 80018fa:	2302      	movs	r3, #2
 80018fc:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001900:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001904:	fa93 f3a3 	rbit	r3, r3
 8001908:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800190c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001910:	fab3 f383 	clz	r3, r3
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b3f      	cmp	r3, #63	@ 0x3f
 8001918:	d802      	bhi.n	8001920 <HAL_RCC_OscConfig+0x4a4>
 800191a:	4b70      	ldr	r3, [pc, #448]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	e013      	b.n	8001948 <HAL_RCC_OscConfig+0x4cc>
 8001920:	2302      	movs	r3, #2
 8001922:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001932:	2302      	movs	r3, #2
 8001934:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8001938:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800193c:	fa93 f3a3 	rbit	r3, r3
 8001940:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001944:	4b65      	ldr	r3, [pc, #404]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 8001946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001948:	2202      	movs	r2, #2
 800194a:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800194e:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001952:	fa92 f2a2 	rbit	r2, r2
 8001956:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800195a:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800195e:	fab2 f282 	clz	r2, r2
 8001962:	b2d2      	uxtb	r2, r2
 8001964:	f042 0220 	orr.w	r2, r2, #32
 8001968:	b2d2      	uxtb	r2, r2
 800196a:	f002 021f 	and.w	r2, r2, #31
 800196e:	2101      	movs	r1, #1
 8001970:	fa01 f202 	lsl.w	r2, r1, r2
 8001974:	4013      	ands	r3, r2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0b4      	beq.n	80018e4 <HAL_RCC_OscConfig+0x468>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	4b58      	ldr	r3, [pc, #352]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001986:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	21f8      	movs	r1, #248	@ 0xf8
 8001990:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001994:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001998:	fa91 f1a1 	rbit	r1, r1
 800199c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80019a0:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80019a4:	fab1 f181 	clz	r1, r1
 80019a8:	b2c9      	uxtb	r1, r1
 80019aa:	408b      	lsls	r3, r1
 80019ac:	494b      	ldr	r1, [pc, #300]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
 80019b2:	e065      	b.n	8001a80 <HAL_RCC_OscConfig+0x604>
 80019b4:	2301      	movs	r3, #1
 80019b6:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ba:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80019be:	fa93 f3a3 	rbit	r3, r3
 80019c2:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80019c6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ca:	fab3 f383 	clz	r3, r3
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80019d4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	461a      	mov	r2, r3
 80019dc:	2300      	movs	r3, #0
 80019de:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff f8ce 	bl	8000b80 <HAL_GetTick>
 80019e4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ea:	f7ff f8c9 	bl	8000b80 <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d902      	bls.n	8001a00 <HAL_RCC_OscConfig+0x584>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	f000 bd45 	b.w	800248a <HAL_RCC_OscConfig+0x100e>
 8001a00:	2302      	movs	r3, #2
 8001a02:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	fab3 f383 	clz	r3, r3
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a1e:	d802      	bhi.n	8001a26 <HAL_RCC_OscConfig+0x5aa>
 8001a20:	4b2e      	ldr	r3, [pc, #184]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	e013      	b.n	8001a4e <HAL_RCC_OscConfig+0x5d2>
 8001a26:	2302      	movs	r3, #2
 8001a28:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001a38:	2302      	movs	r3, #2
 8001a3a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001a3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001a42:	fa93 f3a3 	rbit	r3, r3
 8001a46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001a4a:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_RCC_OscConfig+0x660>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	2202      	movs	r2, #2
 8001a50:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001a54:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001a58:	fa92 f2a2 	rbit	r2, r2
 8001a5c:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001a60:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001a64:	fab2 f282 	clz	r2, r2
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	f042 0220 	orr.w	r2, r2, #32
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	f002 021f 	and.w	r2, r2, #31
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1b4      	bne.n	80019ea <HAL_RCC_OscConfig+0x56e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a84:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8115 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x844>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a9a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d07e      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x728>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001ab0:	fa93 f3a3 	rbit	r3, r3
 8001ab4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_RCC_OscConfig+0x664>)
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	461a      	mov	r2, r3
 8001acc:	2301      	movs	r3, #1
 8001ace:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f856 	bl	8000b80 <HAL_GetTick>
 8001ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad8:	e00f      	b.n	8001afa <HAL_RCC_OscConfig+0x67e>
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff f84c 	bl	8000b80 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d902      	bls.n	8001afa <HAL_RCC_OscConfig+0x67e>
        {
          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	f000 bcc8 	b.w	800248a <HAL_RCC_OscConfig+0x100e>
 8001afa:	2302      	movs	r3, #2
 8001afc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b00:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001b04:	fa93 f3a3 	rbit	r3, r3
 8001b08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b10:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b14:	2202      	movs	r2, #2
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b1c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b38:	2202      	movs	r2, #2
 8001b3a:	601a      	str	r2, [r3, #0]
 8001b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	fa93 f2a3 	rbit	r2, r3
 8001b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b54:	4bb0      	ldr	r3, [pc, #704]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001b56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b5c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b60:	2102      	movs	r1, #2
 8001b62:	6019      	str	r1, [r3, #0]
 8001b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	fa93 f1a3 	rbit	r1, r3
 8001b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b76:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b7a:	6019      	str	r1, [r3, #0]
  return result;
 8001b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b80:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d0a0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x668>
 8001ba2:	e08d      	b.n	8001cc0 <HAL_RCC_OscConfig+0x844>
 8001ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ba8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001bac:	2201      	movs	r2, #1
 8001bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	fa93 f2a3 	rbit	r2, r3
 8001bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bc6:	601a      	str	r2, [r3, #0]
  return result;
 8001bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bcc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001bd0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b90      	ldr	r3, [pc, #576]	@ (8001e1c <HAL_RCC_OscConfig+0x9a0>)
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	461a      	mov	r2, r3
 8001be2:	2300      	movs	r3, #0
 8001be4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7fe ffcb 	bl	8000b80 <HAL_GetTick>
 8001bea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bee:	e00a      	b.n	8001c06 <HAL_RCC_OscConfig+0x78a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7fe ffc6 	bl	8000b80 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d902      	bls.n	8001c06 <HAL_RCC_OscConfig+0x78a>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	f000 bc42 	b.w	800248a <HAL_RCC_OscConfig+0x100e>
 8001c06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c0a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001c0e:	2202      	movs	r2, #2
 8001c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c16:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	fa93 f2a3 	rbit	r2, r3
 8001c20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c2e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c32:	2202      	movs	r2, #2
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c3a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c48:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001c4c:	601a      	str	r2, [r3, #0]
 8001c4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c52:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c56:	2202      	movs	r2, #2
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	fa93 f2a3 	rbit	r2, r3
 8001c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c6c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001c70:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c72:	4b69      	ldr	r3, [pc, #420]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001c74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c7a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c7e:	2102      	movs	r1, #2
 8001c80:	6019      	str	r1, [r3, #0]
 8001c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c86:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	fa93 f1a3 	rbit	r1, r3
 8001c90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c94:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001c98:	6019      	str	r1, [r3, #0]
  return result;
 8001c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c9e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	fab3 f383 	clz	r3, r3
 8001ca8:	b2db      	uxtb	r3, r3
 8001caa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d197      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x774>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cc0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 819e 	beq.w	8002012 <HAL_RCC_OscConfig+0xb96>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cdc:	4b4e      	ldr	r3, [pc, #312]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001cde:	69db      	ldr	r3, [r3, #28]
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d116      	bne.n	8001d16 <HAL_RCC_OscConfig+0x89a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ce8:	4b4b      	ldr	r3, [pc, #300]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	4a4a      	ldr	r2, [pc, #296]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cf2:	61d3      	str	r3, [r2, #28]
 8001cf4:	4b48      	ldr	r3, [pc, #288]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001cf6:	69db      	ldr	r3, [r3, #28]
 8001cf8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001cfc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d00:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d0a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001d0e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d16:	4b42      	ldr	r3, [pc, #264]	@ (8001e20 <HAL_RCC_OscConfig+0x9a4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x8dc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d22:	4b3f      	ldr	r3, [pc, #252]	@ (8001e20 <HAL_RCC_OscConfig+0x9a4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a3e      	ldr	r2, [pc, #248]	@ (8001e20 <HAL_RCC_OscConfig+0x9a4>)
 8001d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d2e:	f7fe ff27 	bl	8000b80 <HAL_GetTick>
 8001d32:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	e009      	b.n	8001d4c <HAL_RCC_OscConfig+0x8d0>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d38:	f7fe ff22 	bl	8000b80 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b64      	cmp	r3, #100	@ 0x64
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x8d0>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e39e      	b.n	800248a <HAL_RCC_OscConfig+0x100e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4c:	4b34      	ldr	r3, [pc, #208]	@ (8001e20 <HAL_RCC_OscConfig+0x9a4>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ef      	beq.n	8001d38 <HAL_RCC_OscConfig+0x8bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x8fa>
 8001d68:	4b2b      	ldr	r3, [pc, #172]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001d6a:	6a1b      	ldr	r3, [r3, #32]
 8001d6c:	4a2a      	ldr	r2, [pc, #168]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6213      	str	r3, [r2, #32]
 8001d74:	e035      	b.n	8001de2 <HAL_RCC_OscConfig+0x966>
 8001d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d7a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10c      	bne.n	8001da0 <HAL_RCC_OscConfig+0x924>
 8001d86:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001d88:	6a1b      	ldr	r3, [r3, #32]
 8001d8a:	4a23      	ldr	r2, [pc, #140]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	6213      	str	r3, [r2, #32]
 8001d92:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a20      	ldr	r2, [pc, #128]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001d98:	f023 0304 	bic.w	r3, r3, #4
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	e020      	b.n	8001de2 <HAL_RCC_OscConfig+0x966>
 8001da0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	2b05      	cmp	r3, #5
 8001dae:	d10c      	bne.n	8001dca <HAL_RCC_OscConfig+0x94e>
 8001db0:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001db6:	f043 0304 	orr.w	r3, r3, #4
 8001dba:	6213      	str	r3, [r2, #32]
 8001dbc:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001dbe:	6a1b      	ldr	r3, [r3, #32]
 8001dc0:	4a15      	ldr	r2, [pc, #84]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6213      	str	r3, [r2, #32]
 8001dc8:	e00b      	b.n	8001de2 <HAL_RCC_OscConfig+0x966>
 8001dca:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001dcc:	6a1b      	ldr	r3, [r3, #32]
 8001dce:	4a12      	ldr	r2, [pc, #72]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6213      	str	r3, [r2, #32]
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4a0f      	ldr	r2, [pc, #60]	@ (8001e18 <HAL_RCC_OscConfig+0x99c>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 8087 	beq.w	8001f02 <HAL_RCC_OscConfig+0xa86>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7fe fec4 	bl	8000b80 <HAL_GetTick>
 8001df8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfc:	e012      	b.n	8001e24 <HAL_RCC_OscConfig+0x9a8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfe:	f7fe febf 	bl	8000b80 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d908      	bls.n	8001e24 <HAL_RCC_OscConfig+0x9a8>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e339      	b.n	800248a <HAL_RCC_OscConfig+0x100e>
 8001e16:	bf00      	nop
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	10908120 	.word	0x10908120
 8001e20:	40007000 	.word	0x40007000
 8001e24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e28:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e2c:	2202      	movs	r2, #2
 8001e2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e34:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e42:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e50:	2202      	movs	r2, #2
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e58:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	fa93 f2a3 	rbit	r2, r3
 8001e62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e66:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e6a:	601a      	str	r2, [r3, #0]
  return result;
 8001e6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e70:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001e74:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d102      	bne.n	8001e8c <HAL_RCC_OscConfig+0xa10>
 8001e86:	4b98      	ldr	r3, [pc, #608]	@ (80020e8 <HAL_RCC_OscConfig+0xc6c>)
 8001e88:	6a1b      	ldr	r3, [r3, #32]
 8001e8a:	e013      	b.n	8001eb4 <HAL_RCC_OscConfig+0xa38>
 8001e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e90:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001e94:	2202      	movs	r2, #2
 8001e96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e9c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001eaa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4b8d      	ldr	r3, [pc, #564]	@ (80020e8 <HAL_RCC_OscConfig+0xc6c>)
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001eb8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001ebc:	2102      	movs	r1, #2
 8001ebe:	6011      	str	r1, [r2, #0]
 8001ec0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ec4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001ec8:	6812      	ldr	r2, [r2, #0]
 8001eca:	fa92 f1a2 	rbit	r1, r2
 8001ece:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001ed2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ed6:	6011      	str	r1, [r2, #0]
  return result;
 8001ed8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001edc:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	fab2 f282 	clz	r2, r2
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f002 021f 	and.w	r2, r2, #31
 8001ef2:	2101      	movs	r1, #1
 8001ef4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f43f af7f 	beq.w	8001dfe <HAL_RCC_OscConfig+0x982>
 8001f00:	e07d      	b.n	8001ffe <HAL_RCC_OscConfig+0xb82>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f02:	f7fe fe3d 	bl	8000b80 <HAL_GetTick>
 8001f06:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f0a:	e00b      	b.n	8001f24 <HAL_RCC_OscConfig+0xaa8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f0c:	f7fe fe38 	bl	8000b80 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0xaa8>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e2b2      	b.n	800248a <HAL_RCC_OscConfig+0x100e>
 8001f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f28:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f2c:	2202      	movs	r2, #2
 8001f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f34:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	fa93 f2a3 	rbit	r2, r3
 8001f3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f42:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001f46:	601a      	str	r2, [r3, #0]
 8001f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4c:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f50:	2202      	movs	r2, #2
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f58:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	fa93 f2a3 	rbit	r2, r3
 8001f62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f66:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f6a:	601a      	str	r2, [r3, #0]
  return result;
 8001f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f70:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001f74:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d102      	bne.n	8001f8c <HAL_RCC_OscConfig+0xb10>
 8001f86:	4b58      	ldr	r3, [pc, #352]	@ (80020e8 <HAL_RCC_OscConfig+0xc6c>)
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	e013      	b.n	8001fb4 <HAL_RCC_OscConfig+0xb38>
 8001f8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f90:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001f94:	2202      	movs	r2, #2
 8001f96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f9c:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	fa93 f2a3 	rbit	r2, r3
 8001fa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001faa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80020e8 <HAL_RCC_OscConfig+0xc6c>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fb8:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	6011      	str	r1, [r2, #0]
 8001fc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fc4:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	fa92 f1a2 	rbit	r1, r2
 8001fce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fd2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fd6:	6011      	str	r1, [r2, #0]
  return result;
 8001fd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001fdc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	fab2 f282 	clz	r2, r2
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f002 021f 	and.w	r2, r2, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d186      	bne.n	8001f0c <HAL_RCC_OscConfig+0xa90>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ffe:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002002:	2b01      	cmp	r3, #1
 8002004:	d105      	bne.n	8002012 <HAL_RCC_OscConfig+0xb96>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002006:	4b38      	ldr	r3, [pc, #224]	@ (80020e8 <HAL_RCC_OscConfig+0xc6c>)
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4a37      	ldr	r2, [pc, #220]	@ (80020e8 <HAL_RCC_OscConfig+0xc6c>)
 800200c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002010:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002012:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002016:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 8232 	beq.w	8002488 <HAL_RCC_OscConfig+0x100c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002024:	4b30      	ldr	r3, [pc, #192]	@ (80020e8 <HAL_RCC_OscConfig+0xc6c>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b08      	cmp	r3, #8
 800202e:	f000 8201 	beq.w	8002434 <HAL_RCC_OscConfig+0xfb8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002036:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	2b02      	cmp	r3, #2
 8002040:	f040 8157 	bne.w	80022f2 <HAL_RCC_OscConfig+0xe76>
 8002044:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002048:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800204c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002056:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002064:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002068:	601a      	str	r2, [r3, #0]
  return result;
 800206a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800206e:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002072:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800207e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	461a      	mov	r2, r3
 8002086:	2300      	movs	r3, #0
 8002088:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe fd79 	bl	8000b80 <HAL_GetTick>
 800208e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002092:	e009      	b.n	80020a8 <HAL_RCC_OscConfig+0xc2c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002094:	f7fe fd74 	bl	8000b80 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d901      	bls.n	80020a8 <HAL_RCC_OscConfig+0xc2c>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e1f0      	b.n	800248a <HAL_RCC_OscConfig+0x100e>
 80020a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ac:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ba:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	fa93 f2a3 	rbit	r2, r3
 80020c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020c8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020cc:	601a      	str	r2, [r3, #0]
  return result;
 80020ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d2:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80020d6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020d8:	fab3 f383 	clz	r3, r3
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b3f      	cmp	r3, #63	@ 0x3f
 80020e0:	d804      	bhi.n	80020ec <HAL_RCC_OscConfig+0xc70>
 80020e2:	4b01      	ldr	r3, [pc, #4]	@ (80020e8 <HAL_RCC_OscConfig+0xc6c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	e029      	b.n	800213c <HAL_RCC_OscConfig+0xcc0>
 80020e8:	40021000 	.word	0x40021000
 80020ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80020f4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020fe:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	fa93 f2a3 	rbit	r2, r3
 8002108:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800210c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002116:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800211a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002124:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	fa93 f2a3 	rbit	r2, r3
 800212e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002132:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	4bc3      	ldr	r3, [pc, #780]	@ (8002448 <HAL_RCC_OscConfig+0xfcc>)
 800213a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800213c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002140:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002144:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002148:	6011      	str	r1, [r2, #0]
 800214a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800214e:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	fa92 f1a2 	rbit	r1, r2
 8002158:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800215c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002160:	6011      	str	r1, [r2, #0]
  return result;
 8002162:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002166:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	fab2 f282 	clz	r2, r2
 8002170:	b2d2      	uxtb	r2, r2
 8002172:	f042 0220 	orr.w	r2, r2, #32
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	f002 021f 	and.w	r2, r2, #31
 800217c:	2101      	movs	r1, #1
 800217e:	fa01 f202 	lsl.w	r2, r1, r2
 8002182:	4013      	ands	r3, r2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d185      	bne.n	8002094 <HAL_RCC_OscConfig+0xc18>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002188:	4baf      	ldr	r3, [pc, #700]	@ (8002448 <HAL_RCC_OscConfig+0xfcc>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002190:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002194:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800219c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021a0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	49a7      	ldr	r1, [pc, #668]	@ (8002448 <HAL_RCC_OscConfig+0xfcc>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	604b      	str	r3, [r1, #4]
 80021b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021b4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80021b8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80021bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c2:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fa93 f2a3 	rbit	r2, r3
 80021cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021d4:	601a      	str	r2, [r3, #0]
  return result;
 80021d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021da:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80021de:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e0:	fab3 f383 	clz	r3, r3
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80021ea:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	461a      	mov	r2, r3
 80021f2:	2301      	movs	r3, #1
 80021f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f6:	f7fe fcc3 	bl	8000b80 <HAL_GetTick>
 80021fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021fe:	e009      	b.n	8002214 <HAL_RCC_OscConfig+0xd98>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe fcbe 	bl	8000b80 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d901      	bls.n	8002214 <HAL_RCC_OscConfig+0xd98>
          {
            return HAL_TIMEOUT;
 8002210:	2303      	movs	r3, #3
 8002212:	e13a      	b.n	800248a <HAL_RCC_OscConfig+0x100e>
 8002214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002218:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800221c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002220:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002226:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f2a3 	rbit	r2, r3
 8002230:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002234:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002238:	601a      	str	r2, [r3, #0]
  return result;
 800223a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800223e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002242:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b3f      	cmp	r3, #63	@ 0x3f
 800224c:	d802      	bhi.n	8002254 <HAL_RCC_OscConfig+0xdd8>
 800224e:	4b7e      	ldr	r3, [pc, #504]	@ (8002448 <HAL_RCC_OscConfig+0xfcc>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	e027      	b.n	80022a4 <HAL_RCC_OscConfig+0xe28>
 8002254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002258:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800225c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002266:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002274:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002282:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800228c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800229a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4b69      	ldr	r3, [pc, #420]	@ (8002448 <HAL_RCC_OscConfig+0xfcc>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022a8:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80022ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80022b0:	6011      	str	r1, [r2, #0]
 80022b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022b6:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80022ba:	6812      	ldr	r2, [r2, #0]
 80022bc:	fa92 f1a2 	rbit	r1, r2
 80022c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022c4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022c8:	6011      	str	r1, [r2, #0]
  return result;
 80022ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80022ce:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	fab2 f282 	clz	r2, r2
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	f042 0220 	orr.w	r2, r2, #32
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	f002 021f 	and.w	r2, r2, #31
 80022e4:	2101      	movs	r1, #1
 80022e6:	fa01 f202 	lsl.w	r2, r1, r2
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d087      	beq.n	8002200 <HAL_RCC_OscConfig+0xd84>
 80022f0:	e0ca      	b.n	8002488 <HAL_RCC_OscConfig+0x100c>
 80022f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022f6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80022fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80022fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002304:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	fa93 f2a3 	rbit	r2, r3
 800230e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002312:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002316:	601a      	str	r2, [r3, #0]
  return result;
 8002318:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002320:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002322:	fab3 f383 	clz	r3, r3
 8002326:	b2db      	uxtb	r3, r3
 8002328:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800232c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	461a      	mov	r2, r3
 8002334:	2300      	movs	r3, #0
 8002336:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002338:	f7fe fc22 	bl	8000b80 <HAL_GetTick>
 800233c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002340:	e009      	b.n	8002356 <HAL_RCC_OscConfig+0xeda>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002342:	f7fe fc1d 	bl	8000b80 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0xeda>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e099      	b.n	800248a <HAL_RCC_OscConfig+0x100e>
 8002356:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800235a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800235e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002368:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	fa93 f2a3 	rbit	r2, r3
 8002372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002376:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800237a:	601a      	str	r2, [r3, #0]
  return result;
 800237c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002380:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002384:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b3f      	cmp	r3, #63	@ 0x3f
 800238e:	d802      	bhi.n	8002396 <HAL_RCC_OscConfig+0xf1a>
 8002390:	4b2d      	ldr	r3, [pc, #180]	@ (8002448 <HAL_RCC_OscConfig+0xfcc>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e027      	b.n	80023e6 <HAL_RCC_OscConfig+0xf6a>
 8002396:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800239a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800239e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	fa93 f2a3 	rbit	r2, r3
 80023b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023c8:	601a      	str	r2, [r3, #0]
 80023ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ce:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	fa93 f2a3 	rbit	r2, r3
 80023d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023dc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	4b19      	ldr	r3, [pc, #100]	@ (8002448 <HAL_RCC_OscConfig+0xfcc>)
 80023e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023ea:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80023ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80023f2:	6011      	str	r1, [r2, #0]
 80023f4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80023f8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	fa92 f1a2 	rbit	r1, r2
 8002402:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002406:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800240a:	6011      	str	r1, [r2, #0]
  return result;
 800240c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002410:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	fab2 f282 	clz	r2, r2
 800241a:	b2d2      	uxtb	r2, r2
 800241c:	f042 0220 	orr.w	r2, r2, #32
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	f002 021f 	and.w	r2, r2, #31
 8002426:	2101      	movs	r1, #1
 8002428:	fa01 f202 	lsl.w	r2, r1, r2
 800242c:	4013      	ands	r3, r2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d187      	bne.n	8002342 <HAL_RCC_OscConfig+0xec6>
 8002432:	e029      	b.n	8002488 <HAL_RCC_OscConfig+0x100c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d103      	bne.n	800244c <HAL_RCC_OscConfig+0xfd0>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e020      	b.n	800248a <HAL_RCC_OscConfig+0x100e>
 8002448:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800244c:	4b11      	ldr	r3, [pc, #68]	@ (8002494 <HAL_RCC_OscConfig+0x1018>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002454:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002458:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800245c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002460:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	429a      	cmp	r2, r3
 800246a:	d10b      	bne.n	8002484 <HAL_RCC_OscConfig+0x1008>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800246c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002470:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002474:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002478:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002480:	429a      	cmp	r2, r3
 8002482:	d001      	beq.n	8002488 <HAL_RCC_OscConfig+0x100c>
#endif
        {
          return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <HAL_RCC_OscConfig+0x100e>
        }
      }
    }
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40021000 	.word	0x40021000

08002498 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b09e      	sub	sp, #120	@ 0x78
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e154      	b.n	800275a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024b0:	4b89      	ldr	r3, [pc, #548]	@ (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	683a      	ldr	r2, [r7, #0]
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d910      	bls.n	80024e0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024be:	4b86      	ldr	r3, [pc, #536]	@ (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 0207 	bic.w	r2, r3, #7
 80024c6:	4984      	ldr	r1, [pc, #528]	@ (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ce:	4b82      	ldr	r3, [pc, #520]	@ (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d001      	beq.n	80024e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e13c      	b.n	800275a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b7b      	ldr	r3, [pc, #492]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4978      	ldr	r1, [pc, #480]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 80cd 	beq.w	80026a6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d137      	bne.n	8002584 <HAL_RCC_ClockConfig+0xec>
 8002514:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002518:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002522:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002524:	fab3 f383 	clz	r3, r3
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b3f      	cmp	r3, #63	@ 0x3f
 800252c:	d802      	bhi.n	8002534 <HAL_RCC_ClockConfig+0x9c>
 800252e:	4b6b      	ldr	r3, [pc, #428]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	e00f      	b.n	8002554 <HAL_RCC_ClockConfig+0xbc>
 8002534:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002538:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	667b      	str	r3, [r7, #100]	@ 0x64
 8002542:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002546:	663b      	str	r3, [r7, #96]	@ 0x60
 8002548:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002550:	4b62      	ldr	r3, [pc, #392]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002554:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002558:	65ba      	str	r2, [r7, #88]	@ 0x58
 800255a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800255c:	fa92 f2a2 	rbit	r2, r2
 8002560:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002562:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002564:	fab2 f282 	clz	r2, r2
 8002568:	b2d2      	uxtb	r2, r2
 800256a:	f042 0220 	orr.w	r2, r2, #32
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	f002 021f 	and.w	r2, r2, #31
 8002574:	2101      	movs	r1, #1
 8002576:	fa01 f202 	lsl.w	r2, r1, r2
 800257a:	4013      	ands	r3, r2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d171      	bne.n	8002664 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0ea      	b.n	800275a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d137      	bne.n	80025fc <HAL_RCC_ClockConfig+0x164>
 800258c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002590:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002592:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002594:	fa93 f3a3 	rbit	r3, r3
 8002598:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800259a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800259c:	fab3 f383 	clz	r3, r3
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b3f      	cmp	r3, #63	@ 0x3f
 80025a4:	d802      	bhi.n	80025ac <HAL_RCC_ClockConfig+0x114>
 80025a6:	4b4d      	ldr	r3, [pc, #308]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	e00f      	b.n	80025cc <HAL_RCC_ClockConfig+0x134>
 80025ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80025ba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025be:	643b      	str	r3, [r7, #64]	@ 0x40
 80025c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025c2:	fa93 f3a3 	rbit	r3, r3
 80025c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80025c8:	4b44      	ldr	r3, [pc, #272]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025d0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80025d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025d4:	fa92 f2a2 	rbit	r2, r2
 80025d8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80025da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80025dc:	fab2 f282 	clz	r2, r2
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	f042 0220 	orr.w	r2, r2, #32
 80025e6:	b2d2      	uxtb	r2, r2
 80025e8:	f002 021f 	and.w	r2, r2, #31
 80025ec:	2101      	movs	r1, #1
 80025ee:	fa01 f202 	lsl.w	r2, r1, r2
 80025f2:	4013      	ands	r3, r2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d135      	bne.n	8002664 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0ae      	b.n	800275a <HAL_RCC_ClockConfig+0x2c2>
 80025fc:	2302      	movs	r3, #2
 80025fe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002602:	fa93 f3a3 	rbit	r3, r3
 8002606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800260a:	fab3 f383 	clz	r3, r3
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b3f      	cmp	r3, #63	@ 0x3f
 8002612:	d802      	bhi.n	800261a <HAL_RCC_ClockConfig+0x182>
 8002614:	4b31      	ldr	r3, [pc, #196]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	e00d      	b.n	8002636 <HAL_RCC_ClockConfig+0x19e>
 800261a:	2302      	movs	r3, #2
 800261c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
 8002626:	2302      	movs	r3, #2
 8002628:	623b      	str	r3, [r7, #32]
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	61fb      	str	r3, [r7, #28]
 8002632:	4b2a      	ldr	r3, [pc, #168]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	2202      	movs	r2, #2
 8002638:	61ba      	str	r2, [r7, #24]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	fa92 f2a2 	rbit	r2, r2
 8002640:	617a      	str	r2, [r7, #20]
  return result;
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	fab2 f282 	clz	r2, r2
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	f042 0220 	orr.w	r2, r2, #32
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	f002 021f 	and.w	r2, r2, #31
 8002654:	2101      	movs	r1, #1
 8002656:	fa01 f202 	lsl.w	r2, r1, r2
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e07a      	b.n	800275a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002664:	4b1d      	ldr	r3, [pc, #116]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f023 0203 	bic.w	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	491a      	ldr	r1, [pc, #104]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002676:	f7fe fa83 	bl	8000b80 <HAL_GetTick>
 800267a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267c:	e00a      	b.n	8002694 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800267e:	f7fe fa7f 	bl	8000b80 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800268c:	4293      	cmp	r3, r2
 800268e:	d901      	bls.n	8002694 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	e062      	b.n	800275a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <HAL_RCC_ClockConfig+0x244>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f003 020c 	and.w	r2, r3, #12
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d1eb      	bne.n	800267e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026a6:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d215      	bcs.n	80026e0 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b4:	4b08      	ldr	r3, [pc, #32]	@ (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 0207 	bic.w	r2, r3, #7
 80026bc:	4906      	ldr	r1, [pc, #24]	@ (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026c4:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <HAL_RCC_ClockConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d006      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e041      	b.n	800275a <HAL_RCC_ClockConfig+0x2c2>
 80026d6:	bf00      	nop
 80026d8:	40022000 	.word	0x40022000
 80026dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d008      	beq.n	80026fe <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <HAL_RCC_ClockConfig+0x2cc>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	491a      	ldr	r1, [pc, #104]	@ (8002764 <HAL_RCC_ClockConfig+0x2cc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d009      	beq.n	800271e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800270a:	4b16      	ldr	r3, [pc, #88]	@ (8002764 <HAL_RCC_ClockConfig+0x2cc>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691b      	ldr	r3, [r3, #16]
 8002716:	00db      	lsls	r3, r3, #3
 8002718:	4912      	ldr	r1, [pc, #72]	@ (8002764 <HAL_RCC_ClockConfig+0x2cc>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800271e:	f000 f829 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8002722:	4601      	mov	r1, r0
 8002724:	4b0f      	ldr	r3, [pc, #60]	@ (8002764 <HAL_RCC_ClockConfig+0x2cc>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800272c:	22f0      	movs	r2, #240	@ 0xf0
 800272e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	fa92 f2a2 	rbit	r2, r2
 8002736:	60fa      	str	r2, [r7, #12]
  return result;
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	fab2 f282 	clz	r2, r2
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	40d3      	lsrs	r3, r2
 8002742:	4a09      	ldr	r2, [pc, #36]	@ (8002768 <HAL_RCC_ClockConfig+0x2d0>)
 8002744:	5cd3      	ldrb	r3, [r2, r3]
 8002746:	fa21 f303 	lsr.w	r3, r1, r3
 800274a:	4a08      	ldr	r2, [pc, #32]	@ (800276c <HAL_RCC_ClockConfig+0x2d4>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800274e:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <HAL_RCC_ClockConfig+0x2d8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe f9d0 	bl	8000af8 <HAL_InitTick>
  
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3778      	adds	r7, #120	@ 0x78
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40021000 	.word	0x40021000
 8002768:	080046c4 	.word	0x080046c4
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002774:	b480      	push	{r7}
 8002776:	b087      	sub	sp, #28
 8002778:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	2300      	movs	r3, #0
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	2300      	movs	r3, #0
 8002788:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800278e:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x94>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b04      	cmp	r3, #4
 800279c:	d002      	beq.n	80027a4 <HAL_RCC_GetSysClockFreq+0x30>
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d003      	beq.n	80027aa <HAL_RCC_GetSysClockFreq+0x36>
 80027a2:	e026      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a4:	4b19      	ldr	r3, [pc, #100]	@ (800280c <HAL_RCC_GetSysClockFreq+0x98>)
 80027a6:	613b      	str	r3, [r7, #16]
      break;
 80027a8:	e026      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	0c9b      	lsrs	r3, r3, #18
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	4a17      	ldr	r2, [pc, #92]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027b4:	5cd3      	ldrb	r3, [r2, r3]
 80027b6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80027b8:	4b13      	ldr	r3, [pc, #76]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x94>)
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	4a14      	ldr	r2, [pc, #80]	@ (8002814 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d008      	beq.n	80027e2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027d0:	4a0e      	ldr	r2, [pc, #56]	@ (800280c <HAL_RCC_GetSysClockFreq+0x98>)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	fb02 f303 	mul.w	r3, r2, r3
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	e004      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002818 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027e6:	fb02 f303 	mul.w	r3, r2, r3
 80027ea:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80027ec:	697b      	ldr	r3, [r7, #20]
 80027ee:	613b      	str	r3, [r7, #16]
      break;
 80027f0:	e002      	b.n	80027f8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_GetSysClockFreq+0x98>)
 80027f4:	613b      	str	r3, [r7, #16]
      break;
 80027f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f8:	693b      	ldr	r3, [r7, #16]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	371c      	adds	r7, #28
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	40021000 	.word	0x40021000
 800280c:	007a1200 	.word	0x007a1200
 8002810:	080046dc 	.word	0x080046dc
 8002814:	080046ec 	.word	0x080046ec
 8002818:	003d0900 	.word	0x003d0900

0800281c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002820:	4b03      	ldr	r3, [pc, #12]	@ (8002830 <HAL_RCC_GetHCLKFreq+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000000 	.word	0x20000000

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800283a:	f7ff ffef 	bl	800281c <HAL_RCC_GetHCLKFreq>
 800283e:	4601      	mov	r1, r0
 8002840:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002848:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800284c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	fa92 f2a2 	rbit	r2, r2
 8002854:	603a      	str	r2, [r7, #0]
  return result;
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	fab2 f282 	clz	r2, r2
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	40d3      	lsrs	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002862:	5cd3      	ldrb	r3, [r2, r3]
 8002864:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	080046d4 	.word	0x080046d4

08002878 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800287e:	f7ff ffcd 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002882:	4601      	mov	r1, r0
 8002884:	4b0b      	ldr	r3, [pc, #44]	@ (80028b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800288c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002890:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	fa92 f2a2 	rbit	r2, r2
 8002898:	603a      	str	r2, [r7, #0]
  return result;
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	fab2 f282 	clz	r2, r2
 80028a0:	b2d2      	uxtb	r2, r2
 80028a2:	40d3      	lsrs	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80028ac:	4618      	mov	r0, r3
 80028ae:	3708      	adds	r7, #8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	080046d4 	.word	0x080046d4

080028bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b092      	sub	sp, #72	@ 0x48
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	f000 80d2 	beq.w	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10e      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ec:	4b4a      	ldr	r3, [pc, #296]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028ee:	69db      	ldr	r3, [r3, #28]
 80028f0:	4a49      	ldr	r2, [pc, #292]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	61d3      	str	r3, [r2, #28]
 80028f8:	4b47      	ldr	r3, [pc, #284]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002904:	2301      	movs	r3, #1
 8002906:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b44      	ldr	r3, [pc, #272]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002916:	4b41      	ldr	r3, [pc, #260]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a40      	ldr	r2, [pc, #256]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002920:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002922:	f7fe f92d 	bl	8000b80 <HAL_GetTick>
 8002926:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002928:	e008      	b.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292a:	f7fe f929 	bl	8000b80 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b64      	cmp	r3, #100	@ 0x64
 8002936:	d901      	bls.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e167      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x350>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293c:	4b37      	ldr	r3, [pc, #220]	@ (8002a1c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0f0      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002948:	4b33      	ldr	r3, [pc, #204]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002950:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8082 	beq.w	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002962:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002964:	429a      	cmp	r2, r3
 8002966:	d07a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002968:	4b2b      	ldr	r3, [pc, #172]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002972:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002976:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297a:	fa93 f3a3 	rbit	r3, r3
 800297e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002982:	fab3 f383 	clz	r3, r3
 8002986:	b2db      	uxtb	r3, r3
 8002988:	461a      	mov	r2, r3
 800298a:	4b25      	ldr	r3, [pc, #148]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800298c:	4413      	add	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	461a      	mov	r2, r3
 8002992:	2301      	movs	r3, #1
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800299a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80029a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b0:	4413      	add	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	461a      	mov	r2, r3
 80029b6:	2300      	movs	r3, #0
 80029b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029ba:	4a17      	ldr	r2, [pc, #92]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80029bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d049      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ca:	f7fe f8d9 	bl	8000b80 <HAL_GetTick>
 80029ce:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe f8d5 	bl	8000b80 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e111      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x350>
 80029e8:	2302      	movs	r3, #2
 80029ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029f4:	2302      	movs	r3, #2
 80029f6:	623b      	str	r3, [r7, #32]
 80029f8:	6a3b      	ldr	r3, [r7, #32]
 80029fa:	fa93 f3a3 	rbit	r3, r3
 80029fe:	61fb      	str	r3, [r7, #28]
  return result;
 8002a00:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a02:	fab3 f383 	clz	r3, r3
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d108      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8002a12:	4b01      	ldr	r3, [pc, #4]	@ (8002a18 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	e00d      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002a18:	40021000 	.word	0x40021000
 8002a1c:	40007000 	.word	0x40007000
 8002a20:	10908100 	.word	0x10908100
 8002a24:	2302      	movs	r3, #2
 8002a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fa93 f3a3 	rbit	r3, r3
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	4b78      	ldr	r3, [pc, #480]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a34:	2202      	movs	r2, #2
 8002a36:	613a      	str	r2, [r7, #16]
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	fa92 f2a2 	rbit	r2, r2
 8002a3e:	60fa      	str	r2, [r7, #12]
  return result;
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	fab2 f282 	clz	r2, r2
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a4c:	b2d2      	uxtb	r2, r2
 8002a4e:	f002 021f 	and.w	r2, r2, #31
 8002a52:	2101      	movs	r1, #1
 8002a54:	fa01 f202 	lsl.w	r2, r1, r2
 8002a58:	4013      	ands	r3, r2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d0b9      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	496a      	ldr	r1, [pc, #424]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a70:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d105      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a78:	4b66      	ldr	r3, [pc, #408]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a7a:	69db      	ldr	r3, [r3, #28]
 8002a7c:	4a65      	ldr	r2, [pc, #404]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a7e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a82:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a90:	4b60      	ldr	r3, [pc, #384]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	f023 0203 	bic.w	r2, r3, #3
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	495d      	ldr	r1, [pc, #372]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002aae:	4b59      	ldr	r3, [pc, #356]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	4956      	ldr	r1, [pc, #344]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d008      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002acc:	4b51      	ldr	r3, [pc, #324]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ace:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	494e      	ldr	r1, [pc, #312]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d008      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aea:	4b4a      	ldr	r3, [pc, #296]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f023 0210 	bic.w	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	69db      	ldr	r3, [r3, #28]
 8002af6:	4947      	ldr	r1, [pc, #284]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b08:	4b42      	ldr	r3, [pc, #264]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b14:	493f      	ldr	r1, [pc, #252]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d008      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b26:	4b3b      	ldr	r3, [pc, #236]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2a:	f023 0220 	bic.w	r2, r3, #32
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	4938      	ldr	r1, [pc, #224]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b44:	4b33      	ldr	r3, [pc, #204]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	4930      	ldr	r1, [pc, #192]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d008      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b62:	4b2c      	ldr	r3, [pc, #176]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b66:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	4929      	ldr	r1, [pc, #164]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d008      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b80:	4b24      	ldr	r3, [pc, #144]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	4921      	ldr	r1, [pc, #132]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d008      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002baa:	491a      	ldr	r1, [pc, #104]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d008      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002bbc:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc8:	4912      	ldr	r1, [pc, #72]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002bda:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bde:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be6:	490b      	ldr	r1, [pc, #44]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002bf8:	4b06      	ldr	r3, [pc, #24]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c04:	4903      	ldr	r1, [pc, #12]	@ (8002c14 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3748      	adds	r7, #72	@ 0x48
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e09d      	b.n	8002d66 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d108      	bne.n	8002c44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c3a:	d009      	beq.n	8002c50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	61da      	str	r2, [r3, #28]
 8002c42:	e005      	b.n	8002c50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd fd72 	bl	8000754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2202      	movs	r2, #2
 8002c74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c90:	d902      	bls.n	8002c98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e002      	b.n	8002c9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002ca6:	d007      	beq.n	8002cb8 <HAL_SPI_Init+0xa0>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002cb0:	d002      	beq.n	8002cb8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	69db      	ldr	r3, [r3, #28]
 8002cec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cfa:	ea42 0103 	orr.w	r1, r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d02:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	0c1b      	lsrs	r3, r3, #16
 8002d14:	f003 0204 	and.w	r2, r3, #4
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	f003 0310 	and.w	r3, r3, #16
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d34:	ea42 0103 	orr.w	r1, r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	430a      	orrs	r2, r1
 8002d44:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69da      	ldr	r2, [r3, #28]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d54:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3710      	adds	r7, #16
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d101      	bne.n	8002d80 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e040      	b.n	8002e02 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d106      	bne.n	8002d96 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7fd fd21 	bl	80007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2224      	movs	r2, #36	@ 0x24
 8002d9a:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d002      	beq.n	8002dba <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa85 	bl	80032c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f8ae 	bl	8002f1c <UART_SetConfig>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e01b      	b.n	8002e02 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002de8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fb04 	bl	8003408 <UART_CheckIdleState>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b08a      	sub	sp, #40	@ 0x28
 8002e0e:	af02      	add	r7, sp, #8
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	4613      	mov	r3, r2
 8002e18:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d177      	bne.n	8002f12 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_UART_Transmit+0x24>
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e070      	b.n	8002f14 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2221      	movs	r2, #33	@ 0x21
 8002e3e:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e40:	f7fd fe9e 	bl	8000b80 <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	88fa      	ldrh	r2, [r7, #6]
 8002e4a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e5e:	d108      	bne.n	8002e72 <HAL_UART_Transmit+0x68>
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d104      	bne.n	8002e72 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
 8002e70:	e003      	b.n	8002e7a <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e76:	2300      	movs	r3, #0
 8002e78:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e7a:	e02f      	b.n	8002edc <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2200      	movs	r2, #0
 8002e84:	2180      	movs	r1, #128	@ 0x80
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 fb66 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d004      	beq.n	8002e9c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2220      	movs	r2, #32
 8002e96:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e03b      	b.n	8002f14 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	881a      	ldrh	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eae:	b292      	uxth	r2, r2
 8002eb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	e007      	b.n	8002eca <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1c9      	bne.n	8002e7c <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2140      	movs	r1, #64	@ 0x40
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 fb30 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d004      	beq.n	8002f08 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2220      	movs	r2, #32
 8002f02:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e005      	b.n	8002f14 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e000      	b.n	8002f14 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2302      	movs	r3, #2
  }
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b088      	sub	sp, #32
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	431a      	orrs	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8002f4a:	f023 030c 	bic.w	r3, r3, #12
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	6979      	ldr	r1, [r7, #20]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4aa7      	ldr	r2, [pc, #668]	@ (8003234 <UART_SetConfig+0x318>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d120      	bne.n	8002fde <UART_SetConfig+0xc2>
 8002f9c:	4ba6      	ldr	r3, [pc, #664]	@ (8003238 <UART_SetConfig+0x31c>)
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	f003 0303 	and.w	r3, r3, #3
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d817      	bhi.n	8002fd8 <UART_SetConfig+0xbc>
 8002fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8002fb0 <UART_SetConfig+0x94>)
 8002faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fae:	bf00      	nop
 8002fb0:	08002fc1 	.word	0x08002fc1
 8002fb4:	08002fcd 	.word	0x08002fcd
 8002fb8:	08002fd3 	.word	0x08002fd3
 8002fbc:	08002fc7 	.word	0x08002fc7
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e0b5      	b.n	8003132 <UART_SetConfig+0x216>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e0b2      	b.n	8003132 <UART_SetConfig+0x216>
 8002fcc:	2304      	movs	r3, #4
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e0af      	b.n	8003132 <UART_SetConfig+0x216>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	77fb      	strb	r3, [r7, #31]
 8002fd6:	e0ac      	b.n	8003132 <UART_SetConfig+0x216>
 8002fd8:	2310      	movs	r3, #16
 8002fda:	77fb      	strb	r3, [r7, #31]
 8002fdc:	e0a9      	b.n	8003132 <UART_SetConfig+0x216>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a96      	ldr	r2, [pc, #600]	@ (800323c <UART_SetConfig+0x320>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d124      	bne.n	8003032 <UART_SetConfig+0x116>
 8002fe8:	4b93      	ldr	r3, [pc, #588]	@ (8003238 <UART_SetConfig+0x31c>)
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ff0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ff4:	d011      	beq.n	800301a <UART_SetConfig+0xfe>
 8002ff6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ffa:	d817      	bhi.n	800302c <UART_SetConfig+0x110>
 8002ffc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003000:	d011      	beq.n	8003026 <UART_SetConfig+0x10a>
 8003002:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003006:	d811      	bhi.n	800302c <UART_SetConfig+0x110>
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <UART_SetConfig+0xf8>
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003010:	d006      	beq.n	8003020 <UART_SetConfig+0x104>
 8003012:	e00b      	b.n	800302c <UART_SetConfig+0x110>
 8003014:	2300      	movs	r3, #0
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e08b      	b.n	8003132 <UART_SetConfig+0x216>
 800301a:	2302      	movs	r3, #2
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e088      	b.n	8003132 <UART_SetConfig+0x216>
 8003020:	2304      	movs	r3, #4
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e085      	b.n	8003132 <UART_SetConfig+0x216>
 8003026:	2308      	movs	r3, #8
 8003028:	77fb      	strb	r3, [r7, #31]
 800302a:	e082      	b.n	8003132 <UART_SetConfig+0x216>
 800302c:	2310      	movs	r3, #16
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e07f      	b.n	8003132 <UART_SetConfig+0x216>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a82      	ldr	r2, [pc, #520]	@ (8003240 <UART_SetConfig+0x324>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d124      	bne.n	8003086 <UART_SetConfig+0x16a>
 800303c:	4b7e      	ldr	r3, [pc, #504]	@ (8003238 <UART_SetConfig+0x31c>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8003044:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003048:	d011      	beq.n	800306e <UART_SetConfig+0x152>
 800304a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800304e:	d817      	bhi.n	8003080 <UART_SetConfig+0x164>
 8003050:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003054:	d011      	beq.n	800307a <UART_SetConfig+0x15e>
 8003056:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800305a:	d811      	bhi.n	8003080 <UART_SetConfig+0x164>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <UART_SetConfig+0x14c>
 8003060:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003064:	d006      	beq.n	8003074 <UART_SetConfig+0x158>
 8003066:	e00b      	b.n	8003080 <UART_SetConfig+0x164>
 8003068:	2300      	movs	r3, #0
 800306a:	77fb      	strb	r3, [r7, #31]
 800306c:	e061      	b.n	8003132 <UART_SetConfig+0x216>
 800306e:	2302      	movs	r3, #2
 8003070:	77fb      	strb	r3, [r7, #31]
 8003072:	e05e      	b.n	8003132 <UART_SetConfig+0x216>
 8003074:	2304      	movs	r3, #4
 8003076:	77fb      	strb	r3, [r7, #31]
 8003078:	e05b      	b.n	8003132 <UART_SetConfig+0x216>
 800307a:	2308      	movs	r3, #8
 800307c:	77fb      	strb	r3, [r7, #31]
 800307e:	e058      	b.n	8003132 <UART_SetConfig+0x216>
 8003080:	2310      	movs	r3, #16
 8003082:	77fb      	strb	r3, [r7, #31]
 8003084:	e055      	b.n	8003132 <UART_SetConfig+0x216>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a6e      	ldr	r2, [pc, #440]	@ (8003244 <UART_SetConfig+0x328>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d124      	bne.n	80030da <UART_SetConfig+0x1be>
 8003090:	4b69      	ldr	r3, [pc, #420]	@ (8003238 <UART_SetConfig+0x31c>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003094:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003098:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800309c:	d011      	beq.n	80030c2 <UART_SetConfig+0x1a6>
 800309e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030a2:	d817      	bhi.n	80030d4 <UART_SetConfig+0x1b8>
 80030a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030a8:	d011      	beq.n	80030ce <UART_SetConfig+0x1b2>
 80030aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030ae:	d811      	bhi.n	80030d4 <UART_SetConfig+0x1b8>
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d003      	beq.n	80030bc <UART_SetConfig+0x1a0>
 80030b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030b8:	d006      	beq.n	80030c8 <UART_SetConfig+0x1ac>
 80030ba:	e00b      	b.n	80030d4 <UART_SetConfig+0x1b8>
 80030bc:	2300      	movs	r3, #0
 80030be:	77fb      	strb	r3, [r7, #31]
 80030c0:	e037      	b.n	8003132 <UART_SetConfig+0x216>
 80030c2:	2302      	movs	r3, #2
 80030c4:	77fb      	strb	r3, [r7, #31]
 80030c6:	e034      	b.n	8003132 <UART_SetConfig+0x216>
 80030c8:	2304      	movs	r3, #4
 80030ca:	77fb      	strb	r3, [r7, #31]
 80030cc:	e031      	b.n	8003132 <UART_SetConfig+0x216>
 80030ce:	2308      	movs	r3, #8
 80030d0:	77fb      	strb	r3, [r7, #31]
 80030d2:	e02e      	b.n	8003132 <UART_SetConfig+0x216>
 80030d4:	2310      	movs	r3, #16
 80030d6:	77fb      	strb	r3, [r7, #31]
 80030d8:	e02b      	b.n	8003132 <UART_SetConfig+0x216>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a5a      	ldr	r2, [pc, #360]	@ (8003248 <UART_SetConfig+0x32c>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d124      	bne.n	800312e <UART_SetConfig+0x212>
 80030e4:	4b54      	ldr	r3, [pc, #336]	@ (8003238 <UART_SetConfig+0x31c>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80030ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030f0:	d011      	beq.n	8003116 <UART_SetConfig+0x1fa>
 80030f2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80030f6:	d817      	bhi.n	8003128 <UART_SetConfig+0x20c>
 80030f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80030fc:	d011      	beq.n	8003122 <UART_SetConfig+0x206>
 80030fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003102:	d811      	bhi.n	8003128 <UART_SetConfig+0x20c>
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <UART_SetConfig+0x1f4>
 8003108:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800310c:	d006      	beq.n	800311c <UART_SetConfig+0x200>
 800310e:	e00b      	b.n	8003128 <UART_SetConfig+0x20c>
 8003110:	2300      	movs	r3, #0
 8003112:	77fb      	strb	r3, [r7, #31]
 8003114:	e00d      	b.n	8003132 <UART_SetConfig+0x216>
 8003116:	2302      	movs	r3, #2
 8003118:	77fb      	strb	r3, [r7, #31]
 800311a:	e00a      	b.n	8003132 <UART_SetConfig+0x216>
 800311c:	2304      	movs	r3, #4
 800311e:	77fb      	strb	r3, [r7, #31]
 8003120:	e007      	b.n	8003132 <UART_SetConfig+0x216>
 8003122:	2308      	movs	r3, #8
 8003124:	77fb      	strb	r3, [r7, #31]
 8003126:	e004      	b.n	8003132 <UART_SetConfig+0x216>
 8003128:	2310      	movs	r3, #16
 800312a:	77fb      	strb	r3, [r7, #31]
 800312c:	e001      	b.n	8003132 <UART_SetConfig+0x216>
 800312e:	2310      	movs	r3, #16
 8003130:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800313a:	d15b      	bne.n	80031f4 <UART_SetConfig+0x2d8>
  {
    switch (clocksource)
 800313c:	7ffb      	ldrb	r3, [r7, #31]
 800313e:	2b08      	cmp	r3, #8
 8003140:	d827      	bhi.n	8003192 <UART_SetConfig+0x276>
 8003142:	a201      	add	r2, pc, #4	@ (adr r2, 8003148 <UART_SetConfig+0x22c>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	0800316d 	.word	0x0800316d
 800314c:	08003175 	.word	0x08003175
 8003150:	0800317d 	.word	0x0800317d
 8003154:	08003193 	.word	0x08003193
 8003158:	08003183 	.word	0x08003183
 800315c:	08003193 	.word	0x08003193
 8003160:	08003193 	.word	0x08003193
 8003164:	08003193 	.word	0x08003193
 8003168:	0800318b 	.word	0x0800318b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7ff fb62 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 8003170:	61b8      	str	r0, [r7, #24]
        break;
 8003172:	e013      	b.n	800319c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003174:	f7ff fb80 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003178:	61b8      	str	r0, [r7, #24]
        break;
 800317a:	e00f      	b.n	800319c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800317c:	4b33      	ldr	r3, [pc, #204]	@ (800324c <UART_SetConfig+0x330>)
 800317e:	61bb      	str	r3, [r7, #24]
        break;
 8003180:	e00c      	b.n	800319c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003182:	f7ff faf7 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 8003186:	61b8      	str	r0, [r7, #24]
        break;
 8003188:	e008      	b.n	800319c <UART_SetConfig+0x280>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800318a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800318e:	61bb      	str	r3, [r7, #24]
        break;
 8003190:	e004      	b.n	800319c <UART_SetConfig+0x280>
      default:
        pclk = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	77bb      	strb	r3, [r7, #30]
        break;
 800319a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 8082 	beq.w	80032a8 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	005a      	lsls	r2, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	441a      	add	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	2b0f      	cmp	r3, #15
 80031be:	d916      	bls.n	80031ee <UART_SetConfig+0x2d2>
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c6:	d212      	bcs.n	80031ee <UART_SetConfig+0x2d2>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	f023 030f 	bic.w	r3, r3, #15
 80031d0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	085b      	lsrs	r3, r3, #1
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f003 0307 	and.w	r3, r3, #7
 80031dc:	b29a      	uxth	r2, r3
 80031de:	89fb      	ldrh	r3, [r7, #14]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	89fa      	ldrh	r2, [r7, #14]
 80031ea:	60da      	str	r2, [r3, #12]
 80031ec:	e05c      	b.n	80032a8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	77bb      	strb	r3, [r7, #30]
 80031f2:	e059      	b.n	80032a8 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80031f4:	7ffb      	ldrb	r3, [r7, #31]
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d835      	bhi.n	8003266 <UART_SetConfig+0x34a>
 80031fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003200 <UART_SetConfig+0x2e4>)
 80031fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003200:	08003225 	.word	0x08003225
 8003204:	0800322d 	.word	0x0800322d
 8003208:	08003251 	.word	0x08003251
 800320c:	08003267 	.word	0x08003267
 8003210:	08003257 	.word	0x08003257
 8003214:	08003267 	.word	0x08003267
 8003218:	08003267 	.word	0x08003267
 800321c:	08003267 	.word	0x08003267
 8003220:	0800325f 	.word	0x0800325f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003224:	f7ff fb06 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 8003228:	61b8      	str	r0, [r7, #24]
        break;
 800322a:	e021      	b.n	8003270 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800322c:	f7ff fb24 	bl	8002878 <HAL_RCC_GetPCLK2Freq>
 8003230:	61b8      	str	r0, [r7, #24]
        break;
 8003232:	e01d      	b.n	8003270 <UART_SetConfig+0x354>
 8003234:	40013800 	.word	0x40013800
 8003238:	40021000 	.word	0x40021000
 800323c:	40004400 	.word	0x40004400
 8003240:	40004800 	.word	0x40004800
 8003244:	40004c00 	.word	0x40004c00
 8003248:	40005000 	.word	0x40005000
 800324c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003250:	4b1b      	ldr	r3, [pc, #108]	@ (80032c0 <UART_SetConfig+0x3a4>)
 8003252:	61bb      	str	r3, [r7, #24]
        break;
 8003254:	e00c      	b.n	8003270 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003256:	f7ff fa8d 	bl	8002774 <HAL_RCC_GetSysClockFreq>
 800325a:	61b8      	str	r0, [r7, #24]
        break;
 800325c:	e008      	b.n	8003270 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003262:	61bb      	str	r3, [r7, #24]
        break;
 8003264:	e004      	b.n	8003270 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	77bb      	strb	r3, [r7, #30]
        break;
 800326e:	bf00      	nop
    }

    if (pclk != 0U)
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d018      	beq.n	80032a8 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	085a      	lsrs	r2, r3, #1
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	441a      	add	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	fbb2 f3f3 	udiv	r3, r2, r3
 8003288:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	2b0f      	cmp	r3, #15
 800328e:	d909      	bls.n	80032a4 <UART_SetConfig+0x388>
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003296:	d205      	bcs.n	80032a4 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	b29a      	uxth	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	60da      	str	r2, [r3, #12]
 80032a2:	e001      	b.n	80032a8 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	007a1200 	.word	0x007a1200

080032c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00a      	beq.n	80032ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00a      	beq.n	8003310 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00a      	beq.n	8003332 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003336:	f003 0304 	and.w	r3, r3, #4
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00a      	beq.n	8003354 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003358:	f003 0310 	and.w	r3, r3, #16
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00a      	beq.n	8003376 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	f003 0320 	and.w	r3, r3, #32
 800337e:	2b00      	cmp	r3, #0
 8003380:	d00a      	beq.n	8003398 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	430a      	orrs	r2, r1
 8003396:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d01a      	beq.n	80033da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c2:	d10a      	bne.n	80033da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00a      	beq.n	80033fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	430a      	orrs	r2, r1
 80033fa:	605a      	str	r2, [r3, #4]
  }
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b098      	sub	sp, #96	@ 0x60
 800340c:	af02      	add	r7, sp, #8
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003418:	f7fd fbb2 	bl	8000b80 <HAL_GetTick>
 800341c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b08      	cmp	r3, #8
 800342a:	d12e      	bne.n	800348a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800342c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003430:	9300      	str	r3, [sp, #0]
 8003432:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003434:	2200      	movs	r2, #0
 8003436:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f88c 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d021      	beq.n	800348a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344e:	e853 3f00 	ldrex	r3, [r3]
 8003452:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003456:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800345a:	653b      	str	r3, [r7, #80]	@ 0x50
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003464:	647b      	str	r3, [r7, #68]	@ 0x44
 8003466:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003468:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800346a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800346c:	e841 2300 	strex	r3, r2, [r1]
 8003470:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d1e6      	bne.n	8003446 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e062      	b.n	8003550 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0304 	and.w	r3, r3, #4
 8003494:	2b04      	cmp	r3, #4
 8003496:	d149      	bne.n	800352c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003498:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a0:	2200      	movs	r2, #0
 80034a2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f856 	bl	8003558 <UART_WaitOnFlagUntilTimeout>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d03c      	beq.n	800352c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	623b      	str	r3, [r7, #32]
   return(result);
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	461a      	mov	r2, r3
 80034ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034d8:	e841 2300 	strex	r3, r2, [r1]
 80034dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1e6      	bne.n	80034b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3308      	adds	r3, #8
 80034ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	3308      	adds	r3, #8
 8003502:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003504:	61fa      	str	r2, [r7, #28]
 8003506:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	69b9      	ldr	r1, [r7, #24]
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	e841 2300 	strex	r3, r2, [r1]
 8003510:	617b      	str	r3, [r7, #20]
   return(result);
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d1e5      	bne.n	80034e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2220      	movs	r2, #32
 800351c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e011      	b.n	8003550 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3758      	adds	r7, #88	@ 0x58
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}

08003558 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	4613      	mov	r3, r2
 8003566:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003568:	e04f      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003570:	d04b      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f7fd fb05 	bl	8000b80 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	429a      	cmp	r2, r3
 8003580:	d302      	bcc.n	8003588 <UART_WaitOnFlagUntilTimeout+0x30>
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e04e      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d037      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b80      	cmp	r3, #128	@ 0x80
 800359e:	d034      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b40      	cmp	r3, #64	@ 0x40
 80035a4:	d031      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 0308 	and.w	r3, r3, #8
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d110      	bne.n	80035d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2208      	movs	r2, #8
 80035ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f000 f838 	bl	8003632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2208      	movs	r2, #8
 80035c6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e029      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	69db      	ldr	r3, [r3, #28]
 80035dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035e4:	d111      	bne.n	800360a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 f81e 	bl	8003632 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e00f      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	bf0c      	ite	eq
 800361a:	2301      	moveq	r3, #1
 800361c:	2300      	movne	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	79fb      	ldrb	r3, [r7, #7]
 8003624:	429a      	cmp	r2, r3
 8003626:	d0a0      	beq.n	800356a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003632:	b480      	push	{r7}
 8003634:	b095      	sub	sp, #84	@ 0x54
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003642:	e853 3f00 	ldrex	r3, [r3]
 8003646:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800364e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	461a      	mov	r2, r3
 8003656:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003658:	643b      	str	r3, [r7, #64]	@ 0x40
 800365a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800365e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003660:	e841 2300 	strex	r3, r2, [r1]
 8003664:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e6      	bne.n	800363a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3308      	adds	r3, #8
 8003672:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	e853 3f00 	ldrex	r3, [r3]
 800367a:	61fb      	str	r3, [r7, #28]
   return(result);
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800368c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800368e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003692:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003694:	e841 2300 	strex	r3, r2, [r1]
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e5      	bne.n	800366c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d118      	bne.n	80036da <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	e853 3f00 	ldrex	r3, [r3]
 80036b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	f023 0310 	bic.w	r3, r3, #16
 80036bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	461a      	mov	r2, r3
 80036c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ca:	6979      	ldr	r1, [r7, #20]
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	613b      	str	r3, [r7, #16]
   return(result);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1e6      	bne.n	80036a8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2220      	movs	r2, #32
 80036de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036ee:	bf00      	nop
 80036f0:	3754      	adds	r7, #84	@ 0x54
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80036fa:	b480      	push	{r7}
 80036fc:	b085      	sub	sp, #20
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003702:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8003706:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	b29b      	uxth	r3, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	b29b      	uxth	r3, r3
 8003718:	4013      	ands	r3, r2
 800371a:	b29a      	uxth	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3714      	adds	r7, #20
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003730:	b480      	push	{r7}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	1d3b      	adds	r3, r7, #4
 800373a:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2201      	movs	r2, #1
 8003742:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3714      	adds	r7, #20
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <std>:
 800376c:	2300      	movs	r3, #0
 800376e:	b510      	push	{r4, lr}
 8003770:	4604      	mov	r4, r0
 8003772:	e9c0 3300 	strd	r3, r3, [r0]
 8003776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800377a:	6083      	str	r3, [r0, #8]
 800377c:	8181      	strh	r1, [r0, #12]
 800377e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003780:	81c2      	strh	r2, [r0, #14]
 8003782:	6183      	str	r3, [r0, #24]
 8003784:	4619      	mov	r1, r3
 8003786:	2208      	movs	r2, #8
 8003788:	305c      	adds	r0, #92	@ 0x5c
 800378a:	f000 f9f9 	bl	8003b80 <memset>
 800378e:	4b0d      	ldr	r3, [pc, #52]	@ (80037c4 <std+0x58>)
 8003790:	6263      	str	r3, [r4, #36]	@ 0x24
 8003792:	4b0d      	ldr	r3, [pc, #52]	@ (80037c8 <std+0x5c>)
 8003794:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003796:	4b0d      	ldr	r3, [pc, #52]	@ (80037cc <std+0x60>)
 8003798:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800379a:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <std+0x64>)
 800379c:	6323      	str	r3, [r4, #48]	@ 0x30
 800379e:	4b0d      	ldr	r3, [pc, #52]	@ (80037d4 <std+0x68>)
 80037a0:	6224      	str	r4, [r4, #32]
 80037a2:	429c      	cmp	r4, r3
 80037a4:	d006      	beq.n	80037b4 <std+0x48>
 80037a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80037aa:	4294      	cmp	r4, r2
 80037ac:	d002      	beq.n	80037b4 <std+0x48>
 80037ae:	33d0      	adds	r3, #208	@ 0xd0
 80037b0:	429c      	cmp	r4, r3
 80037b2:	d105      	bne.n	80037c0 <std+0x54>
 80037b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80037b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037bc:	f000 ba58 	b.w	8003c70 <__retarget_lock_init_recursive>
 80037c0:	bd10      	pop	{r4, pc}
 80037c2:	bf00      	nop
 80037c4:	080039d1 	.word	0x080039d1
 80037c8:	080039f3 	.word	0x080039f3
 80037cc:	08003a2b 	.word	0x08003a2b
 80037d0:	08003a4f 	.word	0x08003a4f
 80037d4:	200004a0 	.word	0x200004a0

080037d8 <stdio_exit_handler>:
 80037d8:	4a02      	ldr	r2, [pc, #8]	@ (80037e4 <stdio_exit_handler+0xc>)
 80037da:	4903      	ldr	r1, [pc, #12]	@ (80037e8 <stdio_exit_handler+0x10>)
 80037dc:	4803      	ldr	r0, [pc, #12]	@ (80037ec <stdio_exit_handler+0x14>)
 80037de:	f000 b869 	b.w	80038b4 <_fwalk_sglue>
 80037e2:	bf00      	nop
 80037e4:	2000000c 	.word	0x2000000c
 80037e8:	0800450d 	.word	0x0800450d
 80037ec:	2000001c 	.word	0x2000001c

080037f0 <cleanup_stdio>:
 80037f0:	6841      	ldr	r1, [r0, #4]
 80037f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <cleanup_stdio+0x34>)
 80037f4:	4299      	cmp	r1, r3
 80037f6:	b510      	push	{r4, lr}
 80037f8:	4604      	mov	r4, r0
 80037fa:	d001      	beq.n	8003800 <cleanup_stdio+0x10>
 80037fc:	f000 fe86 	bl	800450c <_fflush_r>
 8003800:	68a1      	ldr	r1, [r4, #8]
 8003802:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <cleanup_stdio+0x38>)
 8003804:	4299      	cmp	r1, r3
 8003806:	d002      	beq.n	800380e <cleanup_stdio+0x1e>
 8003808:	4620      	mov	r0, r4
 800380a:	f000 fe7f 	bl	800450c <_fflush_r>
 800380e:	68e1      	ldr	r1, [r4, #12]
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <cleanup_stdio+0x3c>)
 8003812:	4299      	cmp	r1, r3
 8003814:	d004      	beq.n	8003820 <cleanup_stdio+0x30>
 8003816:	4620      	mov	r0, r4
 8003818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800381c:	f000 be76 	b.w	800450c <_fflush_r>
 8003820:	bd10      	pop	{r4, pc}
 8003822:	bf00      	nop
 8003824:	200004a0 	.word	0x200004a0
 8003828:	20000508 	.word	0x20000508
 800382c:	20000570 	.word	0x20000570

08003830 <global_stdio_init.part.0>:
 8003830:	b510      	push	{r4, lr}
 8003832:	4b0b      	ldr	r3, [pc, #44]	@ (8003860 <global_stdio_init.part.0+0x30>)
 8003834:	4c0b      	ldr	r4, [pc, #44]	@ (8003864 <global_stdio_init.part.0+0x34>)
 8003836:	4a0c      	ldr	r2, [pc, #48]	@ (8003868 <global_stdio_init.part.0+0x38>)
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	4620      	mov	r0, r4
 800383c:	2200      	movs	r2, #0
 800383e:	2104      	movs	r1, #4
 8003840:	f7ff ff94 	bl	800376c <std>
 8003844:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003848:	2201      	movs	r2, #1
 800384a:	2109      	movs	r1, #9
 800384c:	f7ff ff8e 	bl	800376c <std>
 8003850:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003854:	2202      	movs	r2, #2
 8003856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800385a:	2112      	movs	r1, #18
 800385c:	f7ff bf86 	b.w	800376c <std>
 8003860:	200005d8 	.word	0x200005d8
 8003864:	200004a0 	.word	0x200004a0
 8003868:	080037d9 	.word	0x080037d9

0800386c <__sfp_lock_acquire>:
 800386c:	4801      	ldr	r0, [pc, #4]	@ (8003874 <__sfp_lock_acquire+0x8>)
 800386e:	f000 ba00 	b.w	8003c72 <__retarget_lock_acquire_recursive>
 8003872:	bf00      	nop
 8003874:	200005e1 	.word	0x200005e1

08003878 <__sfp_lock_release>:
 8003878:	4801      	ldr	r0, [pc, #4]	@ (8003880 <__sfp_lock_release+0x8>)
 800387a:	f000 b9fb 	b.w	8003c74 <__retarget_lock_release_recursive>
 800387e:	bf00      	nop
 8003880:	200005e1 	.word	0x200005e1

08003884 <__sinit>:
 8003884:	b510      	push	{r4, lr}
 8003886:	4604      	mov	r4, r0
 8003888:	f7ff fff0 	bl	800386c <__sfp_lock_acquire>
 800388c:	6a23      	ldr	r3, [r4, #32]
 800388e:	b11b      	cbz	r3, 8003898 <__sinit+0x14>
 8003890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003894:	f7ff bff0 	b.w	8003878 <__sfp_lock_release>
 8003898:	4b04      	ldr	r3, [pc, #16]	@ (80038ac <__sinit+0x28>)
 800389a:	6223      	str	r3, [r4, #32]
 800389c:	4b04      	ldr	r3, [pc, #16]	@ (80038b0 <__sinit+0x2c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1f5      	bne.n	8003890 <__sinit+0xc>
 80038a4:	f7ff ffc4 	bl	8003830 <global_stdio_init.part.0>
 80038a8:	e7f2      	b.n	8003890 <__sinit+0xc>
 80038aa:	bf00      	nop
 80038ac:	080037f1 	.word	0x080037f1
 80038b0:	200005d8 	.word	0x200005d8

080038b4 <_fwalk_sglue>:
 80038b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038b8:	4607      	mov	r7, r0
 80038ba:	4688      	mov	r8, r1
 80038bc:	4614      	mov	r4, r2
 80038be:	2600      	movs	r6, #0
 80038c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80038c4:	f1b9 0901 	subs.w	r9, r9, #1
 80038c8:	d505      	bpl.n	80038d6 <_fwalk_sglue+0x22>
 80038ca:	6824      	ldr	r4, [r4, #0]
 80038cc:	2c00      	cmp	r4, #0
 80038ce:	d1f7      	bne.n	80038c0 <_fwalk_sglue+0xc>
 80038d0:	4630      	mov	r0, r6
 80038d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038d6:	89ab      	ldrh	r3, [r5, #12]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d907      	bls.n	80038ec <_fwalk_sglue+0x38>
 80038dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80038e0:	3301      	adds	r3, #1
 80038e2:	d003      	beq.n	80038ec <_fwalk_sglue+0x38>
 80038e4:	4629      	mov	r1, r5
 80038e6:	4638      	mov	r0, r7
 80038e8:	47c0      	blx	r8
 80038ea:	4306      	orrs	r6, r0
 80038ec:	3568      	adds	r5, #104	@ 0x68
 80038ee:	e7e9      	b.n	80038c4 <_fwalk_sglue+0x10>

080038f0 <iprintf>:
 80038f0:	b40f      	push	{r0, r1, r2, r3}
 80038f2:	b507      	push	{r0, r1, r2, lr}
 80038f4:	4906      	ldr	r1, [pc, #24]	@ (8003910 <iprintf+0x20>)
 80038f6:	ab04      	add	r3, sp, #16
 80038f8:	6808      	ldr	r0, [r1, #0]
 80038fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80038fe:	6881      	ldr	r1, [r0, #8]
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	f000 fadb 	bl	8003ebc <_vfiprintf_r>
 8003906:	b003      	add	sp, #12
 8003908:	f85d eb04 	ldr.w	lr, [sp], #4
 800390c:	b004      	add	sp, #16
 800390e:	4770      	bx	lr
 8003910:	20000018 	.word	0x20000018

08003914 <_puts_r>:
 8003914:	6a03      	ldr	r3, [r0, #32]
 8003916:	b570      	push	{r4, r5, r6, lr}
 8003918:	6884      	ldr	r4, [r0, #8]
 800391a:	4605      	mov	r5, r0
 800391c:	460e      	mov	r6, r1
 800391e:	b90b      	cbnz	r3, 8003924 <_puts_r+0x10>
 8003920:	f7ff ffb0 	bl	8003884 <__sinit>
 8003924:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003926:	07db      	lsls	r3, r3, #31
 8003928:	d405      	bmi.n	8003936 <_puts_r+0x22>
 800392a:	89a3      	ldrh	r3, [r4, #12]
 800392c:	0598      	lsls	r0, r3, #22
 800392e:	d402      	bmi.n	8003936 <_puts_r+0x22>
 8003930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003932:	f000 f99e 	bl	8003c72 <__retarget_lock_acquire_recursive>
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	0719      	lsls	r1, r3, #28
 800393a:	d502      	bpl.n	8003942 <_puts_r+0x2e>
 800393c:	6923      	ldr	r3, [r4, #16]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d135      	bne.n	80039ae <_puts_r+0x9a>
 8003942:	4621      	mov	r1, r4
 8003944:	4628      	mov	r0, r5
 8003946:	f000 f8c5 	bl	8003ad4 <__swsetup_r>
 800394a:	b380      	cbz	r0, 80039ae <_puts_r+0x9a>
 800394c:	f04f 35ff 	mov.w	r5, #4294967295
 8003950:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003952:	07da      	lsls	r2, r3, #31
 8003954:	d405      	bmi.n	8003962 <_puts_r+0x4e>
 8003956:	89a3      	ldrh	r3, [r4, #12]
 8003958:	059b      	lsls	r3, r3, #22
 800395a:	d402      	bmi.n	8003962 <_puts_r+0x4e>
 800395c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800395e:	f000 f989 	bl	8003c74 <__retarget_lock_release_recursive>
 8003962:	4628      	mov	r0, r5
 8003964:	bd70      	pop	{r4, r5, r6, pc}
 8003966:	2b00      	cmp	r3, #0
 8003968:	da04      	bge.n	8003974 <_puts_r+0x60>
 800396a:	69a2      	ldr	r2, [r4, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	dc17      	bgt.n	80039a0 <_puts_r+0x8c>
 8003970:	290a      	cmp	r1, #10
 8003972:	d015      	beq.n	80039a0 <_puts_r+0x8c>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	1c5a      	adds	r2, r3, #1
 8003978:	6022      	str	r2, [r4, #0]
 800397a:	7019      	strb	r1, [r3, #0]
 800397c:	68a3      	ldr	r3, [r4, #8]
 800397e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003982:	3b01      	subs	r3, #1
 8003984:	60a3      	str	r3, [r4, #8]
 8003986:	2900      	cmp	r1, #0
 8003988:	d1ed      	bne.n	8003966 <_puts_r+0x52>
 800398a:	2b00      	cmp	r3, #0
 800398c:	da11      	bge.n	80039b2 <_puts_r+0x9e>
 800398e:	4622      	mov	r2, r4
 8003990:	210a      	movs	r1, #10
 8003992:	4628      	mov	r0, r5
 8003994:	f000 f85f 	bl	8003a56 <__swbuf_r>
 8003998:	3001      	adds	r0, #1
 800399a:	d0d7      	beq.n	800394c <_puts_r+0x38>
 800399c:	250a      	movs	r5, #10
 800399e:	e7d7      	b.n	8003950 <_puts_r+0x3c>
 80039a0:	4622      	mov	r2, r4
 80039a2:	4628      	mov	r0, r5
 80039a4:	f000 f857 	bl	8003a56 <__swbuf_r>
 80039a8:	3001      	adds	r0, #1
 80039aa:	d1e7      	bne.n	800397c <_puts_r+0x68>
 80039ac:	e7ce      	b.n	800394c <_puts_r+0x38>
 80039ae:	3e01      	subs	r6, #1
 80039b0:	e7e4      	b.n	800397c <_puts_r+0x68>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	6022      	str	r2, [r4, #0]
 80039b8:	220a      	movs	r2, #10
 80039ba:	701a      	strb	r2, [r3, #0]
 80039bc:	e7ee      	b.n	800399c <_puts_r+0x88>
	...

080039c0 <puts>:
 80039c0:	4b02      	ldr	r3, [pc, #8]	@ (80039cc <puts+0xc>)
 80039c2:	4601      	mov	r1, r0
 80039c4:	6818      	ldr	r0, [r3, #0]
 80039c6:	f7ff bfa5 	b.w	8003914 <_puts_r>
 80039ca:	bf00      	nop
 80039cc:	20000018 	.word	0x20000018

080039d0 <__sread>:
 80039d0:	b510      	push	{r4, lr}
 80039d2:	460c      	mov	r4, r1
 80039d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d8:	f000 f8fc 	bl	8003bd4 <_read_r>
 80039dc:	2800      	cmp	r0, #0
 80039de:	bfab      	itete	ge
 80039e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80039e2:	89a3      	ldrhlt	r3, [r4, #12]
 80039e4:	181b      	addge	r3, r3, r0
 80039e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80039ea:	bfac      	ite	ge
 80039ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80039ee:	81a3      	strhlt	r3, [r4, #12]
 80039f0:	bd10      	pop	{r4, pc}

080039f2 <__swrite>:
 80039f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039f6:	461f      	mov	r7, r3
 80039f8:	898b      	ldrh	r3, [r1, #12]
 80039fa:	05db      	lsls	r3, r3, #23
 80039fc:	4605      	mov	r5, r0
 80039fe:	460c      	mov	r4, r1
 8003a00:	4616      	mov	r6, r2
 8003a02:	d505      	bpl.n	8003a10 <__swrite+0x1e>
 8003a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a08:	2302      	movs	r3, #2
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	f000 f8d0 	bl	8003bb0 <_lseek_r>
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a1a:	81a3      	strh	r3, [r4, #12]
 8003a1c:	4632      	mov	r2, r6
 8003a1e:	463b      	mov	r3, r7
 8003a20:	4628      	mov	r0, r5
 8003a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003a26:	f000 b8e7 	b.w	8003bf8 <_write_r>

08003a2a <__sseek>:
 8003a2a:	b510      	push	{r4, lr}
 8003a2c:	460c      	mov	r4, r1
 8003a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a32:	f000 f8bd 	bl	8003bb0 <_lseek_r>
 8003a36:	1c43      	adds	r3, r0, #1
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	bf15      	itete	ne
 8003a3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003a3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003a42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003a46:	81a3      	strheq	r3, [r4, #12]
 8003a48:	bf18      	it	ne
 8003a4a:	81a3      	strhne	r3, [r4, #12]
 8003a4c:	bd10      	pop	{r4, pc}

08003a4e <__sclose>:
 8003a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a52:	f000 b89d 	b.w	8003b90 <_close_r>

08003a56 <__swbuf_r>:
 8003a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a58:	460e      	mov	r6, r1
 8003a5a:	4614      	mov	r4, r2
 8003a5c:	4605      	mov	r5, r0
 8003a5e:	b118      	cbz	r0, 8003a68 <__swbuf_r+0x12>
 8003a60:	6a03      	ldr	r3, [r0, #32]
 8003a62:	b90b      	cbnz	r3, 8003a68 <__swbuf_r+0x12>
 8003a64:	f7ff ff0e 	bl	8003884 <__sinit>
 8003a68:	69a3      	ldr	r3, [r4, #24]
 8003a6a:	60a3      	str	r3, [r4, #8]
 8003a6c:	89a3      	ldrh	r3, [r4, #12]
 8003a6e:	071a      	lsls	r2, r3, #28
 8003a70:	d501      	bpl.n	8003a76 <__swbuf_r+0x20>
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	b943      	cbnz	r3, 8003a88 <__swbuf_r+0x32>
 8003a76:	4621      	mov	r1, r4
 8003a78:	4628      	mov	r0, r5
 8003a7a:	f000 f82b 	bl	8003ad4 <__swsetup_r>
 8003a7e:	b118      	cbz	r0, 8003a88 <__swbuf_r+0x32>
 8003a80:	f04f 37ff 	mov.w	r7, #4294967295
 8003a84:	4638      	mov	r0, r7
 8003a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a88:	6823      	ldr	r3, [r4, #0]
 8003a8a:	6922      	ldr	r2, [r4, #16]
 8003a8c:	1a98      	subs	r0, r3, r2
 8003a8e:	6963      	ldr	r3, [r4, #20]
 8003a90:	b2f6      	uxtb	r6, r6
 8003a92:	4283      	cmp	r3, r0
 8003a94:	4637      	mov	r7, r6
 8003a96:	dc05      	bgt.n	8003aa4 <__swbuf_r+0x4e>
 8003a98:	4621      	mov	r1, r4
 8003a9a:	4628      	mov	r0, r5
 8003a9c:	f000 fd36 	bl	800450c <_fflush_r>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d1ed      	bne.n	8003a80 <__swbuf_r+0x2a>
 8003aa4:	68a3      	ldr	r3, [r4, #8]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	60a3      	str	r3, [r4, #8]
 8003aaa:	6823      	ldr	r3, [r4, #0]
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	6022      	str	r2, [r4, #0]
 8003ab0:	701e      	strb	r6, [r3, #0]
 8003ab2:	6962      	ldr	r2, [r4, #20]
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d004      	beq.n	8003ac4 <__swbuf_r+0x6e>
 8003aba:	89a3      	ldrh	r3, [r4, #12]
 8003abc:	07db      	lsls	r3, r3, #31
 8003abe:	d5e1      	bpl.n	8003a84 <__swbuf_r+0x2e>
 8003ac0:	2e0a      	cmp	r6, #10
 8003ac2:	d1df      	bne.n	8003a84 <__swbuf_r+0x2e>
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	4628      	mov	r0, r5
 8003ac8:	f000 fd20 	bl	800450c <_fflush_r>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d0d9      	beq.n	8003a84 <__swbuf_r+0x2e>
 8003ad0:	e7d6      	b.n	8003a80 <__swbuf_r+0x2a>
	...

08003ad4 <__swsetup_r>:
 8003ad4:	b538      	push	{r3, r4, r5, lr}
 8003ad6:	4b29      	ldr	r3, [pc, #164]	@ (8003b7c <__swsetup_r+0xa8>)
 8003ad8:	4605      	mov	r5, r0
 8003ada:	6818      	ldr	r0, [r3, #0]
 8003adc:	460c      	mov	r4, r1
 8003ade:	b118      	cbz	r0, 8003ae8 <__swsetup_r+0x14>
 8003ae0:	6a03      	ldr	r3, [r0, #32]
 8003ae2:	b90b      	cbnz	r3, 8003ae8 <__swsetup_r+0x14>
 8003ae4:	f7ff fece 	bl	8003884 <__sinit>
 8003ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003aec:	0719      	lsls	r1, r3, #28
 8003aee:	d422      	bmi.n	8003b36 <__swsetup_r+0x62>
 8003af0:	06da      	lsls	r2, r3, #27
 8003af2:	d407      	bmi.n	8003b04 <__swsetup_r+0x30>
 8003af4:	2209      	movs	r2, #9
 8003af6:	602a      	str	r2, [r5, #0]
 8003af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003afc:	81a3      	strh	r3, [r4, #12]
 8003afe:	f04f 30ff 	mov.w	r0, #4294967295
 8003b02:	e033      	b.n	8003b6c <__swsetup_r+0x98>
 8003b04:	0758      	lsls	r0, r3, #29
 8003b06:	d512      	bpl.n	8003b2e <__swsetup_r+0x5a>
 8003b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003b0a:	b141      	cbz	r1, 8003b1e <__swsetup_r+0x4a>
 8003b0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003b10:	4299      	cmp	r1, r3
 8003b12:	d002      	beq.n	8003b1a <__swsetup_r+0x46>
 8003b14:	4628      	mov	r0, r5
 8003b16:	f000 f8af 	bl	8003c78 <_free_r>
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003b24:	81a3      	strh	r3, [r4, #12]
 8003b26:	2300      	movs	r3, #0
 8003b28:	6063      	str	r3, [r4, #4]
 8003b2a:	6923      	ldr	r3, [r4, #16]
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	89a3      	ldrh	r3, [r4, #12]
 8003b30:	f043 0308 	orr.w	r3, r3, #8
 8003b34:	81a3      	strh	r3, [r4, #12]
 8003b36:	6923      	ldr	r3, [r4, #16]
 8003b38:	b94b      	cbnz	r3, 8003b4e <__swsetup_r+0x7a>
 8003b3a:	89a3      	ldrh	r3, [r4, #12]
 8003b3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b44:	d003      	beq.n	8003b4e <__swsetup_r+0x7a>
 8003b46:	4621      	mov	r1, r4
 8003b48:	4628      	mov	r0, r5
 8003b4a:	f000 fd2d 	bl	80045a8 <__smakebuf_r>
 8003b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b52:	f013 0201 	ands.w	r2, r3, #1
 8003b56:	d00a      	beq.n	8003b6e <__swsetup_r+0x9a>
 8003b58:	2200      	movs	r2, #0
 8003b5a:	60a2      	str	r2, [r4, #8]
 8003b5c:	6962      	ldr	r2, [r4, #20]
 8003b5e:	4252      	negs	r2, r2
 8003b60:	61a2      	str	r2, [r4, #24]
 8003b62:	6922      	ldr	r2, [r4, #16]
 8003b64:	b942      	cbnz	r2, 8003b78 <__swsetup_r+0xa4>
 8003b66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003b6a:	d1c5      	bne.n	8003af8 <__swsetup_r+0x24>
 8003b6c:	bd38      	pop	{r3, r4, r5, pc}
 8003b6e:	0799      	lsls	r1, r3, #30
 8003b70:	bf58      	it	pl
 8003b72:	6962      	ldrpl	r2, [r4, #20]
 8003b74:	60a2      	str	r2, [r4, #8]
 8003b76:	e7f4      	b.n	8003b62 <__swsetup_r+0x8e>
 8003b78:	2000      	movs	r0, #0
 8003b7a:	e7f7      	b.n	8003b6c <__swsetup_r+0x98>
 8003b7c:	20000018 	.word	0x20000018

08003b80 <memset>:
 8003b80:	4402      	add	r2, r0
 8003b82:	4603      	mov	r3, r0
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d100      	bne.n	8003b8a <memset+0xa>
 8003b88:	4770      	bx	lr
 8003b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b8e:	e7f9      	b.n	8003b84 <memset+0x4>

08003b90 <_close_r>:
 8003b90:	b538      	push	{r3, r4, r5, lr}
 8003b92:	4d06      	ldr	r5, [pc, #24]	@ (8003bac <_close_r+0x1c>)
 8003b94:	2300      	movs	r3, #0
 8003b96:	4604      	mov	r4, r0
 8003b98:	4608      	mov	r0, r1
 8003b9a:	602b      	str	r3, [r5, #0]
 8003b9c:	f7fc fef0 	bl	8000980 <_close>
 8003ba0:	1c43      	adds	r3, r0, #1
 8003ba2:	d102      	bne.n	8003baa <_close_r+0x1a>
 8003ba4:	682b      	ldr	r3, [r5, #0]
 8003ba6:	b103      	cbz	r3, 8003baa <_close_r+0x1a>
 8003ba8:	6023      	str	r3, [r4, #0]
 8003baa:	bd38      	pop	{r3, r4, r5, pc}
 8003bac:	200005dc 	.word	0x200005dc

08003bb0 <_lseek_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4d07      	ldr	r5, [pc, #28]	@ (8003bd0 <_lseek_r+0x20>)
 8003bb4:	4604      	mov	r4, r0
 8003bb6:	4608      	mov	r0, r1
 8003bb8:	4611      	mov	r1, r2
 8003bba:	2200      	movs	r2, #0
 8003bbc:	602a      	str	r2, [r5, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f7fc ff05 	bl	80009ce <_lseek>
 8003bc4:	1c43      	adds	r3, r0, #1
 8003bc6:	d102      	bne.n	8003bce <_lseek_r+0x1e>
 8003bc8:	682b      	ldr	r3, [r5, #0]
 8003bca:	b103      	cbz	r3, 8003bce <_lseek_r+0x1e>
 8003bcc:	6023      	str	r3, [r4, #0]
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	200005dc 	.word	0x200005dc

08003bd4 <_read_r>:
 8003bd4:	b538      	push	{r3, r4, r5, lr}
 8003bd6:	4d07      	ldr	r5, [pc, #28]	@ (8003bf4 <_read_r+0x20>)
 8003bd8:	4604      	mov	r4, r0
 8003bda:	4608      	mov	r0, r1
 8003bdc:	4611      	mov	r1, r2
 8003bde:	2200      	movs	r2, #0
 8003be0:	602a      	str	r2, [r5, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	f7fc feaf 	bl	8000946 <_read>
 8003be8:	1c43      	adds	r3, r0, #1
 8003bea:	d102      	bne.n	8003bf2 <_read_r+0x1e>
 8003bec:	682b      	ldr	r3, [r5, #0]
 8003bee:	b103      	cbz	r3, 8003bf2 <_read_r+0x1e>
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	bd38      	pop	{r3, r4, r5, pc}
 8003bf4:	200005dc 	.word	0x200005dc

08003bf8 <_write_r>:
 8003bf8:	b538      	push	{r3, r4, r5, lr}
 8003bfa:	4d07      	ldr	r5, [pc, #28]	@ (8003c18 <_write_r+0x20>)
 8003bfc:	4604      	mov	r4, r0
 8003bfe:	4608      	mov	r0, r1
 8003c00:	4611      	mov	r1, r2
 8003c02:	2200      	movs	r2, #0
 8003c04:	602a      	str	r2, [r5, #0]
 8003c06:	461a      	mov	r2, r3
 8003c08:	f7fc fb32 	bl	8000270 <_write>
 8003c0c:	1c43      	adds	r3, r0, #1
 8003c0e:	d102      	bne.n	8003c16 <_write_r+0x1e>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	b103      	cbz	r3, 8003c16 <_write_r+0x1e>
 8003c14:	6023      	str	r3, [r4, #0]
 8003c16:	bd38      	pop	{r3, r4, r5, pc}
 8003c18:	200005dc 	.word	0x200005dc

08003c1c <__errno>:
 8003c1c:	4b01      	ldr	r3, [pc, #4]	@ (8003c24 <__errno+0x8>)
 8003c1e:	6818      	ldr	r0, [r3, #0]
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000018 	.word	0x20000018

08003c28 <__libc_init_array>:
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003c60 <__libc_init_array+0x38>)
 8003c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8003c64 <__libc_init_array+0x3c>)
 8003c2e:	1b64      	subs	r4, r4, r5
 8003c30:	10a4      	asrs	r4, r4, #2
 8003c32:	2600      	movs	r6, #0
 8003c34:	42a6      	cmp	r6, r4
 8003c36:	d109      	bne.n	8003c4c <__libc_init_array+0x24>
 8003c38:	4d0b      	ldr	r5, [pc, #44]	@ (8003c68 <__libc_init_array+0x40>)
 8003c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8003c6c <__libc_init_array+0x44>)
 8003c3c:	f000 fd22 	bl	8004684 <_init>
 8003c40:	1b64      	subs	r4, r4, r5
 8003c42:	10a4      	asrs	r4, r4, #2
 8003c44:	2600      	movs	r6, #0
 8003c46:	42a6      	cmp	r6, r4
 8003c48:	d105      	bne.n	8003c56 <__libc_init_array+0x2e>
 8003c4a:	bd70      	pop	{r4, r5, r6, pc}
 8003c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c50:	4798      	blx	r3
 8003c52:	3601      	adds	r6, #1
 8003c54:	e7ee      	b.n	8003c34 <__libc_init_array+0xc>
 8003c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c5a:	4798      	blx	r3
 8003c5c:	3601      	adds	r6, #1
 8003c5e:	e7f2      	b.n	8003c46 <__libc_init_array+0x1e>
 8003c60:	08004738 	.word	0x08004738
 8003c64:	08004738 	.word	0x08004738
 8003c68:	08004738 	.word	0x08004738
 8003c6c:	0800473c 	.word	0x0800473c

08003c70 <__retarget_lock_init_recursive>:
 8003c70:	4770      	bx	lr

08003c72 <__retarget_lock_acquire_recursive>:
 8003c72:	4770      	bx	lr

08003c74 <__retarget_lock_release_recursive>:
 8003c74:	4770      	bx	lr
	...

08003c78 <_free_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d041      	beq.n	8003d04 <_free_r+0x8c>
 8003c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c84:	1f0c      	subs	r4, r1, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bfb8      	it	lt
 8003c8a:	18e4      	addlt	r4, r4, r3
 8003c8c:	f000 f8e0 	bl	8003e50 <__malloc_lock>
 8003c90:	4a1d      	ldr	r2, [pc, #116]	@ (8003d08 <_free_r+0x90>)
 8003c92:	6813      	ldr	r3, [r2, #0]
 8003c94:	b933      	cbnz	r3, 8003ca4 <_free_r+0x2c>
 8003c96:	6063      	str	r3, [r4, #4]
 8003c98:	6014      	str	r4, [r2, #0]
 8003c9a:	4628      	mov	r0, r5
 8003c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ca0:	f000 b8dc 	b.w	8003e5c <__malloc_unlock>
 8003ca4:	42a3      	cmp	r3, r4
 8003ca6:	d908      	bls.n	8003cba <_free_r+0x42>
 8003ca8:	6820      	ldr	r0, [r4, #0]
 8003caa:	1821      	adds	r1, r4, r0
 8003cac:	428b      	cmp	r3, r1
 8003cae:	bf01      	itttt	eq
 8003cb0:	6819      	ldreq	r1, [r3, #0]
 8003cb2:	685b      	ldreq	r3, [r3, #4]
 8003cb4:	1809      	addeq	r1, r1, r0
 8003cb6:	6021      	streq	r1, [r4, #0]
 8003cb8:	e7ed      	b.n	8003c96 <_free_r+0x1e>
 8003cba:	461a      	mov	r2, r3
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	b10b      	cbz	r3, 8003cc4 <_free_r+0x4c>
 8003cc0:	42a3      	cmp	r3, r4
 8003cc2:	d9fa      	bls.n	8003cba <_free_r+0x42>
 8003cc4:	6811      	ldr	r1, [r2, #0]
 8003cc6:	1850      	adds	r0, r2, r1
 8003cc8:	42a0      	cmp	r0, r4
 8003cca:	d10b      	bne.n	8003ce4 <_free_r+0x6c>
 8003ccc:	6820      	ldr	r0, [r4, #0]
 8003cce:	4401      	add	r1, r0
 8003cd0:	1850      	adds	r0, r2, r1
 8003cd2:	4283      	cmp	r3, r0
 8003cd4:	6011      	str	r1, [r2, #0]
 8003cd6:	d1e0      	bne.n	8003c9a <_free_r+0x22>
 8003cd8:	6818      	ldr	r0, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	6053      	str	r3, [r2, #4]
 8003cde:	4408      	add	r0, r1
 8003ce0:	6010      	str	r0, [r2, #0]
 8003ce2:	e7da      	b.n	8003c9a <_free_r+0x22>
 8003ce4:	d902      	bls.n	8003cec <_free_r+0x74>
 8003ce6:	230c      	movs	r3, #12
 8003ce8:	602b      	str	r3, [r5, #0]
 8003cea:	e7d6      	b.n	8003c9a <_free_r+0x22>
 8003cec:	6820      	ldr	r0, [r4, #0]
 8003cee:	1821      	adds	r1, r4, r0
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	bf04      	itt	eq
 8003cf4:	6819      	ldreq	r1, [r3, #0]
 8003cf6:	685b      	ldreq	r3, [r3, #4]
 8003cf8:	6063      	str	r3, [r4, #4]
 8003cfa:	bf04      	itt	eq
 8003cfc:	1809      	addeq	r1, r1, r0
 8003cfe:	6021      	streq	r1, [r4, #0]
 8003d00:	6054      	str	r4, [r2, #4]
 8003d02:	e7ca      	b.n	8003c9a <_free_r+0x22>
 8003d04:	bd38      	pop	{r3, r4, r5, pc}
 8003d06:	bf00      	nop
 8003d08:	200005e8 	.word	0x200005e8

08003d0c <sbrk_aligned>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8003d4c <sbrk_aligned+0x40>)
 8003d10:	460c      	mov	r4, r1
 8003d12:	6831      	ldr	r1, [r6, #0]
 8003d14:	4605      	mov	r5, r0
 8003d16:	b911      	cbnz	r1, 8003d1e <sbrk_aligned+0x12>
 8003d18:	f000 fca4 	bl	8004664 <_sbrk_r>
 8003d1c:	6030      	str	r0, [r6, #0]
 8003d1e:	4621      	mov	r1, r4
 8003d20:	4628      	mov	r0, r5
 8003d22:	f000 fc9f 	bl	8004664 <_sbrk_r>
 8003d26:	1c43      	adds	r3, r0, #1
 8003d28:	d103      	bne.n	8003d32 <sbrk_aligned+0x26>
 8003d2a:	f04f 34ff 	mov.w	r4, #4294967295
 8003d2e:	4620      	mov	r0, r4
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
 8003d32:	1cc4      	adds	r4, r0, #3
 8003d34:	f024 0403 	bic.w	r4, r4, #3
 8003d38:	42a0      	cmp	r0, r4
 8003d3a:	d0f8      	beq.n	8003d2e <sbrk_aligned+0x22>
 8003d3c:	1a21      	subs	r1, r4, r0
 8003d3e:	4628      	mov	r0, r5
 8003d40:	f000 fc90 	bl	8004664 <_sbrk_r>
 8003d44:	3001      	adds	r0, #1
 8003d46:	d1f2      	bne.n	8003d2e <sbrk_aligned+0x22>
 8003d48:	e7ef      	b.n	8003d2a <sbrk_aligned+0x1e>
 8003d4a:	bf00      	nop
 8003d4c:	200005e4 	.word	0x200005e4

08003d50 <_malloc_r>:
 8003d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d54:	1ccd      	adds	r5, r1, #3
 8003d56:	f025 0503 	bic.w	r5, r5, #3
 8003d5a:	3508      	adds	r5, #8
 8003d5c:	2d0c      	cmp	r5, #12
 8003d5e:	bf38      	it	cc
 8003d60:	250c      	movcc	r5, #12
 8003d62:	2d00      	cmp	r5, #0
 8003d64:	4606      	mov	r6, r0
 8003d66:	db01      	blt.n	8003d6c <_malloc_r+0x1c>
 8003d68:	42a9      	cmp	r1, r5
 8003d6a:	d904      	bls.n	8003d76 <_malloc_r+0x26>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	6033      	str	r3, [r6, #0]
 8003d70:	2000      	movs	r0, #0
 8003d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e4c <_malloc_r+0xfc>
 8003d7a:	f000 f869 	bl	8003e50 <__malloc_lock>
 8003d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d82:	461c      	mov	r4, r3
 8003d84:	bb44      	cbnz	r4, 8003dd8 <_malloc_r+0x88>
 8003d86:	4629      	mov	r1, r5
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f7ff ffbf 	bl	8003d0c <sbrk_aligned>
 8003d8e:	1c43      	adds	r3, r0, #1
 8003d90:	4604      	mov	r4, r0
 8003d92:	d158      	bne.n	8003e46 <_malloc_r+0xf6>
 8003d94:	f8d8 4000 	ldr.w	r4, [r8]
 8003d98:	4627      	mov	r7, r4
 8003d9a:	2f00      	cmp	r7, #0
 8003d9c:	d143      	bne.n	8003e26 <_malloc_r+0xd6>
 8003d9e:	2c00      	cmp	r4, #0
 8003da0:	d04b      	beq.n	8003e3a <_malloc_r+0xea>
 8003da2:	6823      	ldr	r3, [r4, #0]
 8003da4:	4639      	mov	r1, r7
 8003da6:	4630      	mov	r0, r6
 8003da8:	eb04 0903 	add.w	r9, r4, r3
 8003dac:	f000 fc5a 	bl	8004664 <_sbrk_r>
 8003db0:	4581      	cmp	r9, r0
 8003db2:	d142      	bne.n	8003e3a <_malloc_r+0xea>
 8003db4:	6821      	ldr	r1, [r4, #0]
 8003db6:	1a6d      	subs	r5, r5, r1
 8003db8:	4629      	mov	r1, r5
 8003dba:	4630      	mov	r0, r6
 8003dbc:	f7ff ffa6 	bl	8003d0c <sbrk_aligned>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d03a      	beq.n	8003e3a <_malloc_r+0xea>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	442b      	add	r3, r5
 8003dc8:	6023      	str	r3, [r4, #0]
 8003dca:	f8d8 3000 	ldr.w	r3, [r8]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	bb62      	cbnz	r2, 8003e2c <_malloc_r+0xdc>
 8003dd2:	f8c8 7000 	str.w	r7, [r8]
 8003dd6:	e00f      	b.n	8003df8 <_malloc_r+0xa8>
 8003dd8:	6822      	ldr	r2, [r4, #0]
 8003dda:	1b52      	subs	r2, r2, r5
 8003ddc:	d420      	bmi.n	8003e20 <_malloc_r+0xd0>
 8003dde:	2a0b      	cmp	r2, #11
 8003de0:	d917      	bls.n	8003e12 <_malloc_r+0xc2>
 8003de2:	1961      	adds	r1, r4, r5
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	6025      	str	r5, [r4, #0]
 8003de8:	bf18      	it	ne
 8003dea:	6059      	strne	r1, [r3, #4]
 8003dec:	6863      	ldr	r3, [r4, #4]
 8003dee:	bf08      	it	eq
 8003df0:	f8c8 1000 	streq.w	r1, [r8]
 8003df4:	5162      	str	r2, [r4, r5]
 8003df6:	604b      	str	r3, [r1, #4]
 8003df8:	4630      	mov	r0, r6
 8003dfa:	f000 f82f 	bl	8003e5c <__malloc_unlock>
 8003dfe:	f104 000b 	add.w	r0, r4, #11
 8003e02:	1d23      	adds	r3, r4, #4
 8003e04:	f020 0007 	bic.w	r0, r0, #7
 8003e08:	1ac2      	subs	r2, r0, r3
 8003e0a:	bf1c      	itt	ne
 8003e0c:	1a1b      	subne	r3, r3, r0
 8003e0e:	50a3      	strne	r3, [r4, r2]
 8003e10:	e7af      	b.n	8003d72 <_malloc_r+0x22>
 8003e12:	6862      	ldr	r2, [r4, #4]
 8003e14:	42a3      	cmp	r3, r4
 8003e16:	bf0c      	ite	eq
 8003e18:	f8c8 2000 	streq.w	r2, [r8]
 8003e1c:	605a      	strne	r2, [r3, #4]
 8003e1e:	e7eb      	b.n	8003df8 <_malloc_r+0xa8>
 8003e20:	4623      	mov	r3, r4
 8003e22:	6864      	ldr	r4, [r4, #4]
 8003e24:	e7ae      	b.n	8003d84 <_malloc_r+0x34>
 8003e26:	463c      	mov	r4, r7
 8003e28:	687f      	ldr	r7, [r7, #4]
 8003e2a:	e7b6      	b.n	8003d9a <_malloc_r+0x4a>
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	42a3      	cmp	r3, r4
 8003e32:	d1fb      	bne.n	8003e2c <_malloc_r+0xdc>
 8003e34:	2300      	movs	r3, #0
 8003e36:	6053      	str	r3, [r2, #4]
 8003e38:	e7de      	b.n	8003df8 <_malloc_r+0xa8>
 8003e3a:	230c      	movs	r3, #12
 8003e3c:	6033      	str	r3, [r6, #0]
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f000 f80c 	bl	8003e5c <__malloc_unlock>
 8003e44:	e794      	b.n	8003d70 <_malloc_r+0x20>
 8003e46:	6005      	str	r5, [r0, #0]
 8003e48:	e7d6      	b.n	8003df8 <_malloc_r+0xa8>
 8003e4a:	bf00      	nop
 8003e4c:	200005e8 	.word	0x200005e8

08003e50 <__malloc_lock>:
 8003e50:	4801      	ldr	r0, [pc, #4]	@ (8003e58 <__malloc_lock+0x8>)
 8003e52:	f7ff bf0e 	b.w	8003c72 <__retarget_lock_acquire_recursive>
 8003e56:	bf00      	nop
 8003e58:	200005e0 	.word	0x200005e0

08003e5c <__malloc_unlock>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	@ (8003e64 <__malloc_unlock+0x8>)
 8003e5e:	f7ff bf09 	b.w	8003c74 <__retarget_lock_release_recursive>
 8003e62:	bf00      	nop
 8003e64:	200005e0 	.word	0x200005e0

08003e68 <__sfputc_r>:
 8003e68:	6893      	ldr	r3, [r2, #8]
 8003e6a:	3b01      	subs	r3, #1
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	b410      	push	{r4}
 8003e70:	6093      	str	r3, [r2, #8]
 8003e72:	da08      	bge.n	8003e86 <__sfputc_r+0x1e>
 8003e74:	6994      	ldr	r4, [r2, #24]
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	db01      	blt.n	8003e7e <__sfputc_r+0x16>
 8003e7a:	290a      	cmp	r1, #10
 8003e7c:	d103      	bne.n	8003e86 <__sfputc_r+0x1e>
 8003e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e82:	f7ff bde8 	b.w	8003a56 <__swbuf_r>
 8003e86:	6813      	ldr	r3, [r2, #0]
 8003e88:	1c58      	adds	r0, r3, #1
 8003e8a:	6010      	str	r0, [r2, #0]
 8003e8c:	7019      	strb	r1, [r3, #0]
 8003e8e:	4608      	mov	r0, r1
 8003e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <__sfputs_r>:
 8003e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e98:	4606      	mov	r6, r0
 8003e9a:	460f      	mov	r7, r1
 8003e9c:	4614      	mov	r4, r2
 8003e9e:	18d5      	adds	r5, r2, r3
 8003ea0:	42ac      	cmp	r4, r5
 8003ea2:	d101      	bne.n	8003ea8 <__sfputs_r+0x12>
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	e007      	b.n	8003eb8 <__sfputs_r+0x22>
 8003ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003eac:	463a      	mov	r2, r7
 8003eae:	4630      	mov	r0, r6
 8003eb0:	f7ff ffda 	bl	8003e68 <__sfputc_r>
 8003eb4:	1c43      	adds	r3, r0, #1
 8003eb6:	d1f3      	bne.n	8003ea0 <__sfputs_r+0xa>
 8003eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003ebc <_vfiprintf_r>:
 8003ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec0:	460d      	mov	r5, r1
 8003ec2:	b09d      	sub	sp, #116	@ 0x74
 8003ec4:	4614      	mov	r4, r2
 8003ec6:	4698      	mov	r8, r3
 8003ec8:	4606      	mov	r6, r0
 8003eca:	b118      	cbz	r0, 8003ed4 <_vfiprintf_r+0x18>
 8003ecc:	6a03      	ldr	r3, [r0, #32]
 8003ece:	b90b      	cbnz	r3, 8003ed4 <_vfiprintf_r+0x18>
 8003ed0:	f7ff fcd8 	bl	8003884 <__sinit>
 8003ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003ed6:	07d9      	lsls	r1, r3, #31
 8003ed8:	d405      	bmi.n	8003ee6 <_vfiprintf_r+0x2a>
 8003eda:	89ab      	ldrh	r3, [r5, #12]
 8003edc:	059a      	lsls	r2, r3, #22
 8003ede:	d402      	bmi.n	8003ee6 <_vfiprintf_r+0x2a>
 8003ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003ee2:	f7ff fec6 	bl	8003c72 <__retarget_lock_acquire_recursive>
 8003ee6:	89ab      	ldrh	r3, [r5, #12]
 8003ee8:	071b      	lsls	r3, r3, #28
 8003eea:	d501      	bpl.n	8003ef0 <_vfiprintf_r+0x34>
 8003eec:	692b      	ldr	r3, [r5, #16]
 8003eee:	b99b      	cbnz	r3, 8003f18 <_vfiprintf_r+0x5c>
 8003ef0:	4629      	mov	r1, r5
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	f7ff fdee 	bl	8003ad4 <__swsetup_r>
 8003ef8:	b170      	cbz	r0, 8003f18 <_vfiprintf_r+0x5c>
 8003efa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003efc:	07dc      	lsls	r4, r3, #31
 8003efe:	d504      	bpl.n	8003f0a <_vfiprintf_r+0x4e>
 8003f00:	f04f 30ff 	mov.w	r0, #4294967295
 8003f04:	b01d      	add	sp, #116	@ 0x74
 8003f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0a:	89ab      	ldrh	r3, [r5, #12]
 8003f0c:	0598      	lsls	r0, r3, #22
 8003f0e:	d4f7      	bmi.n	8003f00 <_vfiprintf_r+0x44>
 8003f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f12:	f7ff feaf 	bl	8003c74 <__retarget_lock_release_recursive>
 8003f16:	e7f3      	b.n	8003f00 <_vfiprintf_r+0x44>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f26:	2330      	movs	r3, #48	@ 0x30
 8003f28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80040d8 <_vfiprintf_r+0x21c>
 8003f2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003f30:	f04f 0901 	mov.w	r9, #1
 8003f34:	4623      	mov	r3, r4
 8003f36:	469a      	mov	sl, r3
 8003f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f3c:	b10a      	cbz	r2, 8003f42 <_vfiprintf_r+0x86>
 8003f3e:	2a25      	cmp	r2, #37	@ 0x25
 8003f40:	d1f9      	bne.n	8003f36 <_vfiprintf_r+0x7a>
 8003f42:	ebba 0b04 	subs.w	fp, sl, r4
 8003f46:	d00b      	beq.n	8003f60 <_vfiprintf_r+0xa4>
 8003f48:	465b      	mov	r3, fp
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	4630      	mov	r0, r6
 8003f50:	f7ff ffa1 	bl	8003e96 <__sfputs_r>
 8003f54:	3001      	adds	r0, #1
 8003f56:	f000 80a7 	beq.w	80040a8 <_vfiprintf_r+0x1ec>
 8003f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003f5c:	445a      	add	r2, fp
 8003f5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003f60:	f89a 3000 	ldrb.w	r3, [sl]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 809f 	beq.w	80040a8 <_vfiprintf_r+0x1ec>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f74:	f10a 0a01 	add.w	sl, sl, #1
 8003f78:	9304      	str	r3, [sp, #16]
 8003f7a:	9307      	str	r3, [sp, #28]
 8003f7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003f80:	931a      	str	r3, [sp, #104]	@ 0x68
 8003f82:	4654      	mov	r4, sl
 8003f84:	2205      	movs	r2, #5
 8003f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f8a:	4853      	ldr	r0, [pc, #332]	@ (80040d8 <_vfiprintf_r+0x21c>)
 8003f8c:	f7fc f920 	bl	80001d0 <memchr>
 8003f90:	9a04      	ldr	r2, [sp, #16]
 8003f92:	b9d8      	cbnz	r0, 8003fcc <_vfiprintf_r+0x110>
 8003f94:	06d1      	lsls	r1, r2, #27
 8003f96:	bf44      	itt	mi
 8003f98:	2320      	movmi	r3, #32
 8003f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003f9e:	0713      	lsls	r3, r2, #28
 8003fa0:	bf44      	itt	mi
 8003fa2:	232b      	movmi	r3, #43	@ 0x2b
 8003fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8003fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8003fae:	d015      	beq.n	8003fdc <_vfiprintf_r+0x120>
 8003fb0:	9a07      	ldr	r2, [sp, #28]
 8003fb2:	4654      	mov	r4, sl
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	f04f 0c0a 	mov.w	ip, #10
 8003fba:	4621      	mov	r1, r4
 8003fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fc0:	3b30      	subs	r3, #48	@ 0x30
 8003fc2:	2b09      	cmp	r3, #9
 8003fc4:	d94b      	bls.n	800405e <_vfiprintf_r+0x1a2>
 8003fc6:	b1b0      	cbz	r0, 8003ff6 <_vfiprintf_r+0x13a>
 8003fc8:	9207      	str	r2, [sp, #28]
 8003fca:	e014      	b.n	8003ff6 <_vfiprintf_r+0x13a>
 8003fcc:	eba0 0308 	sub.w	r3, r0, r8
 8003fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	9304      	str	r3, [sp, #16]
 8003fd8:	46a2      	mov	sl, r4
 8003fda:	e7d2      	b.n	8003f82 <_vfiprintf_r+0xc6>
 8003fdc:	9b03      	ldr	r3, [sp, #12]
 8003fde:	1d19      	adds	r1, r3, #4
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	9103      	str	r1, [sp, #12]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	bfbb      	ittet	lt
 8003fe8:	425b      	neglt	r3, r3
 8003fea:	f042 0202 	orrlt.w	r2, r2, #2
 8003fee:	9307      	strge	r3, [sp, #28]
 8003ff0:	9307      	strlt	r3, [sp, #28]
 8003ff2:	bfb8      	it	lt
 8003ff4:	9204      	strlt	r2, [sp, #16]
 8003ff6:	7823      	ldrb	r3, [r4, #0]
 8003ff8:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ffa:	d10a      	bne.n	8004012 <_vfiprintf_r+0x156>
 8003ffc:	7863      	ldrb	r3, [r4, #1]
 8003ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004000:	d132      	bne.n	8004068 <_vfiprintf_r+0x1ac>
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	1d1a      	adds	r2, r3, #4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	9203      	str	r2, [sp, #12]
 800400a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800400e:	3402      	adds	r4, #2
 8004010:	9305      	str	r3, [sp, #20]
 8004012:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80040e8 <_vfiprintf_r+0x22c>
 8004016:	7821      	ldrb	r1, [r4, #0]
 8004018:	2203      	movs	r2, #3
 800401a:	4650      	mov	r0, sl
 800401c:	f7fc f8d8 	bl	80001d0 <memchr>
 8004020:	b138      	cbz	r0, 8004032 <_vfiprintf_r+0x176>
 8004022:	9b04      	ldr	r3, [sp, #16]
 8004024:	eba0 000a 	sub.w	r0, r0, sl
 8004028:	2240      	movs	r2, #64	@ 0x40
 800402a:	4082      	lsls	r2, r0
 800402c:	4313      	orrs	r3, r2
 800402e:	3401      	adds	r4, #1
 8004030:	9304      	str	r3, [sp, #16]
 8004032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004036:	4829      	ldr	r0, [pc, #164]	@ (80040dc <_vfiprintf_r+0x220>)
 8004038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800403c:	2206      	movs	r2, #6
 800403e:	f7fc f8c7 	bl	80001d0 <memchr>
 8004042:	2800      	cmp	r0, #0
 8004044:	d03f      	beq.n	80040c6 <_vfiprintf_r+0x20a>
 8004046:	4b26      	ldr	r3, [pc, #152]	@ (80040e0 <_vfiprintf_r+0x224>)
 8004048:	bb1b      	cbnz	r3, 8004092 <_vfiprintf_r+0x1d6>
 800404a:	9b03      	ldr	r3, [sp, #12]
 800404c:	3307      	adds	r3, #7
 800404e:	f023 0307 	bic.w	r3, r3, #7
 8004052:	3308      	adds	r3, #8
 8004054:	9303      	str	r3, [sp, #12]
 8004056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004058:	443b      	add	r3, r7
 800405a:	9309      	str	r3, [sp, #36]	@ 0x24
 800405c:	e76a      	b.n	8003f34 <_vfiprintf_r+0x78>
 800405e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004062:	460c      	mov	r4, r1
 8004064:	2001      	movs	r0, #1
 8004066:	e7a8      	b.n	8003fba <_vfiprintf_r+0xfe>
 8004068:	2300      	movs	r3, #0
 800406a:	3401      	adds	r4, #1
 800406c:	9305      	str	r3, [sp, #20]
 800406e:	4619      	mov	r1, r3
 8004070:	f04f 0c0a 	mov.w	ip, #10
 8004074:	4620      	mov	r0, r4
 8004076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800407a:	3a30      	subs	r2, #48	@ 0x30
 800407c:	2a09      	cmp	r2, #9
 800407e:	d903      	bls.n	8004088 <_vfiprintf_r+0x1cc>
 8004080:	2b00      	cmp	r3, #0
 8004082:	d0c6      	beq.n	8004012 <_vfiprintf_r+0x156>
 8004084:	9105      	str	r1, [sp, #20]
 8004086:	e7c4      	b.n	8004012 <_vfiprintf_r+0x156>
 8004088:	fb0c 2101 	mla	r1, ip, r1, r2
 800408c:	4604      	mov	r4, r0
 800408e:	2301      	movs	r3, #1
 8004090:	e7f0      	b.n	8004074 <_vfiprintf_r+0x1b8>
 8004092:	ab03      	add	r3, sp, #12
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	462a      	mov	r2, r5
 8004098:	4b12      	ldr	r3, [pc, #72]	@ (80040e4 <_vfiprintf_r+0x228>)
 800409a:	a904      	add	r1, sp, #16
 800409c:	4630      	mov	r0, r6
 800409e:	f3af 8000 	nop.w
 80040a2:	4607      	mov	r7, r0
 80040a4:	1c78      	adds	r0, r7, #1
 80040a6:	d1d6      	bne.n	8004056 <_vfiprintf_r+0x19a>
 80040a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80040aa:	07d9      	lsls	r1, r3, #31
 80040ac:	d405      	bmi.n	80040ba <_vfiprintf_r+0x1fe>
 80040ae:	89ab      	ldrh	r3, [r5, #12]
 80040b0:	059a      	lsls	r2, r3, #22
 80040b2:	d402      	bmi.n	80040ba <_vfiprintf_r+0x1fe>
 80040b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80040b6:	f7ff fddd 	bl	8003c74 <__retarget_lock_release_recursive>
 80040ba:	89ab      	ldrh	r3, [r5, #12]
 80040bc:	065b      	lsls	r3, r3, #25
 80040be:	f53f af1f 	bmi.w	8003f00 <_vfiprintf_r+0x44>
 80040c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80040c4:	e71e      	b.n	8003f04 <_vfiprintf_r+0x48>
 80040c6:	ab03      	add	r3, sp, #12
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	462a      	mov	r2, r5
 80040cc:	4b05      	ldr	r3, [pc, #20]	@ (80040e4 <_vfiprintf_r+0x228>)
 80040ce:	a904      	add	r1, sp, #16
 80040d0:	4630      	mov	r0, r6
 80040d2:	f000 f879 	bl	80041c8 <_printf_i>
 80040d6:	e7e4      	b.n	80040a2 <_vfiprintf_r+0x1e6>
 80040d8:	080046fc 	.word	0x080046fc
 80040dc:	08004706 	.word	0x08004706
 80040e0:	00000000 	.word	0x00000000
 80040e4:	08003e97 	.word	0x08003e97
 80040e8:	08004702 	.word	0x08004702

080040ec <_printf_common>:
 80040ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040f0:	4616      	mov	r6, r2
 80040f2:	4698      	mov	r8, r3
 80040f4:	688a      	ldr	r2, [r1, #8]
 80040f6:	690b      	ldr	r3, [r1, #16]
 80040f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80040fc:	4293      	cmp	r3, r2
 80040fe:	bfb8      	it	lt
 8004100:	4613      	movlt	r3, r2
 8004102:	6033      	str	r3, [r6, #0]
 8004104:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004108:	4607      	mov	r7, r0
 800410a:	460c      	mov	r4, r1
 800410c:	b10a      	cbz	r2, 8004112 <_printf_common+0x26>
 800410e:	3301      	adds	r3, #1
 8004110:	6033      	str	r3, [r6, #0]
 8004112:	6823      	ldr	r3, [r4, #0]
 8004114:	0699      	lsls	r1, r3, #26
 8004116:	bf42      	ittt	mi
 8004118:	6833      	ldrmi	r3, [r6, #0]
 800411a:	3302      	addmi	r3, #2
 800411c:	6033      	strmi	r3, [r6, #0]
 800411e:	6825      	ldr	r5, [r4, #0]
 8004120:	f015 0506 	ands.w	r5, r5, #6
 8004124:	d106      	bne.n	8004134 <_printf_common+0x48>
 8004126:	f104 0a19 	add.w	sl, r4, #25
 800412a:	68e3      	ldr	r3, [r4, #12]
 800412c:	6832      	ldr	r2, [r6, #0]
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	42ab      	cmp	r3, r5
 8004132:	dc26      	bgt.n	8004182 <_printf_common+0x96>
 8004134:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004138:	6822      	ldr	r2, [r4, #0]
 800413a:	3b00      	subs	r3, #0
 800413c:	bf18      	it	ne
 800413e:	2301      	movne	r3, #1
 8004140:	0692      	lsls	r2, r2, #26
 8004142:	d42b      	bmi.n	800419c <_printf_common+0xb0>
 8004144:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004148:	4641      	mov	r1, r8
 800414a:	4638      	mov	r0, r7
 800414c:	47c8      	blx	r9
 800414e:	3001      	adds	r0, #1
 8004150:	d01e      	beq.n	8004190 <_printf_common+0xa4>
 8004152:	6823      	ldr	r3, [r4, #0]
 8004154:	6922      	ldr	r2, [r4, #16]
 8004156:	f003 0306 	and.w	r3, r3, #6
 800415a:	2b04      	cmp	r3, #4
 800415c:	bf02      	ittt	eq
 800415e:	68e5      	ldreq	r5, [r4, #12]
 8004160:	6833      	ldreq	r3, [r6, #0]
 8004162:	1aed      	subeq	r5, r5, r3
 8004164:	68a3      	ldr	r3, [r4, #8]
 8004166:	bf0c      	ite	eq
 8004168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800416c:	2500      	movne	r5, #0
 800416e:	4293      	cmp	r3, r2
 8004170:	bfc4      	itt	gt
 8004172:	1a9b      	subgt	r3, r3, r2
 8004174:	18ed      	addgt	r5, r5, r3
 8004176:	2600      	movs	r6, #0
 8004178:	341a      	adds	r4, #26
 800417a:	42b5      	cmp	r5, r6
 800417c:	d11a      	bne.n	80041b4 <_printf_common+0xc8>
 800417e:	2000      	movs	r0, #0
 8004180:	e008      	b.n	8004194 <_printf_common+0xa8>
 8004182:	2301      	movs	r3, #1
 8004184:	4652      	mov	r2, sl
 8004186:	4641      	mov	r1, r8
 8004188:	4638      	mov	r0, r7
 800418a:	47c8      	blx	r9
 800418c:	3001      	adds	r0, #1
 800418e:	d103      	bne.n	8004198 <_printf_common+0xac>
 8004190:	f04f 30ff 	mov.w	r0, #4294967295
 8004194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004198:	3501      	adds	r5, #1
 800419a:	e7c6      	b.n	800412a <_printf_common+0x3e>
 800419c:	18e1      	adds	r1, r4, r3
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	2030      	movs	r0, #48	@ 0x30
 80041a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80041a6:	4422      	add	r2, r4
 80041a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80041ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80041b0:	3302      	adds	r3, #2
 80041b2:	e7c7      	b.n	8004144 <_printf_common+0x58>
 80041b4:	2301      	movs	r3, #1
 80041b6:	4622      	mov	r2, r4
 80041b8:	4641      	mov	r1, r8
 80041ba:	4638      	mov	r0, r7
 80041bc:	47c8      	blx	r9
 80041be:	3001      	adds	r0, #1
 80041c0:	d0e6      	beq.n	8004190 <_printf_common+0xa4>
 80041c2:	3601      	adds	r6, #1
 80041c4:	e7d9      	b.n	800417a <_printf_common+0x8e>
	...

080041c8 <_printf_i>:
 80041c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041cc:	7e0f      	ldrb	r7, [r1, #24]
 80041ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80041d0:	2f78      	cmp	r7, #120	@ 0x78
 80041d2:	4691      	mov	r9, r2
 80041d4:	4680      	mov	r8, r0
 80041d6:	460c      	mov	r4, r1
 80041d8:	469a      	mov	sl, r3
 80041da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80041de:	d807      	bhi.n	80041f0 <_printf_i+0x28>
 80041e0:	2f62      	cmp	r7, #98	@ 0x62
 80041e2:	d80a      	bhi.n	80041fa <_printf_i+0x32>
 80041e4:	2f00      	cmp	r7, #0
 80041e6:	f000 80d1 	beq.w	800438c <_printf_i+0x1c4>
 80041ea:	2f58      	cmp	r7, #88	@ 0x58
 80041ec:	f000 80b8 	beq.w	8004360 <_printf_i+0x198>
 80041f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80041f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80041f8:	e03a      	b.n	8004270 <_printf_i+0xa8>
 80041fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80041fe:	2b15      	cmp	r3, #21
 8004200:	d8f6      	bhi.n	80041f0 <_printf_i+0x28>
 8004202:	a101      	add	r1, pc, #4	@ (adr r1, 8004208 <_printf_i+0x40>)
 8004204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004208:	08004261 	.word	0x08004261
 800420c:	08004275 	.word	0x08004275
 8004210:	080041f1 	.word	0x080041f1
 8004214:	080041f1 	.word	0x080041f1
 8004218:	080041f1 	.word	0x080041f1
 800421c:	080041f1 	.word	0x080041f1
 8004220:	08004275 	.word	0x08004275
 8004224:	080041f1 	.word	0x080041f1
 8004228:	080041f1 	.word	0x080041f1
 800422c:	080041f1 	.word	0x080041f1
 8004230:	080041f1 	.word	0x080041f1
 8004234:	08004373 	.word	0x08004373
 8004238:	0800429f 	.word	0x0800429f
 800423c:	0800432d 	.word	0x0800432d
 8004240:	080041f1 	.word	0x080041f1
 8004244:	080041f1 	.word	0x080041f1
 8004248:	08004395 	.word	0x08004395
 800424c:	080041f1 	.word	0x080041f1
 8004250:	0800429f 	.word	0x0800429f
 8004254:	080041f1 	.word	0x080041f1
 8004258:	080041f1 	.word	0x080041f1
 800425c:	08004335 	.word	0x08004335
 8004260:	6833      	ldr	r3, [r6, #0]
 8004262:	1d1a      	adds	r2, r3, #4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6032      	str	r2, [r6, #0]
 8004268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800426c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004270:	2301      	movs	r3, #1
 8004272:	e09c      	b.n	80043ae <_printf_i+0x1e6>
 8004274:	6833      	ldr	r3, [r6, #0]
 8004276:	6820      	ldr	r0, [r4, #0]
 8004278:	1d19      	adds	r1, r3, #4
 800427a:	6031      	str	r1, [r6, #0]
 800427c:	0606      	lsls	r6, r0, #24
 800427e:	d501      	bpl.n	8004284 <_printf_i+0xbc>
 8004280:	681d      	ldr	r5, [r3, #0]
 8004282:	e003      	b.n	800428c <_printf_i+0xc4>
 8004284:	0645      	lsls	r5, r0, #25
 8004286:	d5fb      	bpl.n	8004280 <_printf_i+0xb8>
 8004288:	f9b3 5000 	ldrsh.w	r5, [r3]
 800428c:	2d00      	cmp	r5, #0
 800428e:	da03      	bge.n	8004298 <_printf_i+0xd0>
 8004290:	232d      	movs	r3, #45	@ 0x2d
 8004292:	426d      	negs	r5, r5
 8004294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004298:	4858      	ldr	r0, [pc, #352]	@ (80043fc <_printf_i+0x234>)
 800429a:	230a      	movs	r3, #10
 800429c:	e011      	b.n	80042c2 <_printf_i+0xfa>
 800429e:	6821      	ldr	r1, [r4, #0]
 80042a0:	6833      	ldr	r3, [r6, #0]
 80042a2:	0608      	lsls	r0, r1, #24
 80042a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80042a8:	d402      	bmi.n	80042b0 <_printf_i+0xe8>
 80042aa:	0649      	lsls	r1, r1, #25
 80042ac:	bf48      	it	mi
 80042ae:	b2ad      	uxthmi	r5, r5
 80042b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80042b2:	4852      	ldr	r0, [pc, #328]	@ (80043fc <_printf_i+0x234>)
 80042b4:	6033      	str	r3, [r6, #0]
 80042b6:	bf14      	ite	ne
 80042b8:	230a      	movne	r3, #10
 80042ba:	2308      	moveq	r3, #8
 80042bc:	2100      	movs	r1, #0
 80042be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80042c2:	6866      	ldr	r6, [r4, #4]
 80042c4:	60a6      	str	r6, [r4, #8]
 80042c6:	2e00      	cmp	r6, #0
 80042c8:	db05      	blt.n	80042d6 <_printf_i+0x10e>
 80042ca:	6821      	ldr	r1, [r4, #0]
 80042cc:	432e      	orrs	r6, r5
 80042ce:	f021 0104 	bic.w	r1, r1, #4
 80042d2:	6021      	str	r1, [r4, #0]
 80042d4:	d04b      	beq.n	800436e <_printf_i+0x1a6>
 80042d6:	4616      	mov	r6, r2
 80042d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80042dc:	fb03 5711 	mls	r7, r3, r1, r5
 80042e0:	5dc7      	ldrb	r7, [r0, r7]
 80042e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042e6:	462f      	mov	r7, r5
 80042e8:	42bb      	cmp	r3, r7
 80042ea:	460d      	mov	r5, r1
 80042ec:	d9f4      	bls.n	80042d8 <_printf_i+0x110>
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d10b      	bne.n	800430a <_printf_i+0x142>
 80042f2:	6823      	ldr	r3, [r4, #0]
 80042f4:	07df      	lsls	r7, r3, #31
 80042f6:	d508      	bpl.n	800430a <_printf_i+0x142>
 80042f8:	6923      	ldr	r3, [r4, #16]
 80042fa:	6861      	ldr	r1, [r4, #4]
 80042fc:	4299      	cmp	r1, r3
 80042fe:	bfde      	ittt	le
 8004300:	2330      	movle	r3, #48	@ 0x30
 8004302:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004306:	f106 36ff 	addle.w	r6, r6, #4294967295
 800430a:	1b92      	subs	r2, r2, r6
 800430c:	6122      	str	r2, [r4, #16]
 800430e:	f8cd a000 	str.w	sl, [sp]
 8004312:	464b      	mov	r3, r9
 8004314:	aa03      	add	r2, sp, #12
 8004316:	4621      	mov	r1, r4
 8004318:	4640      	mov	r0, r8
 800431a:	f7ff fee7 	bl	80040ec <_printf_common>
 800431e:	3001      	adds	r0, #1
 8004320:	d14a      	bne.n	80043b8 <_printf_i+0x1f0>
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	b004      	add	sp, #16
 8004328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432c:	6823      	ldr	r3, [r4, #0]
 800432e:	f043 0320 	orr.w	r3, r3, #32
 8004332:	6023      	str	r3, [r4, #0]
 8004334:	4832      	ldr	r0, [pc, #200]	@ (8004400 <_printf_i+0x238>)
 8004336:	2778      	movs	r7, #120	@ 0x78
 8004338:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800433c:	6823      	ldr	r3, [r4, #0]
 800433e:	6831      	ldr	r1, [r6, #0]
 8004340:	061f      	lsls	r7, r3, #24
 8004342:	f851 5b04 	ldr.w	r5, [r1], #4
 8004346:	d402      	bmi.n	800434e <_printf_i+0x186>
 8004348:	065f      	lsls	r7, r3, #25
 800434a:	bf48      	it	mi
 800434c:	b2ad      	uxthmi	r5, r5
 800434e:	6031      	str	r1, [r6, #0]
 8004350:	07d9      	lsls	r1, r3, #31
 8004352:	bf44      	itt	mi
 8004354:	f043 0320 	orrmi.w	r3, r3, #32
 8004358:	6023      	strmi	r3, [r4, #0]
 800435a:	b11d      	cbz	r5, 8004364 <_printf_i+0x19c>
 800435c:	2310      	movs	r3, #16
 800435e:	e7ad      	b.n	80042bc <_printf_i+0xf4>
 8004360:	4826      	ldr	r0, [pc, #152]	@ (80043fc <_printf_i+0x234>)
 8004362:	e7e9      	b.n	8004338 <_printf_i+0x170>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	f023 0320 	bic.w	r3, r3, #32
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	e7f6      	b.n	800435c <_printf_i+0x194>
 800436e:	4616      	mov	r6, r2
 8004370:	e7bd      	b.n	80042ee <_printf_i+0x126>
 8004372:	6833      	ldr	r3, [r6, #0]
 8004374:	6825      	ldr	r5, [r4, #0]
 8004376:	6961      	ldr	r1, [r4, #20]
 8004378:	1d18      	adds	r0, r3, #4
 800437a:	6030      	str	r0, [r6, #0]
 800437c:	062e      	lsls	r6, r5, #24
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	d501      	bpl.n	8004386 <_printf_i+0x1be>
 8004382:	6019      	str	r1, [r3, #0]
 8004384:	e002      	b.n	800438c <_printf_i+0x1c4>
 8004386:	0668      	lsls	r0, r5, #25
 8004388:	d5fb      	bpl.n	8004382 <_printf_i+0x1ba>
 800438a:	8019      	strh	r1, [r3, #0]
 800438c:	2300      	movs	r3, #0
 800438e:	6123      	str	r3, [r4, #16]
 8004390:	4616      	mov	r6, r2
 8004392:	e7bc      	b.n	800430e <_printf_i+0x146>
 8004394:	6833      	ldr	r3, [r6, #0]
 8004396:	1d1a      	adds	r2, r3, #4
 8004398:	6032      	str	r2, [r6, #0]
 800439a:	681e      	ldr	r6, [r3, #0]
 800439c:	6862      	ldr	r2, [r4, #4]
 800439e:	2100      	movs	r1, #0
 80043a0:	4630      	mov	r0, r6
 80043a2:	f7fb ff15 	bl	80001d0 <memchr>
 80043a6:	b108      	cbz	r0, 80043ac <_printf_i+0x1e4>
 80043a8:	1b80      	subs	r0, r0, r6
 80043aa:	6060      	str	r0, [r4, #4]
 80043ac:	6863      	ldr	r3, [r4, #4]
 80043ae:	6123      	str	r3, [r4, #16]
 80043b0:	2300      	movs	r3, #0
 80043b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80043b6:	e7aa      	b.n	800430e <_printf_i+0x146>
 80043b8:	6923      	ldr	r3, [r4, #16]
 80043ba:	4632      	mov	r2, r6
 80043bc:	4649      	mov	r1, r9
 80043be:	4640      	mov	r0, r8
 80043c0:	47d0      	blx	sl
 80043c2:	3001      	adds	r0, #1
 80043c4:	d0ad      	beq.n	8004322 <_printf_i+0x15a>
 80043c6:	6823      	ldr	r3, [r4, #0]
 80043c8:	079b      	lsls	r3, r3, #30
 80043ca:	d413      	bmi.n	80043f4 <_printf_i+0x22c>
 80043cc:	68e0      	ldr	r0, [r4, #12]
 80043ce:	9b03      	ldr	r3, [sp, #12]
 80043d0:	4298      	cmp	r0, r3
 80043d2:	bfb8      	it	lt
 80043d4:	4618      	movlt	r0, r3
 80043d6:	e7a6      	b.n	8004326 <_printf_i+0x15e>
 80043d8:	2301      	movs	r3, #1
 80043da:	4632      	mov	r2, r6
 80043dc:	4649      	mov	r1, r9
 80043de:	4640      	mov	r0, r8
 80043e0:	47d0      	blx	sl
 80043e2:	3001      	adds	r0, #1
 80043e4:	d09d      	beq.n	8004322 <_printf_i+0x15a>
 80043e6:	3501      	adds	r5, #1
 80043e8:	68e3      	ldr	r3, [r4, #12]
 80043ea:	9903      	ldr	r1, [sp, #12]
 80043ec:	1a5b      	subs	r3, r3, r1
 80043ee:	42ab      	cmp	r3, r5
 80043f0:	dcf2      	bgt.n	80043d8 <_printf_i+0x210>
 80043f2:	e7eb      	b.n	80043cc <_printf_i+0x204>
 80043f4:	2500      	movs	r5, #0
 80043f6:	f104 0619 	add.w	r6, r4, #25
 80043fa:	e7f5      	b.n	80043e8 <_printf_i+0x220>
 80043fc:	0800470d 	.word	0x0800470d
 8004400:	0800471e 	.word	0x0800471e

08004404 <__sflush_r>:
 8004404:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004408:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800440c:	0716      	lsls	r6, r2, #28
 800440e:	4605      	mov	r5, r0
 8004410:	460c      	mov	r4, r1
 8004412:	d454      	bmi.n	80044be <__sflush_r+0xba>
 8004414:	684b      	ldr	r3, [r1, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	dc02      	bgt.n	8004420 <__sflush_r+0x1c>
 800441a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800441c:	2b00      	cmp	r3, #0
 800441e:	dd48      	ble.n	80044b2 <__sflush_r+0xae>
 8004420:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004422:	2e00      	cmp	r6, #0
 8004424:	d045      	beq.n	80044b2 <__sflush_r+0xae>
 8004426:	2300      	movs	r3, #0
 8004428:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800442c:	682f      	ldr	r7, [r5, #0]
 800442e:	6a21      	ldr	r1, [r4, #32]
 8004430:	602b      	str	r3, [r5, #0]
 8004432:	d030      	beq.n	8004496 <__sflush_r+0x92>
 8004434:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004436:	89a3      	ldrh	r3, [r4, #12]
 8004438:	0759      	lsls	r1, r3, #29
 800443a:	d505      	bpl.n	8004448 <__sflush_r+0x44>
 800443c:	6863      	ldr	r3, [r4, #4]
 800443e:	1ad2      	subs	r2, r2, r3
 8004440:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004442:	b10b      	cbz	r3, 8004448 <__sflush_r+0x44>
 8004444:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004446:	1ad2      	subs	r2, r2, r3
 8004448:	2300      	movs	r3, #0
 800444a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800444c:	6a21      	ldr	r1, [r4, #32]
 800444e:	4628      	mov	r0, r5
 8004450:	47b0      	blx	r6
 8004452:	1c43      	adds	r3, r0, #1
 8004454:	89a3      	ldrh	r3, [r4, #12]
 8004456:	d106      	bne.n	8004466 <__sflush_r+0x62>
 8004458:	6829      	ldr	r1, [r5, #0]
 800445a:	291d      	cmp	r1, #29
 800445c:	d82b      	bhi.n	80044b6 <__sflush_r+0xb2>
 800445e:	4a2a      	ldr	r2, [pc, #168]	@ (8004508 <__sflush_r+0x104>)
 8004460:	40ca      	lsrs	r2, r1
 8004462:	07d6      	lsls	r6, r2, #31
 8004464:	d527      	bpl.n	80044b6 <__sflush_r+0xb2>
 8004466:	2200      	movs	r2, #0
 8004468:	6062      	str	r2, [r4, #4]
 800446a:	04d9      	lsls	r1, r3, #19
 800446c:	6922      	ldr	r2, [r4, #16]
 800446e:	6022      	str	r2, [r4, #0]
 8004470:	d504      	bpl.n	800447c <__sflush_r+0x78>
 8004472:	1c42      	adds	r2, r0, #1
 8004474:	d101      	bne.n	800447a <__sflush_r+0x76>
 8004476:	682b      	ldr	r3, [r5, #0]
 8004478:	b903      	cbnz	r3, 800447c <__sflush_r+0x78>
 800447a:	6560      	str	r0, [r4, #84]	@ 0x54
 800447c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800447e:	602f      	str	r7, [r5, #0]
 8004480:	b1b9      	cbz	r1, 80044b2 <__sflush_r+0xae>
 8004482:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004486:	4299      	cmp	r1, r3
 8004488:	d002      	beq.n	8004490 <__sflush_r+0x8c>
 800448a:	4628      	mov	r0, r5
 800448c:	f7ff fbf4 	bl	8003c78 <_free_r>
 8004490:	2300      	movs	r3, #0
 8004492:	6363      	str	r3, [r4, #52]	@ 0x34
 8004494:	e00d      	b.n	80044b2 <__sflush_r+0xae>
 8004496:	2301      	movs	r3, #1
 8004498:	4628      	mov	r0, r5
 800449a:	47b0      	blx	r6
 800449c:	4602      	mov	r2, r0
 800449e:	1c50      	adds	r0, r2, #1
 80044a0:	d1c9      	bne.n	8004436 <__sflush_r+0x32>
 80044a2:	682b      	ldr	r3, [r5, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d0c6      	beq.n	8004436 <__sflush_r+0x32>
 80044a8:	2b1d      	cmp	r3, #29
 80044aa:	d001      	beq.n	80044b0 <__sflush_r+0xac>
 80044ac:	2b16      	cmp	r3, #22
 80044ae:	d11e      	bne.n	80044ee <__sflush_r+0xea>
 80044b0:	602f      	str	r7, [r5, #0]
 80044b2:	2000      	movs	r0, #0
 80044b4:	e022      	b.n	80044fc <__sflush_r+0xf8>
 80044b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ba:	b21b      	sxth	r3, r3
 80044bc:	e01b      	b.n	80044f6 <__sflush_r+0xf2>
 80044be:	690f      	ldr	r7, [r1, #16]
 80044c0:	2f00      	cmp	r7, #0
 80044c2:	d0f6      	beq.n	80044b2 <__sflush_r+0xae>
 80044c4:	0793      	lsls	r3, r2, #30
 80044c6:	680e      	ldr	r6, [r1, #0]
 80044c8:	bf08      	it	eq
 80044ca:	694b      	ldreq	r3, [r1, #20]
 80044cc:	600f      	str	r7, [r1, #0]
 80044ce:	bf18      	it	ne
 80044d0:	2300      	movne	r3, #0
 80044d2:	eba6 0807 	sub.w	r8, r6, r7
 80044d6:	608b      	str	r3, [r1, #8]
 80044d8:	f1b8 0f00 	cmp.w	r8, #0
 80044dc:	dde9      	ble.n	80044b2 <__sflush_r+0xae>
 80044de:	6a21      	ldr	r1, [r4, #32]
 80044e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80044e2:	4643      	mov	r3, r8
 80044e4:	463a      	mov	r2, r7
 80044e6:	4628      	mov	r0, r5
 80044e8:	47b0      	blx	r6
 80044ea:	2800      	cmp	r0, #0
 80044ec:	dc08      	bgt.n	8004500 <__sflush_r+0xfc>
 80044ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044f6:	81a3      	strh	r3, [r4, #12]
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004500:	4407      	add	r7, r0
 8004502:	eba8 0800 	sub.w	r8, r8, r0
 8004506:	e7e7      	b.n	80044d8 <__sflush_r+0xd4>
 8004508:	20400001 	.word	0x20400001

0800450c <_fflush_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	690b      	ldr	r3, [r1, #16]
 8004510:	4605      	mov	r5, r0
 8004512:	460c      	mov	r4, r1
 8004514:	b913      	cbnz	r3, 800451c <_fflush_r+0x10>
 8004516:	2500      	movs	r5, #0
 8004518:	4628      	mov	r0, r5
 800451a:	bd38      	pop	{r3, r4, r5, pc}
 800451c:	b118      	cbz	r0, 8004526 <_fflush_r+0x1a>
 800451e:	6a03      	ldr	r3, [r0, #32]
 8004520:	b90b      	cbnz	r3, 8004526 <_fflush_r+0x1a>
 8004522:	f7ff f9af 	bl	8003884 <__sinit>
 8004526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f3      	beq.n	8004516 <_fflush_r+0xa>
 800452e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004530:	07d0      	lsls	r0, r2, #31
 8004532:	d404      	bmi.n	800453e <_fflush_r+0x32>
 8004534:	0599      	lsls	r1, r3, #22
 8004536:	d402      	bmi.n	800453e <_fflush_r+0x32>
 8004538:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800453a:	f7ff fb9a 	bl	8003c72 <__retarget_lock_acquire_recursive>
 800453e:	4628      	mov	r0, r5
 8004540:	4621      	mov	r1, r4
 8004542:	f7ff ff5f 	bl	8004404 <__sflush_r>
 8004546:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004548:	07da      	lsls	r2, r3, #31
 800454a:	4605      	mov	r5, r0
 800454c:	d4e4      	bmi.n	8004518 <_fflush_r+0xc>
 800454e:	89a3      	ldrh	r3, [r4, #12]
 8004550:	059b      	lsls	r3, r3, #22
 8004552:	d4e1      	bmi.n	8004518 <_fflush_r+0xc>
 8004554:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004556:	f7ff fb8d 	bl	8003c74 <__retarget_lock_release_recursive>
 800455a:	e7dd      	b.n	8004518 <_fflush_r+0xc>

0800455c <__swhatbuf_r>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	460c      	mov	r4, r1
 8004560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004564:	2900      	cmp	r1, #0
 8004566:	b096      	sub	sp, #88	@ 0x58
 8004568:	4615      	mov	r5, r2
 800456a:	461e      	mov	r6, r3
 800456c:	da0d      	bge.n	800458a <__swhatbuf_r+0x2e>
 800456e:	89a3      	ldrh	r3, [r4, #12]
 8004570:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004574:	f04f 0100 	mov.w	r1, #0
 8004578:	bf14      	ite	ne
 800457a:	2340      	movne	r3, #64	@ 0x40
 800457c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004580:	2000      	movs	r0, #0
 8004582:	6031      	str	r1, [r6, #0]
 8004584:	602b      	str	r3, [r5, #0]
 8004586:	b016      	add	sp, #88	@ 0x58
 8004588:	bd70      	pop	{r4, r5, r6, pc}
 800458a:	466a      	mov	r2, sp
 800458c:	f000 f848 	bl	8004620 <_fstat_r>
 8004590:	2800      	cmp	r0, #0
 8004592:	dbec      	blt.n	800456e <__swhatbuf_r+0x12>
 8004594:	9901      	ldr	r1, [sp, #4]
 8004596:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800459a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800459e:	4259      	negs	r1, r3
 80045a0:	4159      	adcs	r1, r3
 80045a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045a6:	e7eb      	b.n	8004580 <__swhatbuf_r+0x24>

080045a8 <__smakebuf_r>:
 80045a8:	898b      	ldrh	r3, [r1, #12]
 80045aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045ac:	079d      	lsls	r5, r3, #30
 80045ae:	4606      	mov	r6, r0
 80045b0:	460c      	mov	r4, r1
 80045b2:	d507      	bpl.n	80045c4 <__smakebuf_r+0x1c>
 80045b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	6123      	str	r3, [r4, #16]
 80045bc:	2301      	movs	r3, #1
 80045be:	6163      	str	r3, [r4, #20]
 80045c0:	b003      	add	sp, #12
 80045c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c4:	ab01      	add	r3, sp, #4
 80045c6:	466a      	mov	r2, sp
 80045c8:	f7ff ffc8 	bl	800455c <__swhatbuf_r>
 80045cc:	9f00      	ldr	r7, [sp, #0]
 80045ce:	4605      	mov	r5, r0
 80045d0:	4639      	mov	r1, r7
 80045d2:	4630      	mov	r0, r6
 80045d4:	f7ff fbbc 	bl	8003d50 <_malloc_r>
 80045d8:	b948      	cbnz	r0, 80045ee <__smakebuf_r+0x46>
 80045da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80045de:	059a      	lsls	r2, r3, #22
 80045e0:	d4ee      	bmi.n	80045c0 <__smakebuf_r+0x18>
 80045e2:	f023 0303 	bic.w	r3, r3, #3
 80045e6:	f043 0302 	orr.w	r3, r3, #2
 80045ea:	81a3      	strh	r3, [r4, #12]
 80045ec:	e7e2      	b.n	80045b4 <__smakebuf_r+0xc>
 80045ee:	89a3      	ldrh	r3, [r4, #12]
 80045f0:	6020      	str	r0, [r4, #0]
 80045f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045f6:	81a3      	strh	r3, [r4, #12]
 80045f8:	9b01      	ldr	r3, [sp, #4]
 80045fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80045fe:	b15b      	cbz	r3, 8004618 <__smakebuf_r+0x70>
 8004600:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004604:	4630      	mov	r0, r6
 8004606:	f000 f81d 	bl	8004644 <_isatty_r>
 800460a:	b128      	cbz	r0, 8004618 <__smakebuf_r+0x70>
 800460c:	89a3      	ldrh	r3, [r4, #12]
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	81a3      	strh	r3, [r4, #12]
 8004618:	89a3      	ldrh	r3, [r4, #12]
 800461a:	431d      	orrs	r5, r3
 800461c:	81a5      	strh	r5, [r4, #12]
 800461e:	e7cf      	b.n	80045c0 <__smakebuf_r+0x18>

08004620 <_fstat_r>:
 8004620:	b538      	push	{r3, r4, r5, lr}
 8004622:	4d07      	ldr	r5, [pc, #28]	@ (8004640 <_fstat_r+0x20>)
 8004624:	2300      	movs	r3, #0
 8004626:	4604      	mov	r4, r0
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	f7fc f9b3 	bl	8000998 <_fstat>
 8004632:	1c43      	adds	r3, r0, #1
 8004634:	d102      	bne.n	800463c <_fstat_r+0x1c>
 8004636:	682b      	ldr	r3, [r5, #0]
 8004638:	b103      	cbz	r3, 800463c <_fstat_r+0x1c>
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	bd38      	pop	{r3, r4, r5, pc}
 800463e:	bf00      	nop
 8004640:	200005dc 	.word	0x200005dc

08004644 <_isatty_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	4d06      	ldr	r5, [pc, #24]	@ (8004660 <_isatty_r+0x1c>)
 8004648:	2300      	movs	r3, #0
 800464a:	4604      	mov	r4, r0
 800464c:	4608      	mov	r0, r1
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	f7fc f9b2 	bl	80009b8 <_isatty>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_isatty_r+0x1a>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	b103      	cbz	r3, 800465e <_isatty_r+0x1a>
 800465c:	6023      	str	r3, [r4, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	200005dc 	.word	0x200005dc

08004664 <_sbrk_r>:
 8004664:	b538      	push	{r3, r4, r5, lr}
 8004666:	4d06      	ldr	r5, [pc, #24]	@ (8004680 <_sbrk_r+0x1c>)
 8004668:	2300      	movs	r3, #0
 800466a:	4604      	mov	r4, r0
 800466c:	4608      	mov	r0, r1
 800466e:	602b      	str	r3, [r5, #0]
 8004670:	f7fc f9ba 	bl	80009e8 <_sbrk>
 8004674:	1c43      	adds	r3, r0, #1
 8004676:	d102      	bne.n	800467e <_sbrk_r+0x1a>
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	b103      	cbz	r3, 800467e <_sbrk_r+0x1a>
 800467c:	6023      	str	r3, [r4, #0]
 800467e:	bd38      	pop	{r3, r4, r5, pc}
 8004680:	200005dc 	.word	0x200005dc

08004684 <_init>:
 8004684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004686:	bf00      	nop
 8004688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468a:	bc08      	pop	{r3}
 800468c:	469e      	mov	lr, r3
 800468e:	4770      	bx	lr

08004690 <_fini>:
 8004690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004692:	bf00      	nop
 8004694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004696:	bc08      	pop	{r3}
 8004698:	469e      	mov	lr, r3
 800469a:	4770      	bx	lr
